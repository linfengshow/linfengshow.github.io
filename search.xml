<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MVCC数据库多版本并发控制</title>
      <link href="/2024/04/11/MVCC%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
      <url>/2024/04/11/MVCC%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考：微信公众号——Java随想录（全网最详细MVCC讲解，一篇看懂）</p></blockquote><h1 id="MVCC解读"><a href="#MVCC解读" class="headerlink" title="MVCC解读"></a>MVCC解读</h1><h1 id="MVCC介绍"><a href="#MVCC介绍" class="headerlink" title="MVCC介绍"></a>MVCC介绍</h1><p>MVCC是数据库一种不加锁来解决读写冲突的方案，可以提高数据库并发性能，更好地处理读写冲突。</p><h2 id="相较于传统锁机制"><a href="#相较于传统锁机制" class="headerlink" title="相较于传统锁机制"></a>相较于传统锁机制</h2><p>传统锁机制也可以解决读写冲突，但使用锁同时也会带来死锁或者阻塞的风险。</p><h1 id="MVCC的优势"><a href="#MVCC的优势" class="headerlink" title="MVCC的优势"></a>MVCC的优势</h1><ul><li>读写操作不会冲突，这极大地提高了数据库的并发性能</li><li>降低死锁风险</li></ul><h1 id="MVCC原理"><a href="#MVCC原理" class="headerlink" title="MVCC原理"></a>MVCC原理</h1><p>MVCC机制的核心在于三点：隐藏字段、Undo Log、Read View</p><h2 id="隐藏字段"><a href="#隐藏字段" class="headerlink" title="隐藏字段"></a>隐藏字段</h2><p>Mysql的行数据除了我们自定义的数据，另外还有一部分隐藏的数据字段</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>DB_ROW_ID</td><td>作为行数据的隐藏主键，如果表中没有设定主键字段，那InnoDB会默认产生该字段，并选择为隐藏主键</td></tr><tr><td>DB_TRX_ID</td><td>当先行数据所属的事务ID，事务ID是唯一的</td></tr><tr><td>DB_ROLL_PTR</td><td>回滚指针，指向的是每个数据的上一个版本</td></tr></tbody></table><h2 id="Undo-Log"><a href="#Undo-Log" class="headerlink" title="Undo Log"></a>Undo Log</h2><p>Undo log里存放的是反操作，比如执行insert操作，则会在日志中记录delete，然后每条记录都与创建它的事务相关联，能够依次知道该回滚哪个事务的操作。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>事务回滚：当事务中断或者取消时，InnoDB会利用Undo日志中的记录，还原数据</li><li>MVCC实现：利用Undo日志，InnoDB可以为每个事务提供独立的视图。</li></ul><h3 id="回滚步骤"><a href="#回滚步骤" class="headerlink" title="回滚步骤"></a>回滚步骤</h3><ul><li>进行更新删除操作时，Mysql会将旧数据存入undo log</li><li>然后利用DB_ROLL_PTR找到旧的log记录</li><li>将旧值更新到相应行，实现回滚</li></ul><h2 id="Read-View"><a href="#Read-View" class="headerlink" title="Read View"></a>Read View</h2><p>InnoDB利用read view来控制事务可以看到哪一版本的数据，这样可以实现每个事务看到的数据都是自己应该看到的，不会受到其他事物影响，即不会发生脏读，幻读，不可重复读。</p><h3 id="可见性原则"><a href="#可见性原则" class="headerlink" title="可见性原则"></a>可见性原则</h3><p>在开启事务时，Mysql会将要修改数据的DB_TRX_ID取出，并和Undo log中的DB_TRX_ID进行比较，如果不符合规则，则通过DB_ROLL_PTR继续往更早的版本找，直到找到符合的版本。</p><p>简单来说，就是找到当前事务最晚可见的版本，这个版本可以是自己当前事务修改的版本，也可以是在当前事务开始前就已经提交的事务版本</p><h3 id="Read-View维护字段"><a href="#Read-View维护字段" class="headerlink" title="Read View维护字段"></a>Read View维护字段</h3><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>m_ids</td><td>记录在当前事务开始时，其他未提交事务的id，被称为活跃事务列表</td></tr><tr><td>m_creator_trx_id</td><td>创建该视图是事务id</td></tr><tr><td>m_low_limit_id</td><td>目前出现的最大事务ID + 1，也就是下一个事务的ID（对创建该视图的时间来说），如果有事务ID大于此值，则说明有事务是在此视图之后创建的，那么它修改的版本，当前视图是范围跟不到的</td></tr><tr><td>m_up_limit_id</td><td>活跃事务列表中的最小值，如果某个事务ID小于该值，说明该事务已提交，也就可以被视图访问</td></tr></tbody></table><h3 id="判断规则"><a href="#判断规则" class="headerlink" title="判断规则"></a>判断规则</h3><ul><li>访问的数据版本的事务号 <strong>DB_TRX_ID</strong>如果<strong>等于</strong>创建该视图的事务号<strong>m_creator_trx_id</strong>，则说明是同一事务做出的修改，可以正常访问</li><li>访问版本的事务号<strong>小于</strong>当前记录的最小活跃ID <strong>m_up_limit_id</strong>，说明在访问已提交数据，自然可以访问</li><li>如果访问的事务号要<strong>大于</strong>当前的最大事务号<strong>m_low_limit_id</strong>，就说明该数据是在视图之后的事务创建的，自然无法访问。</li><li>如果事务号在m_up_limit_id和m_low_limit_id之间，则需要另外判断该事务是否在活跃表中，如果在，说明是其他事务的修改，本事务无法访问。如果不在，说明创建本视图时，该事务已经提交了，则可以访问。</li></ul><h3 id="RC和RR中Read-View区别"><a href="#RC和RR中Read-View区别" class="headerlink" title="RC和RR中Read View区别"></a>RC和RR中Read View区别</h3><p>RC（读提交）：每次select都会生成新的read view，这就可能导致不可重复读</p><p>RR（可重复读）:只会在第一次select生成readview，其余select复用第一次的，保证数据一致。</p>]]></content>
      
      
      <categories>
          
          <category> 面试,Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 面试 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用RequestRateLimiter实现简单限流</title>
      <link href="/2024/04/06/%E5%88%A9%E7%94%A8RequestRateLimiter%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E9%99%90%E6%B5%81/"/>
      <url>/2024/04/06/%E5%88%A9%E7%94%A8RequestRateLimiter%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E9%99%90%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>自己做的微服务网站今天终于算是上线了（内部测试），虽然是内部测试，但在上线之前还是考虑做了一下gateway网关的限流，担心群众里面有坏人🐍</p><h2 id="利用RequestRateLimiter实现简单限流"><a href="#利用RequestRateLimiter实现简单限流" class="headerlink" title="利用RequestRateLimiter实现简单限流"></a>利用RequestRateLimiter实现简单限流</h2><p>RequestRateLimiter是gateway自带的 过滤器。</p><p>RequestRateLimiter 过滤器可以基于令牌桶算法实现请求限流。其具体原理如下：</p><ol><li><p><strong>创建令牌桶</strong>：在 RequestRateLimiter 过滤器初始化时，会读取配置参数创建对应的令牌桶。</p></li><li><p><strong>生成令牌</strong>：当新的请求到达 RequestRateLimiter 过滤器时，它会检查令牌桶中是否有足够的令牌。如果有，则从令牌桶中移除一个令牌；否则请求被拒绝。</p></li><li><p><strong>限制连接数</strong>：在超出最大连接数之后会在队列里等待。</p></li><li><p><strong>计时更新令牌桶大小</strong>：RequestRateLimiter 过滤器会定期计时更新令牌桶的大小，确保让进入的请求有机会得到执行，同时防止恶意攻击或者系统故障导致服务器负载过重。</p></li></ol><p>在使用 RequestRateLimiter 过滤器时，我们可以通过设置参数 <code>replenishRate</code> 和 <code>burstCapacity</code> 来控制令牌桶的填充速率和容量，然后将其与特定的路由或服务进行绑定，以实现对特定接口的限流效果。</p><blockquote><p>资料来源——知乎用户：苏格拉没有底</p></blockquote><h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><ol><li><p>引入redis依赖并配置连接信息<br>RequestRateLimiter 一般会依赖 ReactiveStringRedisTemplate, 而它又依赖到 ReactiveRedisConnectionFactory 的实现类LettuceConnectionFactory</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>实现限流策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/4/6 10:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestRateLimiterResolver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyResolver <span class="title function_">ipKeyResolver</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        ip限流</span></span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(</span><br><span class="line">                exchange.getRequest()</span><br><span class="line">                        .getHeaders()</span><br><span class="line">                        .getFirst(<span class="string">&quot;X-Forwarded-For&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyResolver <span class="title function_">pathKeyResolver</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        根据请求路径限流</span></span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(</span><br><span class="line">                exchange.getRequest()</span><br><span class="line">                        .getPath()</span><br><span class="line">                        .toString()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤器接受一个可选的keyResolver参数和特定于速率限制器的参数。该参数的作用就是用来根据你设定的规则生成key，比如在redis中使用什么key。</p></li><li><p>配置限流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- id: subject # 路由ID 刷题模块</span><br><span class="line">  uri: lb:<span class="comment">//al-club-subject</span></span><br><span class="line">  predicates:</span><br><span class="line">    - Path=/subject<span class="comment">/**</span></span><br><span class="line"><span class="comment">  filters:</span></span><br><span class="line"><span class="comment">    - StripPrefix=1</span></span><br><span class="line"><span class="comment">    - name: RequestRateLimiter</span></span><br><span class="line"><span class="comment">      args:</span></span><br><span class="line"><span class="comment">        #                令牌桶填充速率</span></span><br><span class="line"><span class="comment">        redis-rate-limiter.replenishRate: 50</span></span><br><span class="line"><span class="comment">        #                令牌桶上限</span></span><br><span class="line"><span class="comment">        redis-rate-limiter.burstCapacity: 50</span></span><br><span class="line"><span class="comment">        #                获取Bean对象</span></span><br><span class="line"><span class="comment">        key-resolver: &quot;#&#123;<span class="doctag">@pathKeyResolver</span>&#125;&quot;</span></span><br></pre></td></tr></table></figure><p> “#{@pathKeyResolver}”是一个SpEL表达式，它引用了一个名为userKeyResolver的bean,也就是我们刚刚定义的KeyResolver，这样就可以实现一个简单的限流。</p></li></ol><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>修改nacos上的配置，改小一点，方便演示</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202404061331628.png" alt="image-20240406133127520"></p><p>进行一次小小的压测（软件是apifox）</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202404061332732.png" alt="image-20240406133252695"></p><p>结果</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202404061334077.png" alt="image-20240406133445017"></p><p>可以看到限流成功，失败请求的错误码为429，代表Too many Requests</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redisson实现可重入锁原理</title>
      <link href="/2024/03/06/Redisson%E5%AE%9E%E7%8E%B0%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E5%8E%9F%E7%90%86/"/>
      <url>/2024/03/06/Redisson%E5%AE%9E%E7%8E%B0%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Redisson实现可重入锁原理"><a href="#Redisson实现可重入锁原理" class="headerlink" title="Redisson实现可重入锁原理"></a>Redisson实现可重入锁原理</h1><p>Redisson底层实现分布式锁是采用hash结构存储锁，</p><p>其中Key代表锁名，也是一把锁的唯一标识，key存在说明此时这把锁已经被持有了</p><p>Value中的key按照id + “：” + threadId命名，作为当Key一致时，即有线程想获取同一把锁时，分辨是否是当前锁的进程，如果不是，则加锁失败</p><p>Value中的小value作为锁的计数器，每次线程获取锁，则加1，释放锁就减1，只有同一线程中才可以重入同一把锁，每重入一次，value就计数一次</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202403061547872.jpg"></p><p>下面是加锁的lua脚本代码</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;hset&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span></span><br></pre></td></tr></table></figure><p>参数有三个：</p><p><strong>KEYS[1] ： 锁名称</strong></p><p><strong>ARGV[1]：  锁失效时间</strong></p><p><strong>ARGV[2]：  id + “:” + threadId; 锁的小key</strong></p><p>可以看到，它先判断锁是否存在，如果不存在则直接获取锁，将传入的信息以hash的形式存入。</p><p>若锁存在，则取其中的threadId，与传入的threadid对比，一致则另计数器加1代表重入该锁一次</p><p>若比对失败，返回nil</p><p>释放锁逻辑和加锁类似</p><p>参数有三个：</p><p><strong>KEYS[1] ： 锁名称</strong></p><p><strong>ARGV[1]：线程唯一标识</strong></p><p><strong>ARGV[2]：  锁的自动释放时间</strong></p><p>首先判断是否是自己的锁，不是则返回nil</p><p>是自己的则将计数器减1</p><p>然后判断计数器是否大于0，是则更新锁的释放时间</p><p>不是则说明已经没有操作在持有锁了，则根据key删除锁</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Resource和Autowired区别</title>
      <link href="/2024/03/02/Resource%E5%92%8CAutowired%E5%8C%BA%E5%88%AB/"/>
      <url>/2024/03/02/Resource%E5%92%8CAutowired%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="Resource和-Autowired区别"><a href="#Resource和-Autowired区别" class="headerlink" title="@Resource和@Autowired区别"></a>@Resource和@Autowired区别</h1><p>@Resource和@Autowired都是用来做依赖注入的，但他们存在几点不同：</p><h2 id="1-来源不同"><a href="#1-来源不同" class="headerlink" title="1.来源不同"></a>1.来源不同</h2><p>@Resource来源于Java定义的注解，来自于JSR-250</p><p>@Autowired来自于Spring定义的注解</p><h2 id="2-支持参数不同"><a href="#2-支持参数不同" class="headerlink" title="2.支持参数不同"></a>2.支持参数不同</h2><p>@Resource 支持七个参数</p><blockquote><ul><li>name：资源的JNDI名称。在spring的注入时，指定bean的唯一标识。</li><li>type：指定bean的类型。</li><li>lookup:引用指向的资源的名称。它可以使用全局JNDI名称链接到任何兼容的资源。</li><li>authenticationType:指定资源的身份验证类型。它只能为任何受支持类型的连接工厂的资源指定此选项，而不能为其他类型的资源指定此选项。</li><li>shareable：指定此资源是否可以在此组件和其他组件之间共享。</li><li>mappedName：指定资源的映射名称。</li><li>description：指定资源的描述。</li></ul></blockquote><p>@Autowired 仅支持一个参数requied</p><h2 id="3-依赖查找顺序不同"><a href="#3-依赖查找顺序不同" class="headerlink" title="3.依赖查找顺序不同"></a>3.依赖查找顺序不同</h2><p>@Resource先根据name查找对象，如果通过name找不到，则通过类型查找</p><p>@Autowired和Resource相反，即先查找类型，再查找name</p><h2 id="4-注入规则不同"><a href="#4-注入规则不同" class="headerlink" title="4.注入规则不同"></a>4.注入规则不同</h2><p>@Autowired支持：属性注入，构造方法注入，Setter注入</p><p>@Resource只支持：属性注入，Setter注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//属性注入  </span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setter 注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-编译器报错"><a href="#5-编译器报错" class="headerlink" title="5.编译器报错"></a>5.编译器报错</h2><p>@Autowired编译器会报错（不影响运行）</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202403030002530.png" alt="image-20240303000251494"></p><p>@Resource不存在报错</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202403030003619.png" alt="image-20240303000321589"></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx怎么解决跨域问题</title>
      <link href="/2024/03/02/Nginx%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2024/03/02/Nginx%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx是怎么解决跨域问题的"><a href="#Nginx是怎么解决跨域问题的" class="headerlink" title="Nginx是怎么解决跨域问题的"></a>Nginx是怎么解决跨域问题的</h1><p>跨域问题：</p><p>具体来说是浏览器如果向一个地址不同，或者端口号不同的链接发送请求，那么浏览器会禁止这种请求。</p><p>Nginx解决跨域问题，主要的方法是反向代理，何为正向代理，何为反向代理？</p><p>正向代理：<br>正向代理代理客户端，如果我们想要访问某个网站，但是该网站无法直接访问，那我们可以通过某个服务器的正向代理，来间接访问该网站，其中最典型的例子就是VPN</p><p>反向代理：<br>反向代理代理服务器，即你想要访问网站A，但网站A实际上会跳转到网站B，但是用户并不清楚，用户只认为自己访问了网站A，这就可以称网站A反向代理了网站B。</p><p>其实不仅仅是用户不知道自己访问的是网站B，浏览器也察觉不到，在浏览器的视角里，它是对自己的IP和端口发送了请求，这样并不会违反浏览器的跨域规则，然而实际上发送的请求都被转发到真正的后端服务器上的了，跨域问题就这样解决了。</p><h1 id="附上nginx反向代理的配置"><a href="#附上nginx反向代理的配置" class="headerlink" title="附上nginx反向代理的配置"></a>附上nginx反向代理的配置</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/json;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    </span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8082;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        # 指定前端项目所在的位置</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html/hmdp;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location /api &#123;  </span><br><span class="line">            default_type  application/json;</span><br><span class="line">            #internal;  </span><br><span class="line">            keepalive_timeout   30s;  </span><br><span class="line">            keepalive_requests  1000;  </span><br><span class="line">            #支持keep-alive  </span><br><span class="line">            proxy_http_version 1.1;  </span><br><span class="line">            rewrite /api(/.*) $1 break;  </span><br><span class="line">            proxy_pass_request_headers on;</span><br><span class="line">            #more_clear_input_headers Accept-Encoding;  </span><br><span class="line">            proxy_next_upstream error timeout;  </span><br><span class="line">            proxy_pass http://127.0.0.1:8081;</span><br><span class="line">            #proxy_pass http://backend;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        server 127.0.0.1:8081 max_fails=5 fail_timeout=10s weight=1;</span><br><span class="line">        #server 127.0.0.1:8082 max_fails=5 fail_timeout=10s weight=1;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Session,Cookie,Jwt,Filter,Interceptor区别</title>
      <link href="/2024/03/02/Session-Cookie-Jwt-Filter-Interceptor%E5%8C%BA%E5%88%AB/"/>
      <url>/2024/03/02/Session-Cookie-Jwt-Filter-Interceptor%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="Cookie，Session，JWT"><a href="#Cookie，Session，JWT" class="headerlink" title="Cookie，Session，JWT"></a>Cookie，Session，JWT</h1><p>三者普遍都是用来做登录验证的：</p><h2 id="cookie：客户端会话跟踪"><a href="#cookie：客户端会话跟踪" class="headerlink" title="cookie：客户端会话跟踪"></a>cookie：客户端会话跟踪</h2><p>登录成功后会在浏览器存一个cookie，服务端检查请求中是否存在cookie，以此来做登录验证</p><p>缺点：<br>移动端无法使用，不安全（可能被窃取——XSS），不能跨域</p><h2 id="Session：服务端会话跟踪"><a href="#Session：服务端会话跟踪" class="headerlink" title="Session：服务端会话跟踪"></a>Session：服务端会话跟踪</h2><p>服务端存储用户登录信息</p><p>缺点：</p><p>集群环境下无法使用</p><p>存在和cooike一样的缺点</p><h2 id="JWT：令牌"><a href="#JWT：令牌" class="headerlink" title="JWT：令牌"></a>JWT：令牌</h2><p>登录成功生成令牌，客户端存放令牌，每次请求时在请求头中携带令牌，安全系数较高，无法被篡改</p><h1 id="Filter，Interceptor"><a href="#Filter，Interceptor" class="headerlink" title="Filter，Interceptor"></a>Filter，Interceptor</h1><p>Interceptor拦截器：</p><p>由Spring框架提供，是一种动态拦截方法的机制</p><p>filter 过滤器：</p><p>javaweb三大组件（servlet,filter,listener）之一,可以拦截对资源的请求，一般完成一些通用操作</p><p>两者区别：</p><p>1.接口规范不同：过滤器需要实现Filter接口，拦截器需要实现HandlerInterceptor接口</p><p>2.拦截范围不同：filter会拦截所有对资源的请求，interceptor只会拦截对Spring环境中的资源的请求</p><p>s</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java后端常用操作汇总</title>
      <link href="/2024/03/02/java%E5%90%8E%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/"/>
      <url>/2024/03/02/java%E5%90%8E%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="后端百宝箱"><a href="#后端百宝箱" class="headerlink" title="后端百宝箱"></a>后端百宝箱</h1><h1 id="随机生成验证码"><a href="#随机生成验证码" class="headerlink" title="随机生成验证码"></a>随机生成验证码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        调用hutool的工具，随机生成6位验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span>  <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br></pre></td></tr></table></figure><h1 id="验证手机号，邮箱等是否合法的正则表达式"><a href="#验证手机号，邮箱等是否合法的正则表达式" class="headerlink" title="验证手机号，邮箱等是否合法的正则表达式"></a>验证手机号，邮箱等是否合法的正则表达式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手机号正则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PHONE_REGEX</span> <span class="operator">=</span> <span class="string">&quot;^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\\d&#123;8&#125;$&quot;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 邮箱正则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EMAIL_REGEX</span> <span class="operator">=</span> <span class="string">&quot;^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$&quot;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密码正则。4~32位的字母、数字、下划线</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD_REGEX</span> <span class="operator">=</span> <span class="string">&quot;^\\w&#123;4,32&#125;$&quot;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码正则, 6位数字或字母</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">VERIFY_CODE_REGEX</span> <span class="operator">=</span> <span class="string">&quot;^[a-zA-Z\\d]&#123;6&#125;$&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="根据正则表达式的验证方法"><a href="#根据正则表达式的验证方法" class="headerlink" title="根据正则表达式的验证方法"></a>根据正则表达式的验证方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">mismatch</span><span class="params">(String str, String regex)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(str)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !str.matches(regex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="非Spring组件如何注入依赖"><a href="#非Spring组件如何注入依赖" class="headerlink" title="非Spring组件如何注入依赖"></a>非Spring组件如何注入依赖</h1><p>法一：</p><p>正常注入，在调用时用带有@Bean的方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> LoginInterceptor <span class="title function_">authenticationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：</p><p>构造器注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LoginInterceptor</span><span class="params">(StringRedisTemplate redisTemplate)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring环境中调用并传入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>(stringRedisTemplate))</span><br></pre></td></tr></table></figure><h1 id="Redis工具类封装"><a href="#Redis工具类封装" class="headerlink" title="Redis工具类封装"></a>Redis工具类封装</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheClient</span><span class="params">(StringRedisTemplate redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>: 封装缓存存储工具</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [key, value, time, unit]</span></span><br><span class="line"><span class="comment">         * 键，值，时间，时间单位</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> JSONUtil.toJsonStr(value);</span><br><span class="line"></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,data,time,unit);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWithLogicalExpire</span><span class="params">(String key,Object value,Long time,TimeUnit unit)</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>: 利用逻辑时间存储，防止缓存击穿</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [key, value, time, unit]</span></span><br><span class="line"><span class="comment">         * 键，值，时间，时间单位</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        这里存放的value应该是同包下RedisData类</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">        data.setData(value);</span><br><span class="line">        data.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(data);</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,jsonStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;R,ID&gt; R <span class="title function_">queryWithPassThrough</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type ,Function&lt;ID,R&gt; dbFallback,Long time,TimeUnit unit)</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>: 读数据并防止缓存穿透</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [key, id, type, dbFallback,time,unit]</span></span><br><span class="line"><span class="comment">         * 键，查询id，转换类型，数据库查询方法，过期时间，时间类型</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> R</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isNotBlank(json))&#123;</span><br><span class="line"><span class="comment">//            命中，则直接返回</span></span><br><span class="line">            <span class="type">R</span> <span class="variable">bean</span> <span class="operator">=</span> JSONUtil.toBean(json, type);</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(json != <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//            命中空数据</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        没命中则查询数据库</span></span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">        <span class="keyword">if</span>(r == <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//            存入空数据</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key,<span class="string">&quot;&quot;</span>,RedisConstants.CACHE_NULL_TTL,TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;未命中，内存存入空数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        存入缓存</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(r),time,unit);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;R,ID&gt; R <span class="title function_">queryWithLogicalExpire</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type ,Function&lt;ID,R&gt; dbFallback,Long time,TimeUnit unit)</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Description</span>: 读数据并防止缓存击穿</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Params</span>: [key, id, type, dbFallback,time,unit]</span></span><br><span class="line"><span class="comment">         * 键，查询id，转换类型，数据库查询方法，过期时间，时间类型</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Return</span> R</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isBlank(json))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        命中，则转换</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(json, RedisData.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">data</span> <span class="operator">=</span> redisData.getData();</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> JSONUtil.toBean((JSONObject) data, type);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="keyword">if</span>(expireTime.isAfter(LocalDateTime.now()))&#123;</span><br><span class="line"><span class="comment">//            未过期，直接返回</span></span><br><span class="line">            <span class="keyword">return</span>  r;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        过期了，则调用线程，更新缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> RedisConstants.LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isLock)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            二次验证,防止重复重建</span></span><br><span class="line"><span class="comment">//            json = redisTemplate.opsForValue().get(key);</span></span><br><span class="line"><span class="comment">//            if(StrUtil.isBlank(json))&#123;</span></span><br><span class="line"><span class="comment">//                return null;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////        命中，则转换</span></span><br><span class="line"><span class="comment">//            redisData = JSONUtil.toBean(json, RedisData.class);</span></span><br><span class="line"><span class="comment">//            data = redisData.getData();</span></span><br><span class="line"><span class="comment">//            R reR = JSONUtil.toBean((JSONObject) data, type);</span></span><br><span class="line"><span class="comment">//            expireTime = redisData.getExpireTime();</span></span><br><span class="line"><span class="comment">//            if(expireTime.isAfter(LocalDateTime.now()))&#123;</span></span><br><span class="line"><span class="comment">////            未过期，直接返回</span></span><br><span class="line"><span class="comment">//                return  reR;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            验证失败，申请线程，重建缓存</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//                    重建缓存</span></span><br><span class="line"><span class="comment">//                    查询数据库</span></span><br><span class="line">                    <span class="type">R</span> <span class="variable">r1</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line"><span class="comment">//                    写入缓存</span></span><br><span class="line">                    <span class="built_in">this</span>.setWithLogicalExpire(key,r1,time,unit);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//                    释放锁</span></span><br><span class="line">                    unLock(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        返回旧数据</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, LOCK_SHOP_TTL, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    释放互斥锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CACHE_KEY_SEPARATOR</span> <span class="operator">=</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建缓存key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">buildKey</span><span class="params">(String... strObjs)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(strObjs).collect(Collectors.joining(CACHE_KEY_SEPARATOR));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否存在key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * set(不带过期)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">    redisTemplate.opsForValue().set(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * set(带过期)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setNx</span><span class="params">(String key, String value, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForValue().setIfAbsent(key, value, time, timeUnit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取string类型缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (String) redisTemplate.opsForValue().get(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">zAdd</span><span class="params">(String key, String value, Long score)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForZSet().add(key, value, Double.valueOf(String.valueOf(score)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">countZset</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForZSet().size(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">rangeZset</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForZSet().range(key, start, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">removeZset</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForZSet().remove(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeZsetList</span><span class="params">(String key, Set&lt;String&gt; value)</span> &#123;</span><br><span class="line">    value.stream().forEach((val) -&gt; redisTemplate.opsForZSet().remove(key, val));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Double <span class="title function_">score</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForZSet().score(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">rangeByScore</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForZSet().rangeByScore(key, Double.valueOf(String.valueOf(start)), Double.valueOf(String.valueOf(end)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">addScore</span><span class="params">(String key, Object obj, <span class="type">double</span> score)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForZSet().incrementScore(key, obj, score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">rank</span><span class="params">(String key, Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForZSet().rank(key, obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据库密码加密"><a href="#数据库密码加密" class="headerlink" title="数据库密码加密"></a>数据库密码加密</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">mEp5QZ5jrCO/G4PI+/K1C8jK9k8IzR3tr/R5TyLsGxE4dlkFcQs/UdVG/JKKnqVGG94F0dDC2w/SnFHP2CL39Q==</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:/***?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment">#    druid配置</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">2000</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 开启配置</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">connection-properties:</span> <span class="string">config.decrypt=true;config.decrypt.key=$&#123;publicKey&#125;;</span> <span class="comment">#密码解密</span></span><br><span class="line">  <span class="attr">publicKey:</span> <span class="string">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKhxct4yqOKXCvJO4NuTqhiszWmFVS+I6Zo6r2eqAqa2nQo4MniASZ3hvILYTi5v3o+jTxKchknMK6KXDUGtLhECAwEAAQ==</span>    </span><br></pre></td></tr></table></figure><p>不过这样由于publicKey（公钥）是直接放在配置文件中的，所以实际还可能需要将publicKey存到某个文件夹下，或者手动输入。</p><p>加密代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidEncryptUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String PRIVATEKEY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String PUBLICKEY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] keyPair = ConfigTools.genKeyPair(<span class="number">512</span>);</span><br><span class="line">            PRIVATEKEY = keyPair[<span class="number">0</span>];</span><br><span class="line">            PUBLICKEY = keyPair[<span class="number">1</span>];</span><br><span class="line">            log.debug(<span class="string">&quot;private: &#123;&#125; public: &#123;&#125;&quot;</span>,PRIVATEKEY,PUBLICKEY);</span><br><span class="line"><span class="comment">//            System.out.println(&quot;private:&quot; + PRIVATEKEY + &quot;public: &quot; + PUBLICKEY);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchProviderException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String plainText)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encrypt</span> <span class="operator">=</span> ConfigTools.encrypt(PRIVATEKEY, plainText);</span><br><span class="line">        log.debug(<span class="string">&quot;加密后：&#123;&#125;&quot;</span>,encrypt);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;加密后：&quot; + encrypt);</span></span><br><span class="line">        <span class="keyword">return</span> encrypt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decrypt</span><span class="params">(String publicKey, String encryptText)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        解密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">decrypt</span> <span class="operator">=</span> ConfigTools.decrypt(publicKey, encryptText);</span><br><span class="line">        log.debug(<span class="string">&quot;解密后: &#123;&#125;&quot;</span>,decrypt);</span><br><span class="line">        <span class="keyword">return</span> decrypt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        获得加密后的代码，以及解码公钥</span></span><br><span class="line">        encrypt(<span class="string">&quot;****&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="统一返回类Result"><a href="#统一返回类Result" class="headerlink" title="统一返回类Result"></a>统一返回类Result</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.setSuccess(<span class="literal">true</span>);</span><br><span class="line">        result.setCode(ResultCodeEnums.SUCCESS.code);</span><br><span class="line">        result.setMessage(ResultCodeEnums.SUCCESS.desc);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result <span class="title function_">ok</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.setSuccess(<span class="literal">true</span>);</span><br><span class="line">        result.setCode(ResultCodeEnums.SUCCESS.code);</span><br><span class="line">        result.setMessage(ResultCodeEnums.SUCCESS.desc);</span><br><span class="line">        result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">fail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        result.setCode(ResultCodeEnums.FAIL.code);</span><br><span class="line">        result.setMessage(ResultCodeEnums.FAIL.desc);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result <span class="title function_">fail</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        result.setCode(ResultCodeEnums.FAIL.code);</span><br><span class="line">        result.setMessage(ResultCodeEnums.FAIL.desc);</span><br><span class="line">        result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>code枚举：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCodeEnums</span> &#123;</span><br><span class="line">    SUCCESS(<span class="number">200</span>,<span class="string">&quot;成功&quot;</span>),</span><br><span class="line">    FAIL(<span class="number">500</span>,<span class="string">&quot;失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">public</span> String desc;</span><br><span class="line"></span><br><span class="line">    ResultCodeEnums(<span class="type">int</span> code,String desc)&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultCodeEnums <span class="title function_">GetEnumByCode</span><span class="params">(<span class="type">int</span> code)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(ResultCodeEnums resultCodeEnums : ResultCodeEnums.values())&#123;</span><br><span class="line">            <span class="keyword">if</span>(resultCodeEnums.code == code)&#123;</span><br><span class="line">                <span class="keyword">return</span> resultCodeEnums;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="log4j日志配置文件"><a href="#log4j日志配置文件" class="headerlink" title="log4j日志配置文件"></a>log4j日志配置文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--变量配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- %logger&#123;36&#125; 表示 Logger 名字最长36个字符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%date&#123;HH:mm:ss.SSS&#125; %X&#123;PFTID&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义日志存储的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_PATH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;../log&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_NAME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jcClub.log&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--https://logging.apache.org/log4j/2.x/manual/appenders.html--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--输出日志的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">&quot;fileLog&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;FILE_PATH&#125;/temp.log&quot;</span> <span class="attr">append</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFileInfo&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;FILE_PATH&#125;/info.log&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;FILE_PATH&#125;/$&#123;FILE_NAME&#125;-INFO-%d&#123;yyyy-MM-dd&#125;_%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;10MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;15&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的warn及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFileWarn&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;FILE_PATH&#125;/warn.log&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;FILE_PATH&#125;/$&#123;FILE_NAME&#125;-WARN-%d&#123;yyyy-MM-dd&#125;_%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;10MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;15&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFileError&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;FILE_PATH&#125;/error.log&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;FILE_PATH&#125;/$&#123;FILE_NAME&#125;-ERROR-%d&#123;yyyy-MM-dd&#125;_%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;10MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;15&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFileInfo&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFileWarn&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFileError&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;fileLog&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="分页处理封装类"><a href="#分页处理封装类" class="headerlink" title="分页处理封装类"></a>分页处理封装类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">totalPages</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; result = Collections.emptyList();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRecords</span><span class="params">(List&lt;T&gt; result)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.result = result;</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="literal">null</span> &amp;&amp; result.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            setTotal(result.size());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotal</span><span class="params">(<span class="type">int</span> total)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.pageSize &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.totalPages = total / <span class="built_in">this</span>.pageSize + (total % <span class="built_in">this</span>.pageSize == <span class="number">0</span>?<span class="number">0</span>:<span class="number">1</span> );</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.totalPages = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.start = (<span class="built_in">this</span>.pageSize &gt; <span class="number">0</span>?(<span class="built_in">this</span>.pageNo - <span class="number">1</span>) * <span class="built_in">this</span>.pageSize : <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.end = (<span class="built_in">this</span>.start - <span class="number">1</span> + <span class="built_in">this</span>.pageSize * (<span class="built_in">this</span>.pageNo &gt; <span class="number">0</span> ? <span class="number">1</span>:<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前人栽树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 实战经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis实战</title>
      <link href="/2024/03/02/redis%E5%AE%9E%E6%88%98/"/>
      <url>/2024/03/02/redis%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis项目实战"><a href="#Redis项目实战" class="headerlink" title="Redis项目实战"></a>Redis项目实战</h1><h1 id="短信验证码"><a href="#短信验证码" class="headerlink" title="短信验证码"></a>短信验证码</h1><h2 id="发送验证码"><a href="#发送验证码" class="headerlink" title="发送验证码"></a>发送验证码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送手机验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;code&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 发送短信验证码并保存验证码</span></span><br><span class="line"><span class="comment">//        验证手机号是否合法</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isPhoneInvalid</span> <span class="operator">=</span> RegexUtils.isPhoneInvalid(phone);</span><br><span class="line">        <span class="keyword">if</span>(isPhoneInvalid)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;请输入正确手机号&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取code,并保存session</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> userService.getCode(phone);</span><br><span class="line">        session.setAttribute(phone,code);</span><br><span class="line"><span class="comment">//        模拟发送验证码</span></span><br><span class="line">        log.debug(<span class="string">&quot;验证码：&#123;&#125;&quot;</span>,code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">(String phone)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [phone]</span></span><br><span class="line"><span class="comment">         * 登录的手机号</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> java.lang.String</span></span><br><span class="line"><span class="comment">         * 生成的验证码</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">//        调用hutool的工具，随机生成6位验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span>  <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="校验验证码"><a href="#校验验证码" class="headerlink" title="校验验证码"></a>校验验证码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loginForm 登录参数，包含手机号、验证码；或者手机号、密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginFormDTO loginForm, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">// TODO 实现登录功能</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> userService.login(loginForm,session);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [loginForm, session]</span></span><br><span class="line"><span class="comment">         * 前端传入的登录信息，还有服务端保存的session</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> java.lang.String</span></span><br><span class="line"><span class="comment">         * 返回信息</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">//        获取session并校验手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">        <span class="comment">//        获取session中的code</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">code</span> <span class="operator">=</span> session.getAttribute(phone);</span><br><span class="line">        <span class="keyword">if</span>(code == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号不一致&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            code = code.toString();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        获取前端输入的验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">inCode</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!inCode.equals(code))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        判断用户是否存在</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getPhone,phone);</span><br><span class="line">        <span class="type">User</span> <span class="variable">one</span> <span class="operator">=</span> iUserService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(one == <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//            不存在则创建用户</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line"><span class="comment">//            设置昵称</span></span><br><span class="line">            user.setNickName(USER_NICK_NAME_PREFIX + RandomUtil.randomString(<span class="number">10</span>));</span><br><span class="line">            iUserService.save(user);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//            do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//            保存session</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> iUserService.getOne(queryWrapper);</span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDTO</span>(u.getId(), u.getNickName(), u.getIcon());</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>,userDTO);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="登录拦截器"><a href="#登录拦截器" class="headerlink" title="登录拦截器"></a>登录拦截器</h1><h2 id="新建拦截器类"><a href="#新建拦截器类" class="headerlink" title="新建拦截器类"></a>新建拦截器类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果请求不是映射到方法直接通过</span></span><br><span class="line">        <span class="keyword">if</span>(!(handler <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        获取session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="comment">//        从session获得用户</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//            不存在，直接拦截</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;请先登录！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//        存在则保存到用户进程</span></span><br><span class="line">            UserHolder.saveUser((User)user);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从session中获取登录信息，如果已登录则session中会存在user</p><h2 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                    <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;shop-type/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集群session共享问题"><a href="#集群session共享问题" class="headerlink" title="集群session共享问题"></a>集群session共享问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>当处在集群项目中时会出现下面这种情况：<br>当成功访问负责登录功能的服务器时，成功将session保存在该服务器。但在访问其他功能时，由于所处服务器不同，目标服务器并没有保存了我们登录信息的session，我们会被拦截器果断“踢”下线，但要让我们每个服务器都登录一次，这显然是不合理的。</p><p>这时候就需要使用radis作为一个公共的数据库</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202403022321833.png" alt="image-20240302232148785"></p><h2 id="redis代替session"><a href="#redis代替session" class="headerlink" title="redis代替session"></a>redis代替session</h2><p>将登录信息存到redis，这样请求每个服务器的资源时，只需要访问redis服务器根据key获取信息，就可以判断用户是否登录了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        获取code,并保存session</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> userService.getCode(phone);</span><br><span class="line"><span class="comment">//        保存session到redis，key是前缀加电话号码的形式，加前缀是为了防止不同业务之间可能造成覆盖，</span></span><br><span class="line"><span class="comment">//        过期时间还有前缀都是使用常量，很优雅</span></span><br><span class="line">        redisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone,code,LOGIN_CODE_TTL, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [loginForm, session]</span></span><br><span class="line"><span class="comment">         * 前端传入的登录信息，还有服务端保存的session</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> java.lang.String</span></span><br><span class="line"><span class="comment">         * 返回信息</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">////        获取session并校验手机号</span></span><br><span class="line"><span class="comment">//        String phone = loginForm.getPhone();</span></span><br><span class="line"><span class="comment">//        //        获取session中的code</span></span><br><span class="line"><span class="comment">//        Object code = session.getAttribute(phone);</span></span><br><span class="line"><span class="comment">//       获取手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> redisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        通过radis获取code</span></span><br><span class="line">        <span class="keyword">if</span>(code == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号不一致&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        获取前端输入的验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">inCode</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!inCode.equals(code))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        判断用户是否存在</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getPhone,phone);</span><br><span class="line">        <span class="type">User</span> <span class="variable">one</span> <span class="operator">=</span> iUserService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(one == <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//            不存在则创建用户</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line"><span class="comment">//            设置昵称</span></span><br><span class="line">            user.setNickName(USER_NICK_NAME_PREFIX + RandomUtil.randomString(<span class="number">10</span>));</span><br><span class="line">            iUserService.save(user);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//            do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//            保存session</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> iUserService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        UserDTO userDTO = new UserDTO(u.getId(), u.getNickName(), u.getIcon());</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(u,UserDTO.class);</span><br><span class="line"><span class="comment">//        session.setAttribute(&quot;user&quot;,userDTO);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        生成随机token，作为令牌，还有redis中的key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenkey</span> <span class="operator">=</span> LOGIN_USER_KEY + token; <span class="comment">//也使用常量拼装的方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        将对象转为map格式</span></span><br><span class="line">        Map&lt;String, Object&gt; map = BeanUtil.beanToMap(userDTO);</span><br><span class="line"><span class="comment">//      将map中的值全变string,否则在使用stringredis存储时会报类型转换错误</span></span><br><span class="line">        map.forEach((key, value) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != value) map.put(key, String.valueOf(value));</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//        存储到redis</span></span><br><span class="line">        redisTemplate.opsForHash().putAll(tokenkey,map);</span><br><span class="line"><span class="comment">//        设置有效期</span></span><br><span class="line">        redisTemplate.expire(tokenkey,LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        token返回前端，作为令牌</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里有个坑，由于我们用的是StringRedisTemplate，在存储非string时会自动转换，这时可能会出现转换错误（Long无法转换为String）,因此需要提前对map处理一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//      将map中的值全变string,否则在使用stringredis存储时会报类型转换错误</span></span><br><span class="line">        map.forEach((key, value) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != value) map.put(key, String.valueOf(value));</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="拦截器登录验证"><a href="#拦截器登录验证" class="headerlink" title="拦截器登录验证"></a>拦截器登录验证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isBlank(token))&#123;</span><br><span class="line"><span class="comment">//            token不存在，说明未登录</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;未携带token&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        基于token，获取redis中的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> LOGIN_USER_KEY + token;</span><br><span class="line">        Map&lt;Object, Object&gt; user = redisTemplate.opsForHash().entries(key);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//            转换map为对象，然后存储</span></span><br><span class="line">            <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(user, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//        存在则保存到用户进程</span></span><br><span class="line">            log.debug(userDTO.toString());</span><br><span class="line">            UserHolder.saveUser(userDTO);</span><br><span class="line"><span class="comment">//        重置有效期</span></span><br><span class="line">            redisTemplate.expire(key,<span class="number">36000L</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><h2 id="优化拦截器"><a href="#优化拦截器" class="headerlink" title="优化拦截器"></a>优化拦截器</h2><p>目前我们的拦截器只对非一些需要登录校验的网页进行拦截，同时延长他们token的有效时间，但是如果出现用户一直访问一些不需要校验的，那就一直没有进行拦截并延长有效期。其实延长token的有效期应该是用户每次访问都要延长，不论访问的是什么资源，因此我们需要再加一个拦截器，用来拦截全部请求，并在这个拦截器里面延长token有效期，而在login拦截器中只进行登录校验。</p><p>拦截器一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshTokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 如果请求不是映射到方法直接通过</span></span><br><span class="line">        <span class="keyword">if</span>(!(handler <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isBlank(token))&#123;</span><br><span class="line"><span class="comment">//            token不存在，说明未登录</span></span><br><span class="line"><span class="comment">//            throw new RuntimeException(&quot;未携带token&quot;);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        基于token，获取redis中的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> LOGIN_USER_KEY + token;</span><br><span class="line">        Map&lt;Object, Object&gt; user = redisTemplate.opsForHash().entries(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user.isEmpty())&#123;</span><br><span class="line"><span class="comment">//            不存在，直接拦截</span></span><br><span class="line"><span class="comment">//            throw new RuntimeException(&quot;请先登录！&quot;);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//            转换map为对象，然后存储</span></span><br><span class="line">            <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(user, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//        存在则保存到用户进程</span></span><br><span class="line">            log.debug(userDTO.toString());</span><br><span class="line">            UserHolder.saveUser(userDTO);</span><br><span class="line"><span class="comment">//        重置有效期</span></span><br><span class="line">            redisTemplate.expire(key,<span class="number">36000L</span>, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    public LoginInterceptor(StringRedisTemplate redisTemplate) &#123;</span></span><br><span class="line"><span class="comment">//        this.redisTemplate = redisTemplate;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果请求不是映射到方法直接通过</span></span><br><span class="line">        <span class="keyword">if</span>(!(handler <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(UserHolder.getUser() == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新加入的拦截器没有拦截功能，但通过逻辑判断出未登录，则不会向UserHandle中添加用户进程，这样如果用户要非法访问一些需要登录验证得地址，那么会在第二个拦截器被拦下，如果用户本身就要访问一些不需要验证的，那么第一个拦截器放行后，并不会进入第二个拦截器（因为第二个拦截器规定了拦截地址）</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202403031359129.png" alt="image-20240303135930012"></p><h1 id="加入redis缓存"><a href="#加入redis缓存" class="headerlink" title="加入redis缓存"></a>加入redis缓存</h1><p>手动实现缓存无非就是以下几点步骤：</p><ol><li>根据key查询缓存</li><li>如果缓存中存在数据，则直接返回</li><li>不存在则在数据库中查询</li><li>查询不到就报错</li><li>查询到信息则保存到redis</li><li>返回数据</li></ol><h2 id="店铺信息缓存"><a href="#店铺信息缓存" class="headerlink" title="店铺信息缓存"></a>店铺信息缓存</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> Shop <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line"><span class="comment">//        查询店铺缓存</span></span><br><span class="line">        Map&lt;Object, Object&gt; map = redisTemplate.opsForHash().entries(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!map.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//        命中则直接返回</span></span><br><span class="line">            <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(map, <span class="keyword">new</span> <span class="title class_">Shop</span>(), <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span> shop;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        未命中，则查询数据库</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(shop ==  <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//        数据在数据库中不存在，则返回错误</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;店铺信息有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        将数据保存到缓存</span></span><br><span class="line">        Map&lt;String, Object&gt; mapshop = BeanUtil.beanToMap(shop);</span><br><span class="line">        mapshop.forEach((k,value) -&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != value) mapshop.put(k, String.valueOf(value));</span><br><span class="line">        &#125;);</span><br><span class="line">        redisTemplate.opsForHash().putAll(key,mapshop);</span><br><span class="line">        redisTemplate.expire(key,CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line"><span class="comment">//        返回</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="实现缓存与数据库一致"><a href="#实现缓存与数据库一致" class="headerlink" title="实现缓存与数据库一致"></a>实现缓存与数据库一致</h2><p>简单实现：<br>在进行更新数据库操作时，在数据库更新后就删除缓存中的数据，这样在下次访问时会将新的数据放入缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line"></span><br><span class="line">    updateById(shop);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> shop.getId();</span><br><span class="line"></span><br><span class="line">    redisTemplate.delete(CACHE_SHOP_KEY + id);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="缓存热点问题"><a href="#缓存热点问题" class="headerlink" title="缓存热点问题"></a>缓存热点问题</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>当用户查询一个不会存在的数据，比如null，那该请求一定会绕过redis然后直接访问数据库，当这样的请求足够多时，可能会导致数据库崩溃。</p><h3 id="解决方案一：缓存空对象"><a href="#解决方案一：缓存空对象" class="headerlink" title="解决方案一：缓存空对象"></a>解决方案一：缓存空对象</h3><p>即当在数据库中查找一个为null的对象时，数据库返回一个空对象，然后将此空对象存入缓存，这样短期内再收到类似请求时，就会在缓存中命中。</p><p>优点：实现简单，维护方便</p><p>缺点：额外内存消耗，可能造成短期的不一致</p><h3 id="解决方案二：布隆过滤"><a href="#解决方案二：布隆过滤" class="headerlink" title="解决方案二：布隆过滤"></a>解决方案二：布隆过滤</h3><p>即在客户端和缓存之间加一层过滤器，用以拦截数据库中不存在的数据，它是基于某种哈希算法将数据库中的数据存在与否存储中。</p><p>优点：内存占用少，没有多余key</p><p>缺点：实现较为复杂，且存在误判</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩指的是在短时间内，大量的缓存失效或者是redis宕机，导致大量的请求直接到达数据库，带来巨大压力</p><p>解决方案：</p><ol><li>给不同的key添加不同的有效时间</li><li>使用redis集群</li><li>缓存业务降级策略：就是当发生事故时，可以限制请求数量或者干脆拒绝请求，以此来保护数据库。</li><li>多级缓存</li></ol><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>又称热点Key问题，是一个被高并发访问并且缓存重建业务较复杂的key失效了。</p><h3 id="方案一：互斥锁"><a href="#方案一：互斥锁" class="headerlink" title="方案一：互斥锁"></a>方案一：互斥锁</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202403031907423.png" alt="image-20240303190741313"></p><p>即当发生缓存未命中的情况时，第一个发现的进程请求到互斥锁，然后进行缓存重建，在这个过程中如果有其他请求到来也想重建进程，由于互斥锁的原因，后来的进程只能进行循环等待。</p><p>优点：省内存，保证一致性，实现简单</p><p>缺点：线程等待，性能受影响，有死锁风险</p><h3 id="方案二：逻辑过期"><a href="#方案二：逻辑过期" class="headerlink" title="方案二：逻辑过期"></a>方案二：逻辑过期</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202403031910567.png" alt="image-20240303191038492"></p><p>首先这种方法不会出现缓存击穿的问题，因为缓存不会自动销毁，所以除了第一次访问，其他一定会命中。当请求时发现需要的数据已经过期，那么该进程会获得互斥锁并调用一个单独的进程来更新缓存，这样自己也无需等待，直接返回旧的数据。（类似于抢票时，虽然用户还能看到有票，但是实际上已经没票了，用户看到的是旧数据）</p><p>优点：性能好</p><p>缺点：不保证一致性，有额外内存消耗，实现较复杂</p><h2 id="缓存击穿案例"><a href="#缓存击穿案例" class="headerlink" title="缓存击穿案例"></a>缓存击穿案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> Shop <span class="title function_">hcjc</span><span class="params">(Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">        <span class="type">String</span> <span class="variable">lock_key</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(t)&#123;</span><br><span class="line"><span class="comment">//      死循环等待</span></span><br><span class="line"><span class="comment">//        查询店铺缓存</span></span><br><span class="line">                Map&lt;Object, Object&gt; map = redisTemplate.opsForHash().entries(key);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            if(map == null)&#123;</span></span><br><span class="line"><span class="comment">//                throw new RuntimeException(&quot;命中空数据&quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(!map.isEmpty())&#123;</span><br><span class="line">                    <span class="comment">//        命中则直接返回</span></span><br><span class="line">                    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(map, <span class="keyword">new</span> <span class="title class_">Shop</span>(), <span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">return</span> shop;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//        未命中，则获取互斥锁</span></span><br><span class="line"></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">tag</span> <span class="operator">=</span> tryLock(lock_key);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(!tag)&#123;</span><br><span class="line"><span class="comment">//            获取互斥锁失败，休眠一段时间，循环等待</span></span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    t = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//        二次验证</span></span><br><span class="line">            <span class="comment">//        查询店铺缓存</span></span><br><span class="line">            Map&lt;Object, Object&gt; map = redisTemplate.opsForHash().entries(key);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        if(map.isEmpty())&#123;</span></span><br><span class="line"><span class="comment">//            throw new RuntimeException(&quot;命中空数据&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!map.isEmpty())&#123;</span><br><span class="line">                <span class="comment">//        命中则直接返回</span></span><br><span class="line">                <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(map, <span class="keyword">new</span> <span class="title class_">Shop</span>(), <span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">return</span> shop;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(shop ==  <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//        数据在数据库中不存在，则返回错误</span></span><br><span class="line">                redisTemplate.opsForValue().set(key,<span class="literal">null</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;店铺信息有误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//        将数据保存到缓存</span></span><br><span class="line">            Map&lt;String, Object&gt; mapshop = BeanUtil.beanToMap(shop);</span><br><span class="line">            mapshop.forEach((k,value) -&gt;&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != value) mapshop.put(k, String.valueOf(value));</span><br><span class="line">            &#125;);</span><br><span class="line">            redisTemplate.opsForHash().putAll(key,mapshop);</span><br><span class="line">            redisTemplate.expire(key,CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line"><span class="comment">//        返回</span></span><br><span class="line">            <span class="keyword">return</span> shop;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            unLock(lock_key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="秒杀业务"><a href="#秒杀业务" class="headerlink" title="秒杀业务"></a>秒杀业务</h1><h2 id="唯一ID"><a href="#唯一ID" class="headerlink" title="唯一ID"></a>唯一ID</h2><p>Redis自增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdWorker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"><span class="comment">//  开始时间戳</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BEGIN_TIMESTAMP</span> <span class="operator">=</span> <span class="number">1640995200L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    序列号位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">(String keyPrefix)</span>&#123;</span><br><span class="line"><span class="comment">//        生成时间戳</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowSecond</span> <span class="operator">=</span> now.toEpochSecond(ZoneOffset.UTC);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> nowSecond - BEGIN_TIMESTAMP;</span><br><span class="line"><span class="comment">//        生成序列号</span></span><br><span class="line"><span class="comment">//          获取当前日期，作为序列号的一部分</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy:MM:dd&quot;</span>));</span><br><span class="line"><span class="comment">//          自增长</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="string">&quot;icr:&quot;</span> + keyPrefix + <span class="string">&quot;:&quot;</span> + date);</span><br><span class="line"><span class="comment">//        拼接返回</span></span><br><span class="line"><span class="comment">//        采用时间戳左移序列号位数，然后用序列号和时间戳或运算</span></span><br><span class="line">        <span class="keyword">return</span> timestamp &lt;&lt; COUNT_BITS | count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现基本下单功能"><a href="#实现基本下单功能" class="headerlink" title="实现基本下单功能"></a>实现基本下单功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ISeckillVoucherService iSeckillVoucherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisIdWorker redisIdWorker;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>: 优惠卷秒杀</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [voucherId]</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> com.hmdp.dto.Result</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> iSeckillVoucherService.getById(voucherId);</span><br><span class="line">        <span class="keyword">if</span>(voucher == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;优惠券不存在!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//      判断是否处于秒杀时间段</span></span><br><span class="line">        <span class="keyword">if</span>(voucher.getBeginTime().isAfter(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀未开始&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      判断是否售空</span></span><br><span class="line">        <span class="keyword">if</span>(voucher.getStock() &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;优惠劵不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      优惠券数量减1</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> iSeckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!success)&#123;</span><br><span class="line"><span class="comment">//            减1失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;优惠券不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line"><span class="comment">//      获得唯一ID</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">order_id</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(order_id); <span class="comment">// 订单id来自idWorker生成唯一ID</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId); <span class="comment">// 优惠券id来自传入的id</span></span><br><span class="line">        voucherOrder.setUserId(UserHolder.getUser().getId()); <span class="comment">// userid来自用户进程</span></span><br><span class="line"><span class="comment">//        保存order</span></span><br><span class="line">        save(voucherOrder);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok(order_id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="解决超卖问题"><a href="#解决超卖问题" class="headerlink" title="解决超卖问题"></a>解决超卖问题</h2><p>乐观锁：在更新时判断是否有线程也修改了数据</p><p>方法一：版本号法</p><p>给数据库中的数据添加版本字段，要修改数据库时，先查询版本号，然后在修改数据库时，对比此时的版本号和数据库里的版本号是否一致，一致再进行修改。</p><p>方法二：CAS法</p><p>利用库存数量作为版本号，只要在每次更新时判断stock是否大于0即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>: 优惠卷秒杀</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [voucherId]</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> com.hmdp.dto.Result</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> iSeckillVoucherService.getById(voucherId);</span><br><span class="line">        <span class="keyword">if</span>(voucher == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;优惠券不存在!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">stock</span> <span class="operator">=</span> voucher.getStock();</span><br><span class="line"><span class="comment">//      判断是否处于秒杀时间段</span></span><br><span class="line">        <span class="keyword">if</span>(voucher.getBeginTime().isAfter(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀未开始&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      判断是否售空</span></span><br><span class="line">        <span class="keyword">if</span>(stock &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;优惠劵不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      优惠券数量减1</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> iSeckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId)</span><br><span class="line">                .gt(<span class="string">&quot;stock&quot;</span>,<span class="number">0</span>)</span><br><span class="line">                .update();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!success)&#123;</span><br><span class="line"><span class="comment">//            减1失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;优惠券不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line"><span class="comment">//      获得唯一ID</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">order_id</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(order_id); <span class="comment">// 订单id来自idWorker生成唯一ID</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId); <span class="comment">// 优惠券id来自传入的id</span></span><br><span class="line">        voucherOrder.setUserId(UserHolder.getUser().getId()); <span class="comment">// userid来自用户进程</span></span><br><span class="line"><span class="comment">//        保存order</span></span><br><span class="line">        save(voucherOrder);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok(order_id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="单机限制购买"><a href="#单机限制购买" class="headerlink" title="单机限制购买"></a>单机限制购买</h2><p>实现一人一单，最简单的思路是每次下单之前先判断订单表里是否已经存在该用户的订单，但是这样无法解决并发问题。</p><p>乐观锁无法判断该在何时进行判断是否加锁，只能选择悲观锁，即在进行下单操作时，就根据登录用户的id进行加锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line"><span class="keyword">synchronized</span> (id.toString().intern())&#123;</span><br><span class="line">    <span class="type">IVoucherOrderService</span> <span class="variable">o</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">    <span class="keyword">return</span> o.createVoucherOrder(voucherId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> synchronized (id.toString().intern()) 根据用户id作为加锁的参数，此处有细节，不能直接调用toString，因为toString的底层在每次访问id.toString都是创建一个新的String对象，而intern()方法会直接从常量池里取值，而不是创建一个新String。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, id).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;请勿重复下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      优惠券数量减1</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> iSeckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId)</span><br><span class="line">                .gt(<span class="string">&quot;stock&quot;</span>,<span class="number">0</span>)</span><br><span class="line">                .update();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!success)&#123;</span><br><span class="line"><span class="comment">//            减1失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;优惠券不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line"><span class="comment">//      获得唯一ID</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">order_id</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(order_id); <span class="comment">// 订单id来自idWorker生成唯一ID</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId); <span class="comment">// 优惠券id来自传入的id</span></span><br><span class="line">        voucherOrder.setUserId(id); <span class="comment">// userid来自用户进程</span></span><br><span class="line"><span class="comment">//        保存order</span></span><br><span class="line">        save(voucherOrder);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok(order_id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>把下单业务封装成一个方法，方便进行加锁</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy(exposeProxy = true)</span></span><br></pre></td></tr></table></figure><p>导入新的依赖，并在启动类默认启动</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>分布式锁满足在分布式系统或者集群系统下多进程可见且互斥的锁</p><p>主流做法是利用redis的setnx命令，setnx作用简单说就是当key不存在时才可以set成功，若key已存在则失败，这样在并发请求锁时，只有第一个请求的才能成功，释放锁时只需要删除这条key即可，安全性可以通过设置其过期时间来保证安全</p><blockquote><p>setnx [key] [value]</p><p>set [key] [value] EX [seconds] NX  &#x2F;&#x2F;原子操作,设置锁的同时设置时间，防止因为宕机导致锁不释放</p></blockquote><blockquote><p>成功加锁返回1，失败返回0</p></blockquote><h3 id="分布式锁实现多线程限制购买"><a href="#分布式锁实现多线程限制购买" class="headerlink" title="分布式锁实现多线程限制购买"></a>分布式锁实现多线程限制购买</h3><p>锁接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 此乃获取分布式锁的接口</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Params</span>:</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    获取锁</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeSec)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    释放锁</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分布式锁类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="comment">//    锁前缀</span></span><br><span class="line"><span class="comment">//    锁名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;Lock:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(StringRedisTemplate stringRedisTemplate, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeSec)</span> &#123;</span><br><span class="line"><span class="comment">//      获取当前进程id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(LOCK_PREFIX + name, id + <span class="string">&quot;&quot;</span>, timeSec, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">()</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(LOCK_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改原来的加锁逻辑，改用分布式锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        获取锁</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">120</span>);</span><br><span class="line">        <span class="keyword">if</span>(!isLock)&#123;</span><br><span class="line"><span class="comment">//            取锁失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;服务器错误,请重试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">IVoucherOrderService</span> <span class="variable">o</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">            <span class="keyword">return</span> o.createVoucherOrder(voucherId);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//            万一有异常，可以自动释放锁</span></span><br><span class="line">            lock.unLock();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>从代码可以看出，如果获取锁失败，会返回服务器错误，只要返回这条信息，就可以确认我们的分布式锁功能是正常的。</p><h3 id="分布式锁测试"><a href="#分布式锁测试" class="headerlink" title="分布式锁测试"></a>分布式锁测试</h3><p>首先在启动两个服务端，记得解决一下端口冲突</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202403061125114.png" alt="image-20240306112545976"></p><p>利用apifox并发执行两条下单操作，用户的token保持一致代表同一用户</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202403061126649.png" alt="image-20240306112654582"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202403061127377.png" alt="image-20240306112713310"></p><p>运行测试</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202403061129167.png" alt="image-20240306112915074"></p><p>可以看到一个成功一个失败，失败请求的信息为</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202403061130257.png" alt="image-20240306113013190"></p><p>成功请求自然就是订单号了</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202403061130523.png" alt="image-20240306113040465"></p><p>数据库的订单也只增加了一条，测试成功</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202403061131027.png" alt="image-20240306113122958"></p><h3 id="解决锁误删问题"><a href="#解决锁误删问题" class="headerlink" title="解决锁误删问题"></a>解决锁误删问题</h3><p>解决方法是每把锁里面的value都添加一段uuid，然后在删除前判断是否是自己的锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(LOCK_PREFIX + name, id, timeSec, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//      获取当前进程id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(LOCK_PREFIX + name);</span><br><span class="line">    <span class="keyword">if</span>(id.equals(s))&#123;</span><br><span class="line">        stringRedisTemplate.delete(LOCK_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决删锁操作非原子性问题（lua脚本）"><a href="#解决删锁操作非原子性问题（lua脚本）" class="headerlink" title="解决删锁操作非原子性问题（lua脚本）"></a>解决删锁操作非原子性问题（lua脚本）</h3><p>之前的释放锁逻辑不安全，如果发生阻塞，可能会导致误删，因此最好是将解锁操作整合成一个原子操作</p><p>redis执行一个lua脚本</p><p>脚本内容：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取锁中的value</span></span><br><span class="line"><span class="keyword">local</span> id = redis.call(<span class="string">&#x27;get&#x27;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="comment">-- 比较该id和传入id是否一致，一致则删除</span></span><br><span class="line"><span class="keyword">if</span>(id == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 释放锁</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>改进代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    redis脚本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line"><span class="comment">//        静态代码块，随类一起加载执行,防止浪费IO资源</span></span><br><span class="line">        UNLOCK_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">        UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;delLock.lua&quot;</span>));</span><br><span class="line">        UNLOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        调用redis脚本</span></span><br><span class="line">        stringRedisTemplate.execute(</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                * <span class="doctag">@Description</span>: 执行redis脚本</span></span><br><span class="line"><span class="comment">                * <span class="doctag">@Params</span>: [脚本对象，keys（Collection），args]</span></span><br><span class="line"><span class="comment">                * <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                UNLOCK_SCRIPT,</span><br><span class="line">                Collections.singletonList(LOCK_PREFIX + name),</span><br><span class="line">                ID_PREFIX + Thread.currentThread().getId()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h2><blockquote><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。其中包括(BitSet, Set, Multimap, SortedSet, Map, List, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, AtomicLong, CountDownLatch, Publish &#x2F; Subscribe, Bloom filter, Remote service, Spring cache, Executor service, Live Object service, Scheduler service) Redisson提供了使用Redis的最简单和最便捷的方法。Redisson的宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。</p></blockquote><p>简而言之，redisson中提供了很多实用的方法，可以简化开发。</p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.19.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置Redisson</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Redisson 配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>);</span><br><span class="line"><span class="comment">//        创建对象</span></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用Redisson获取锁"><a href="#利用Redisson获取锁" class="headerlink" title="利用Redisson获取锁"></a>利用Redisson获取锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">        <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;lock:order:&quot;</span> + id);</span><br><span class="line"><span class="comment">//        获取锁</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock();</span><br></pre></td></tr></table></figure><blockquote><p>redissonClient.getLock 里面是锁的名字</p><p>lock.tryLock() 参数分别可以是：锁的最大等待时间（如果获取不到锁，期间会重试，锁的最大持续时间（默认30），持续时间类型（默认秒））</p></blockquote><p>方便快捷地实现线程安全</p><h1 id="秒杀业务优化"><a href="#秒杀业务优化" class="headerlink" title="秒杀业务优化"></a>秒杀业务优化</h1><p>目前我们的秒杀业务由于整体是串行模式，其中判断用户是否有下单资格这一部分其实耗时比较少，用时比较长的是之后的数据库操作，包括加锁。</p><p>我们可以思考，如果将后面的数据库操作拆分出来，单独利用一个线程来实现，这样当我们判断用户有下单资格时，直接“通知”该线程让他执行，这样性能就提高了</p><h2 id="将优惠券信息存入redis"><a href="#将优惠券信息存入redis" class="headerlink" title="将优惠券信息存入redis"></a>将优惠券信息存入redis</h2><p>如果想进一步提高判断用户下单资格这一步的效率，那么也应该减少数据库搜索，如果是进行redis缓存操作，那么效率比起数据库，肯定是要高很多的</p><p>新增优惠券的同时，将优惠券信息加入缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSeckillVoucher</span><span class="params">(Voucher voucher)</span> &#123;</span><br><span class="line">        <span class="comment">// 保存优惠券</span></span><br><span class="line">        save(voucher);</span><br><span class="line">        <span class="comment">// 保存秒杀信息</span></span><br><span class="line">        <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeckillVoucher</span>();</span><br><span class="line">        seckillVoucher.setVoucherId(voucher.getId());</span><br><span class="line">        seckillVoucher.setStock(voucher.getStock());</span><br><span class="line">        seckillVoucher.setBeginTime(voucher.getBeginTime());</span><br><span class="line">        seckillVoucher.setEndTime(voucher.getEndTime());</span><br><span class="line">        seckillVoucherService.save(seckillVoucher);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        优惠劵信息保存到缓存，方便之后进行资格验证</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(),voucher.getStock().toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="redis消息队列实现异步秒杀"><a href="#redis消息队列实现异步秒杀" class="headerlink" title="redis消息队列实现异步秒杀"></a>redis消息队列实现异步秒杀</h2><h2 id="基于Stream的消息队列，消费者组"><a href="#基于Stream的消息队列，消费者组" class="headerlink" title="基于Stream的消息队列，消费者组"></a>基于Stream的消息队列，消费者组</h2><p>创建消费者组：<br><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202403062011693.png" alt="image-20240306201108622"><br>key：队列名称<br>groupName：消费者组名称<br>ID：起始ID标示，$代表队列中最后一个消息，0则代表队列中第一个消息<br>MKSTREAM：队列不存在时自动创建队列</p><p> <strong>删除指定的消费者组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XGROUP DESTORY key groupName</span><br></pre></td></tr></table></figure><p> <strong>给指定的消费者组添加消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XGROUP CREATECONSUMER key groupname consumername</span><br></pre></td></tr></table></figure><p> <strong>删除消费者组中的指定消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XGROUP DELCONSUMER key groupname consumername</span><br></pre></td></tr></table></figure><p>从消费者组读取消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]</span><br></pre></td></tr></table></figure><ul><li>group：消费组名称</li><li>consumer：消费者名称，如果消费者不存在，会自动创建一个消费者</li><li>count：本次查询的最大数量</li><li>BLOCK milliseconds：当没有消息时最长等待时间</li><li>NOACK：无需手动ACK，获取到消息后自动确认</li><li>STREAMS key：指定队列名称</li><li>ID：获取消息的起始ID：</li></ul><p>“&gt;”：从下一个未消费的消息开始<br>其它：根据指定id从pending-list中获取已消费但未确认的消息，例如0，是从pending-list中的第一个消息开始</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p> 创建线程池，用于存放处理消息的线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    线程池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">SECKILL_ORDER_EXECUTOR</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        SECKILL_ORDER_EXECUTOR.submit(<span class="keyword">new</span> <span class="title class_">VoucherOrderHandler</span>());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>消息处理线程，线程里死循环读取消息队列，因为会堵塞，所以不必担心资源消耗</p><p>逻辑步骤</p><ol><li>stringRedisTemplate.opsForStream().read 读取消息队列中的消息</li><li>判断消息是否为空，为空则说明处理完毕</li><li>不为空则获取value： read.get(0) .getValue();</li><li>调用BeanUtil.fillBeanWithMap将value封装为对象，此处为订单对象</li><li>订单对象保存数据库</li><li>调用opsForStream().acknowledge 确认消息，将消息从队列中取出</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    订单处理线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;streams.orders&quot;</span>;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//                    获取消息队列中的订单信息</span></span><br><span class="line">                    List&lt;MapRecord&lt;String, Object, Object&gt;&gt; read = stringRedisTemplate.opsForStream().read(</span><br><span class="line">                            Consumer.from(<span class="string">&quot;g1&quot;</span>, <span class="string">&quot;c1&quot;</span>),</span><br><span class="line">                            StreamReadOptions.empty().count(<span class="number">1</span>).block(Duration.ofSeconds(<span class="number">2</span>)),</span><br><span class="line">                            StreamOffset.create(queueName, ReadOffset.lastConsumed())</span><br><span class="line">                    );</span><br><span class="line"><span class="comment">//                    判断是否获取成功</span></span><br><span class="line">                    <span class="keyword">if</span>(read == <span class="literal">null</span> || read.isEmpty())&#123;</span><br><span class="line">                        <span class="comment">//                    获取失败，说明没待处理消息了，继续下次循环</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                    获取成功执行下单业务</span></span><br><span class="line">                    MapRecord&lt;String, Object, Object&gt; record = read.get(<span class="number">0</span>);</span><br><span class="line">                    Map&lt;Object, Object&gt; value = record.getValue();</span><br><span class="line">                    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(value, <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>(), <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//                    下单</span></span><br><span class="line">                    handleVoucherOrder(voucherOrder);</span><br><span class="line"><span class="comment">//                    ACK确认</span></span><br><span class="line">                    stringRedisTemplate.opsForStream().acknowledge(queueName,<span class="string">&quot;g1&quot;</span>,record.getId());</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;处理错误订单&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样就实现了异步更新</p><h1 id="探店部分"><a href="#探店部分" class="headerlink" title="探店部分"></a>探店部分</h1><h2 id="探店笔记展示"><a href="#探店笔记展示" class="headerlink" title="探店笔记展示"></a>探店笔记展示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryBlogById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>: 根据id查询blog</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [id]</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> com.hmdp.dto.Result</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Blog</span> <span class="variable">blog</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> blog.getUserId();</span><br><span class="line"><span class="comment">//      查询博文发布者的信息</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line"></span><br><span class="line">        blog.setName(user.getNickName());</span><br><span class="line">        blog.setIcon(user.getIcon());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok(blog);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在Blog另外封装了三个属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户图标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> String icon;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户姓名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否点赞过了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> Boolean isLike;</span><br></pre></td></tr></table></figure><p>用来在前端展示发布者的相关信息</p><h2 id="点赞功能"><a href="#点赞功能" class="headerlink" title="点赞功能"></a>点赞功能</h2><p>基础的逻辑就是，如果用户没有点赞这篇文章，那就执行点赞业务，如果已经点过那就执行取消点赞，这两个业务时两个相反的过程。其中要实现的重点就是怎么判断用户已经点赞过了。</p><p>此处使用redis缓存，利用set结构，以blogid为key，用户id为value，这样每次只需要根据blogid判断用户是否在其中，即可判断是否点赞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">likeBlog</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"><span class="comment">//        获取登录用户</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> user.getId();</span><br><span class="line"><span class="comment">//        利用redis判断是否已点赞</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> RedisConstants.BLOG_LIKED_KEY + id;</span><br><span class="line"><span class="comment">//        Boolean b = stringRedisTemplate.opsForSet().isMember(key, userId.toString());</span></span><br><span class="line"><span class="comment">//        boolean isLiked = BooleanUtil.isTrue(b);</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLiked</span> <span class="operator">=</span> isLiked(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!isLiked)&#123;</span><br><span class="line">            <span class="comment">//        未点赞，则更新数据库</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked + 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">            <span class="keyword">if</span>(success)&#123;</span><br><span class="line">                <span class="comment">//        更新redis</span></span><br><span class="line">                stringRedisTemplate.opsForSet().add(key,userId.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//        已点赞则取消点赞</span></span><br><span class="line"><span class="comment">//        更新数据库</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked - 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>,id).update();</span><br><span class="line">            <span class="keyword">if</span>(success)&#123;</span><br><span class="line">                <span class="comment">//        移除redis set</span></span><br><span class="line">                stringRedisTemplate.opsForSet().remove(key,userId.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLiked</span><span class="params">(Long blogId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line"></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b</span> <span class="operator">=</span> stringRedisTemplate.opsForSet().isMember(RedisConstants.BLOG_LIKED_KEY + blogId, userId.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="利用sortedSet存储点赞信息"><a href="#利用sortedSet存储点赞信息" class="headerlink" title="利用sortedSet存储点赞信息"></a>利用sortedSet存储点赞信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">likeBlog</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"><span class="comment">//        获取登录用户</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> user.getId();</span><br><span class="line"><span class="comment">//        利用redis判断是否已点赞</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> RedisConstants.BLOG_LIKED_KEY + id;</span><br><span class="line"><span class="comment">//        Boolean b = stringRedisTemplate.opsForSet().isMember(key, userId.toString());</span></span><br><span class="line"><span class="comment">//        boolean isLiked = BooleanUtil.isTrue(b);</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLiked</span> <span class="operator">=</span> isLiked(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!isLiked)&#123;</span><br><span class="line">            <span class="comment">//        未点赞，则更新数据库</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked + 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">            <span class="keyword">if</span>(success)&#123;</span><br><span class="line">                <span class="comment">//        更新redis</span></span><br><span class="line">                stringRedisTemplate.opsForZSet().add(key,userId.toString(),System.currentTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//        已点赞则取消点赞</span></span><br><span class="line"><span class="comment">//        更新数据库</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked - 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>,id).update();</span><br><span class="line">            <span class="keyword">if</span>(success)&#123;</span><br><span class="line">                <span class="comment">//        移除redis set</span></span><br><span class="line">                stringRedisTemplate.opsForSet().remove(key,userId.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLiked</span><span class="params">(Long blogId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line"></span><br><span class="line">        <span class="type">Double</span> <span class="variable">score</span> <span class="operator">=</span> stringRedisTemplate.opsForZSet().score(RedisConstants.BLOG_LIKED_KEY + blogId, userId.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> score != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="获取点赞列表"><a href="#获取点赞列表" class="headerlink" title="获取点赞列表"></a>获取点赞列表</h2><ol><li>利用range取前5条用户id</li><li>把取出来的用户id的string集合变为long集合</li><li>调用listbyids获得用户集合</li><li>将用户集合转为userdto</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getLikeList</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        根据blogid获得点赞用户的id集合</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> RedisConstants.BLOG_LIKED_KEY + id;</span><br><span class="line">        Set&lt;String&gt; range = stringRedisTemplate.opsForZSet().range(key, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(range == <span class="literal">null</span> || range.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//      获取点赞用户前5</span></span><br><span class="line">        List&lt;Long&gt; ids = range.stream().map(Long::valueOf).collect(Collectors.toList());</span><br><span class="line">        List&lt;User&gt; users = userService.listByIds(ids);</span><br><span class="line"><span class="comment">//        将用户集合转为userdto集合</span></span><br><span class="line">        List&lt;UserDTO&gt; list = users.stream().map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="关注取关与判断是否关注"><a href="#关注取关与判断是否关注" class="headerlink" title="关注取关与判断是否关注"></a>关注取关与判断是否关注</h2><p>这一部分有点简单，不做解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/follow&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FollowController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IFollowService iFollowService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;/&#123;isFollow&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long followed,<span class="meta">@PathVariable(&quot;isFollow&quot;)</span> <span class="type">boolean</span> isFollow )</span>&#123;</span><br><span class="line">        iFollowService.follow(followed,isFollow);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/or/not/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">isFollow</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long writerId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(iFollowService.isFollow(writerId));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FollowServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;FollowMapper, Follow&gt; <span class="keyword">implements</span> <span class="title class_">IFollowService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">follow</span><span class="params">(Long followed, <span class="type">boolean</span> isFollow)</span> &#123;</span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;请先登录！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> user.getId();</span><br><span class="line"><span class="comment">//        关注</span></span><br><span class="line">        <span class="keyword">if</span>(isFollow)&#123;</span><br><span class="line">            <span class="type">Follow</span> <span class="variable">follow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Follow</span>();</span><br><span class="line">            follow.setUserId(userId);</span><br><span class="line">            follow.setFollowUserId(followed);</span><br><span class="line"><span class="comment">//            保存</span></span><br><span class="line">            save(follow);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//            取关</span></span><br><span class="line">            QueryWrapper&lt;Follow&gt; followQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            followQueryWrapper.eq(<span class="string">&quot;user_id&quot;</span>,userId);</span><br><span class="line">            followQueryWrapper.eq(<span class="string">&quot;follow_user_id&quot;</span>,followed);</span><br><span class="line"></span><br><span class="line">            remove(followQueryWrapper);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFollow</span><span class="params">(Long writerId)</span> &#123;</span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> user.getId();</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;Follow&gt; followQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        followQueryWrapper.eq(<span class="string">&quot;user_id&quot;</span>,userId);</span><br><span class="line">        followQueryWrapper.eq(<span class="string">&quot;follow_user_id&quot;</span>,writerId);</span><br><span class="line"></span><br><span class="line">        <span class="type">Follow</span> <span class="variable">one</span> <span class="operator">=</span> getOne(followQueryWrapper);</span><br><span class="line">        <span class="keyword">return</span> one != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取他人主页信息"><a href="#获取他人主页信息" class="headerlink" title="获取他人主页信息"></a>获取他人主页信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getOtherInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long otherId)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(otherId);</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok(userDTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Redis </tag>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT基础教学</title>
      <link href="/2024/02/24/JWT%E5%9F%BA%E7%A1%80%E6%95%99%E5%AD%A6/"/>
      <url>/2024/02/24/JWT%E5%9F%BA%E7%A1%80%E6%95%99%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>JWT全称JSON WEB TOKENS，是当下非常流行的跨域身份验证方法。传统的身份验证需要服务端将用户信息，比如登录信息存入session，然后在用户想要访问后端服务时，通过比对用户的登录状态和session中的数据来进行身份验证。但这种方式在分布式中就显得很麻烦了，JWT 可以跨域传输，适用于微服务、API网关等场景，因为它在客户端存储用户信息，减轻了服务器的内存压力</p><h1 id="JWT的组成"><a href="#JWT的组成" class="headerlink" title="JWT的组成"></a>JWT的组成</h1><p>JWT整体由三部分组成：Header、Payload、Signature</p><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header通常由令牌的类型和加密的算法组成,例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>这部分主要是记录我们所存储的简单且不重要的信息。例如：用户名，过期时间，用户id等等，注意payload中的数据为<strong>公开</strong>的，不能在里面存放敏感数据，例如password</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;admin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h2><p>签名里是由三部分组成，Header的Base64编码，Payload的Base64编码，还有secret，然后通过指定的加密方式，例如HS256，进行加密后得出的字符串</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">  base64UrlEncode(payload)<span class="punctuation">,</span></span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>这部分是jwt中最重要的一部分，有两个功能：</p><p>1.验证该Token在发送过程中是否被修改 </p><blockquote><p>因为token中存在secret，是我们指定的密钥，该密钥保存在服务端且不会向用户公开，这样根据请求token中的secret就能判断是否有被修改</p></blockquote><p>2.验证签发人的身份</p><blockquote><p>第二个功能是是从第一个功能中体现出来的，因为只有自己才知道自己的token</p></blockquote><p>在计算出签名哈希后，JWT头（Header），有效载荷（Payload）和签名哈希（Signature）的三个部分组合成一个字符串，每个部分用”.”分隔，就构成整个JWT对象。</p><h1 id="JWT使用逻辑"><a href="#JWT使用逻辑" class="headerlink" title="JWT使用逻辑"></a>JWT使用逻辑</h1><ol><li>用户发送登录请求，将用户名和密码传入后端</li><li>后端接收后核对账号密码无误，则根据规则生成jwt token</li><li>后端将生成的token返回给前端，前端保存在本地如localStorage或sessionStorage，退出登录时删除即可</li><li>前端在每次请求时将JWT放入HTTP Header中的Authorization位。(解决XSS和XSRF问题)</li><li>后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确；检查Token是否过期；检查Token的接收方是否是自己(可选)。</li><li>验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。</li></ol><h1 id="具体使用示例"><a href="#具体使用示例" class="headerlink" title="具体使用示例"></a>具体使用示例</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建TokenUtils类用来放置常用方法"><a href="#创建TokenUtils类用来放置常用方法" class="headerlink" title="创建TokenUtils类用来放置常用方法"></a>创建TokenUtils类用来放置常用方法</h2><h3 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Token一天后过期</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">EXPIRE_TIME</span> <span class="operator">=</span> <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">genToken</span><span class="params">(String username,String secret)</span>&#123;</span><br><span class="line">    <span class="comment">//现在系统的时间 + 一天</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + EXPIRE_TIME);</span><br><span class="line">    <span class="comment">//对密码进行加密</span></span><br><span class="line">    <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(secret);</span><br><span class="line">    <span class="comment">// 附带username信息</span></span><br><span class="line">    <span class="keyword">return</span> JWT.create()</span><br><span class="line">            .withClaim(<span class="string">&quot;username&quot;</span>, username)</span><br><span class="line">            .withExpiresAt(date)</span><br><span class="line">            .sign(algorithm);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建拦截器"><a href="#创建拦截器" class="headerlink" title="创建拦截器"></a>创建拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtFilter</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从 http 请求头中取出 token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果请求不是映射到方法直接通过</span></span><br><span class="line">        <span class="keyword">if</span>(!(handler <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> TokenUtils.getUserNameByToken(request);</span><br><span class="line">            <span class="comment">// 这边拿到的 用户名 应该去数据库查询获得密码，简略，步骤在service直接获取密码</span></span><br><span class="line">            LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            queryWrapper.eq(StringUtils.isNotEmpty(username),User::getName,username);</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> TokenUtils.verify(token,username,user.getPassword());</span><br><span class="line">            <span class="keyword">if</span>(result)&#123;</span><br><span class="line">                log.info(<span class="string">&quot;通过拦截器&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(Constants.CODE_401,<span class="string">&quot;token认证失败，请重新登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123; <span class="comment">//一定要通过bean注入，不能new </span></span><br><span class="line">        registry.addInterceptor(authenticationInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/login&quot;</span>, <span class="string">&quot;/user/register&quot;</span>, <span class="string">&quot;**/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtFilter <span class="title function_">authenticationInterceptor</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtFilter</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样当前端的请求发送过来时首先会被拦截，从中取出token，如果没有token则说明未登录，返回未登录的错误信息。有token则验证token中的信息是否正确，是否被篡改过，验证通过后，拦截器放行，前端能正常收到后端返回的数据。</p><p>jwt的一大特点就是服务端不保存用户的身份信息，而是在每次请求时验证用户发送的token，token首次交给用户，用户可以将其保存在localstorage中，然后在每次请求头中添加token，后端收到并验证正确后即可开始正常的业务逻辑，其中返回给用户的token可以在用户登录成功时一并返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Res&lt;User&gt; <span class="title function_">Login</span><span class="params">(<span class="meta">@RequestBody</span> UserDto user, HttpServletRequest request)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> user.getUsername();</span><br><span class="line">        log.info(<span class="string">&quot;用户&#123;&#125;正在登录&quot;</span>,userName);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> DigestUtils.md5DigestAsHex(user.getPassword().getBytes());</span><br><span class="line"><span class="comment">//        HttpSession session = request.getSession();</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getName,userName);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">one</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(one == <span class="literal">null</span>)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;登录失败，用户名不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Res.error(<span class="string">&quot;用户名不存在,请先注册!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(password.equals(one.getPassword()))&#123;</span><br><span class="line"><span class="comment">//            session.setAttribute(&quot;user&quot;,one.getId());</span></span><br><span class="line">            log.info(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            log.error(<span class="string">&quot;密码错误！&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;传入：&#123;&#125;，正确：&#123;&#125;&quot;</span>,password,one.getPassword());</span><br><span class="line">            <span class="keyword">return</span> Res.error(<span class="string">&quot;密码错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> TokenUtils.genToken(userName, password);</span><br><span class="line">        Res&lt;User&gt; res = Res.success(one);</span><br><span class="line">        res.setToken(token);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="前端在请求头中添加token"><a href="#前端在请求头中添加token" class="headerlink" title="前端在请求头中添加token"></a>前端在请求头中添加token</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request 拦截器</span></span><br><span class="line"><span class="comment">// 可以自请求发送前对请求做一些处理</span></span><br><span class="line"><span class="comment">// 比如统一加token，对请求参数统一加密</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(token != <span class="literal">null</span>)&#123;</span><br><span class="line">        config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = token;  <span class="comment">// 设置请求头</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202402251717236.png" alt="image-20240225171711158"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的生活（一）</title>
      <link href="/2024/02/18/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/02/18/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>从开始做博客也一年多了，期间我一直将博客作为一个可以优雅地（相较于直接看markdown）复习我的学习笔记的平台，但是思来想去，一个博客好像不该如此枯燥无味，一个正常的博客貌似应该提供一个专门的板块，供作者（也就是我）发发牢骚，随便瞎聊点日常，或者碎碎念一些小破事，这样日后如果博客能做大做强，有更多人来看我的笔记，听我发发牢骚，或者在评论区对我发发牢骚，这想必比一个铺天盖地是学习资料的网站要有趣得多。</p><p>​——————lf 2024.2.18</p>]]></content>
      
      
      <categories>
          
          <category> 随便聊聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务入门学习（二）</title>
      <link href="/2023/12/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/12/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Elasticsearch分布式搜索介绍"><a href="#Elasticsearch分布式搜索介绍" class="headerlink" title="Elasticsearch分布式搜索介绍"></a>Elasticsearch分布式搜索介绍</h1><blockquote><p>部分资料来自与黑马程序员公开课程</p></blockquote><h2 id="何为Elasticsearch"><a href="#何为Elasticsearch" class="headerlink" title="何为Elasticsearch"></a>何为Elasticsearch</h2><p>elasticsearch结合kibana、Logstash、Beats，也就是elastic stack（ELK）。被广泛应用在日志数据分析、实时监控等领域：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312271434935.png" alt="image-20210720194008781"></p><p>而elasticsearch是elastic stack的核心，负责存储、搜索、分析数据。</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312271434958.png" alt="image-20210720194230265"></p><h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><p>倒排索引中有两个非常重要的概念：</p><ul><li>文档（<code>Document</code>）：用来搜索的数据，其中的每一条数据就是一个文档。例如一个网页、一个商品信息</li><li>词条（<code>Term</code>）：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条</li></ul><p><strong>创建倒排索引</strong>是对正向索引的一种特殊处理，流程如下：</p><ul><li>将每一个文档的数据利用算法分词，得到一个个词条</li><li>创建表，每行数据包括词条、词条所在文档id、位置等信息</li><li>因为词条唯一性，可以给词条创建索引，例如hash表结构索引</li></ul><p>如图：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312271445813.png" alt="image-20210720200457207"></p><p>倒排索引的<strong>搜索流程</strong>如下（以搜索”华为手机”为例）：</p><p>1）用户输入条件<code>&quot;华为手机&quot;</code>进行搜索。</p><p>2）对用户输入内容<strong>分词</strong>，得到词条：<code>华为</code>、<code>手机</code>。</p><p>3）拿着词条在倒排索引中查找，可以得到包含词条的文档id：1、2、3。</p><p>4）拿着文档id到正向索引中查找具体文档。</p><p>如图：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312271445808.png" alt="image-20210720201115192"></p><p>虽然要先查询倒排索引，再查询倒排索引，但是无论是词条、还是文档id都建立了索引，查询速度非常快！无需全表扫描。</p><p>倒排索引就是按照关键词定义文档（数据）id</p><h3 id="Mysql和Es概念对比"><a href="#Mysql和Es概念对比" class="headerlink" title="Mysql和Es概念对比"></a>Mysql和Es概念对比</h3><p>Es在存储数据（文档）时，其存储形式为json型</p><table><thead><tr><th><strong>MySQL</strong></th><th><strong>Elasticsearch</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Table</td><td>Index</td><td>索引(index)，就是文档的集合，类似数据库的表(table)</td></tr><tr><td>Row</td><td>Document</td><td>文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td></tr><tr><td>Column</td><td>Field</td><td>字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td></tr><tr><td>Schema</td><td>Mapping</td><td>Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td></tr><tr><td>SQL</td><td>DSL</td><td>DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td></tr></tbody></table><h2 id="安装ES和Kibana"><a href="#安装ES和Kibana" class="headerlink" title="安装ES和Kibana"></a>安装ES和Kibana</h2><p>安装过程网上有很多，此处不多做赘述，利用docker容器可以很容易构建。</p><p>docker启动命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name es  -e <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span>  -e <span class="string">&quot;discovery.type=single-node&quot;</span> -v es-data:/usr/share/elasticsearch/data  -v es-plugins:/usr/share/elasticsearch/plugins  --privileged  --network es-net   -p 9200:9200   -p 9300:9300 elasticsearch:7.12.1</span><br></pre></td></tr></table></figure><p>访问默认端口9200可以看到下面的样子</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312271518647.png" alt="image-20231227151810464"></p><p>Kibana启动命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kibana -e ELASTICSEARCH_HOSTS=http://es:9200 --network=es-net -p 5601:5601  kibana:7.12.1</span><br></pre></td></tr></table></figure><p>注意kibana版本要和es版本保持一致，然后要在kibana中指定es端口</p><p>安装并启动kinaba后就可以打开他的可视化页面</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312271523515.png" alt="image-20231227152329445"></p><h2 id="查看分词器"><a href="#查看分词器" class="headerlink" title="查看分词器"></a>查看分词器</h2><p>使用Kibana自带的工具可以发送DSL请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我是林峰我爱玩原神&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chinese&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>得到分词结果</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312271533036.png" alt="image-20231227153308991"></p><p>显然不符合我们中文的分词规则</p><h2 id="安装IK分词器"><a href="#安装IK分词器" class="headerlink" title="安装IK分词器"></a>安装IK分词器</h2><p>可以选择在线安装，或者是离线下载好后自己找到es插件目录，给他塞进去</p><p>在线：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器内部</span></span><br><span class="line">docker exec -it elasticsearch /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在线下载并安装</span></span><br><span class="line">./bin/elasticsearch-plugin  install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">退出</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启容器</span></span><br><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure><p>离线：</p><p>安装插件需要知道elasticsearch的plugins目录位置，而我们用了数据卷挂载，因此需要查看elasticsearch的数据卷目录，通过下面命令查看:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect es-plugins</span><br></pre></td></tr></table></figure><p>显示结果：</p><pre><code>&#123;    &quot;CreatedAt&quot;: &quot;2023-12-27T15:12:44+08:00&quot;,    &quot;Driver&quot;: &quot;local&quot;,    &quot;Labels&quot;: null,    &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/es-plugins/_data&quot;,    &quot;Name&quot;: &quot;es-plugins&quot;,    &quot;Options&quot;: null,    &quot;Scope&quot;: &quot;local&quot;&#125;</code></pre><p>然后进入到所给的目录中，将下载并解压好的IK文件放进去即可</p><p>现在再回去验证一下分词结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;林峰爱玩游戏&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>ik分词器有两种模式：</p><ul><li><p><code>ik_smart</code>：最少切分</p></li><li><p><code>ik_max_word</code>：最细切分</p></li></ul><p>ik_smart：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312271543763.png" alt="image-20231227154345716"></p><p>ik_max_word：<br><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312271544493.png" alt="image-20231227154410448"></p><h2 id="分词器扩展"><a href="#分词器扩展" class="headerlink" title="分词器扩展"></a>分词器扩展</h2><p>找到ik&#x2F;config&#x2F;IKAnalyzer.cfg.xml，在其中添加我们扩展的ext.dic和拦截词stopword.dic</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt;</span><br><span class="line">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br><span class="line">&lt;entry key=&quot;ext_dict&quot;&gt;ext.dic&lt;/entry&gt;</span><br><span class="line"> &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span><br><span class="line">&lt;entry key=&quot;ext_stopwords&quot;&gt;stopwords.dic&lt;/entry&gt;</span><br><span class="line">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span><br><span class="line">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span><br><span class="line">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span><br><span class="line">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>这个ext.dic和stopwords.dic需要自己配置</p><p>举个例子：</p><p>ext.dic:</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312271600505.png" alt="image-20231227160051426"></p><p>stopword.dic:</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312271603454.png" alt="image-20231227160311420"></p><p>配置完成后重启，然后回kibana试试</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我是林峰我爱玩原神爱吃奥利给&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312271607701.png" alt="image-20231227160714658" style="zoom: 67%;" /><p>完美</p><h1 id="索引库操作"><a href="#索引库操作" class="headerlink" title="索引库操作"></a>索引库操作</h1><h2 id="常见mapping类型"><a href="#常见mapping类型" class="headerlink" title="常见mapping类型"></a>常见mapping类型</h2><p>mapping是对索引库中文档的约束，常见的mapping属性包括：</p><ul><li>type：字段数据类型，常见的简单类型有：<ul><li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）</li><li>数值：long、integer、short、byte、double、float、</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为true</li><li>analyzer：使用哪种分词器</li><li>properties：该字段的子字段</li></ul><h2 id="创建索引库语法"><a href="#创建索引库语法" class="headerlink" title="创建索引库语法"></a>创建索引库语法</h2><p>举例</p><ul><li>请求方式：PUT</li><li>请求路径：&#x2F;索引库名，可以自定义</li><li>请求参数：mapping映射</li><li>properties: 字段</li></ul><p>格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT /索引库名称</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;字段名&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;字段名2&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;字段名3&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;子字段&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// ...略</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT /test01</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>介绍</p><blockquote><p>info：字符串类型，可分割，分词器是ik_smart,默认可搜索（index为true）</p><p>email：关键词类型，不可分割，不搜索</p><p>name：对象类型，存放字段，默认可搜索</p></blockquote><h2 id="查询，删除，修改库"><a href="#查询，删除，修改库" class="headerlink" title="查询，删除，修改库"></a>查询，删除，修改库</h2><p>索引库的操作完全符合restful风格，即获取为get，创建put（这个好像不太符合），删除 delete，索引库不允许直接修改字段，只允许添加字段</p><p>查询：<br>从put改为get</p><blockquote><p>GET &#x2F;test01</p></blockquote><p>删除</p><blockquote><p>DELETE &#x2F;test01</p></blockquote><p>修改(添加age字段)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /test01/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>再通过get查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test01&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;aliases&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;info&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;properties&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h1 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h1><h2 id="添加-post"><a href="#添加-post" class="headerlink" title="添加(post)"></a>添加(post)</h2><p>语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /索引库名/_doc/文档id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段3&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;子属性1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;子属性2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /test01/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="string">&quot;21&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span><span class="string">&quot;安理计科林峰&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span><span class="string">&quot;林&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span><span class="string">&quot;峰&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;827498@qq.com&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>一定不要漏”，“</p><h2 id="查询（get）"><a href="#查询（get）" class="headerlink" title="查询（get）"></a>查询（get）</h2><blockquote><p>GET &#x2F;test01&#x2F;_doc&#x2F;1</p></blockquote><p>结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;test01&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;found&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;21&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;安理计科林峰&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;林&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;峰&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;827498@qq.com&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="修改-put-x2F-post"><a href="#修改-put-x2F-post" class="headerlink" title="修改(put&#x2F;post)"></a>修改(put&#x2F;post)</h2><p>修改有两种方式：</p><ul><li>全量修改：直接覆盖原来的文档(put)</li><li>增量修改：修改文档中的部分字段(post)</li></ul><h3 id="全量修改"><a href="#全量修改" class="headerlink" title="全量修改"></a>全量修改</h3><p>全量修改是覆盖原来的文档，其本质是：</p><ul><li>根据指定的id删除文档</li><li>新增一个相同id的文档</li></ul><p><strong>注意</strong>：如果根据id删除时，id不存在，第二步的新增也会执行，也就从修改变成了新增操作了。</p><p><strong>语法：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_doc/文档id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="增量修改"><a href="#增量修改" class="headerlink" title="增量修改"></a>增量修改</h3><p>增量修改是只修改指定id匹配的文档中的部分字段。</p><p><strong>语法：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_update/文档id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;字段名&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新的值&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post /test01/_update/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">25</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>再查看一下结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;test01&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;found&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;安理计科林峰&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;林&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;峰&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;827498@qq.com&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>age成功修改，且版本号加1（自带版本控制）</p><h2 id="ps：其实上面的没什么用，因为我们最终肯定是要用java控制DSL"><a href="#ps：其实上面的没什么用，因为我们最终肯定是要用java控制DSL" class="headerlink" title="ps：其实上面的没什么用，因为我们最终肯定是要用java控制DSL"></a>ps：其实上面的没什么用，因为我们最终肯定是要用java控制DSL</h2><h1 id="RestClient操作索引库"><a href="#RestClient操作索引库" class="headerlink" title="RestClient操作索引库"></a>RestClient操作索引库</h1><h2 id="使用RestClinet"><a href="#使用RestClinet" class="headerlink" title="使用RestClinet"></a>使用RestClinet</h2><p>引入es依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        es--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>初始化RestClient对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelTest</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    所有业务都需要该对象，因此直接放到类中</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    初始化client</span></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.10.128:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    关闭client</span></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建索引库"><a href="#创建索引库" class="headerlink" title="创建索引库"></a>创建索引库</h2><ul><li>1）创建Request对象。因为是创建索引库的操作，因此Request是CreateIndexRequest。</li><li>2）添加请求参数，其实就是DSL的JSON参数部分。因为json字符串很长，这里是定义了静态字符串常量MAPPING_TEMPLATE，让代码看起来更加优雅。</li><li>3）发送请求，client.indices()方法的返回值是IndicesClient类型，封装了所有与索引库操作有关的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">creatIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"></span><br><span class="line">    request.source(MAPPING_TEMPLATE, XContentType.JSON);</span><br><span class="line"></span><br><span class="line">    client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处的MAPPING_TEMPLATE作为一个静态变量放在别处了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hotel_json</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MAPPING_TEMPLATE</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;name\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;address\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;price\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;score\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;brand\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;city\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;starName\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;business\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;location\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;geo_point\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;pic\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;all\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到浏览器确认一下，发现成功创建index</p><h2 id="删除索引库"><a href="#删除索引库" class="headerlink" title="删除索引库"></a>删除索引库</h2><p>举一反三，删除索引库无非就是把创建请求转变为删除请求，且除了库名不需要其他参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"></span><br><span class="line">    client.indices().delete(request,RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回浏览器测试，删除成功</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312302256455.png" alt="image-20231230225601384"></p><h2 id="判断是否存在"><a href="#判断是否存在" class="headerlink" title="判断是否存在"></a>判断是否存在</h2><p>使用get请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testExistsHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建Request对象</span></span><br><span class="line">    <span class="type">GetIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.发送请求</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 3.输出</span></span><br><span class="line">    System.err.println(exists ? <span class="string">&quot;索引库已经存在！&quot;</span> : <span class="string">&quot;索引库不存在！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="往索引库里添加数据"><a href="#往索引库里添加数据" class="headerlink" title="往索引库里添加数据"></a>往索引库里添加数据</h2><p>注意如果是索引库操作，那调用的是client的indices，如果是文档操作，则调用的是client.index</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">AddHotelTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        获取数据库数据</span></span><br><span class="line">        <span class="type">Hotel</span> <span class="variable">hotel</span> <span class="operator">=</span> hotelService.getById(<span class="number">36934L</span>);</span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line"><span class="comment">//        创建请求对象</span></span><br><span class="line">        <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>).id(hotel.getId().toString());</span><br><span class="line"><span class="comment">//        将查询出来的内容作为source赋值给请求</span></span><br><span class="line"><span class="comment">//        此处调用fastJson的方法，可以将对象快速转换为json格式</span></span><br><span class="line">        request.source(JSON.toJSONString(hotelDoc), XContentType.JSON);</span><br><span class="line"><span class="comment">//        调用client方法add</span></span><br><span class="line">        client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>回网页鉴定一下，确实没问题</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312302334411.png" alt="image-20231230233408321"></p><h2 id="按id获取索引库中的值"><a href="#按id获取索引库中的值" class="headerlink" title="按id获取索引库中的值"></a>按id获取索引库中的值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getHotelByIdTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        构造请求</span></span><br><span class="line">        <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;36934&quot;</span>);</span><br><span class="line"><span class="comment">//        调用方法</span></span><br><span class="line">        <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.get(request, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">//        获取返回对象中的source参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hotel</span> <span class="operator">=</span> response.getSourceAsString();</span><br><span class="line"></span><br><span class="line">        System.out.println(hotel);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312302341045.png" alt="image-20231230234114954"></p><h2 id="更新文档数据"><a href="#更新文档数据" class="headerlink" title="更新文档数据"></a>更新文档数据</h2><p>之前有说更新文档存在两种形式，一是直接删除原来的，重新加入一条新的。二是在原来的基础上修改</p><p>此处演示第二种</p><p>调用的是client的update方法，update必然要提供要修改的键还有他的新值，这些都放在updaterequest的doc中，每两个作为一对键值对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">void</span> <span class="title function_">updateByIdTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">UpdateRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;36934&quot;</span>);</span><br><span class="line"></span><br><span class="line">        request.doc(</span><br><span class="line"><span class="comment">//                每两个参数作为一对 key value</span></span><br><span class="line">                <span class="string">&quot;brand&quot;</span>,<span class="string">&quot;666天酒店&quot;</span>,</span><br><span class="line">                <span class="string">&quot;city&quot;</span>,<span class="string">&quot;淮南&quot;</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        client.update(request,RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>修改成功</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312302349964.png" alt="image-20231230234946907"></p><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><p>太简单，不多说了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;36934&quot;</span>);</span><br><span class="line"></span><br><span class="line">    client.delete(request,RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 批量查询酒店数据</span></span><br><span class="line">    List&lt;Hotel&gt; hotels = hotelService.list();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建Request</span></span><br><span class="line">    <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">    <span class="comment">// 2.准备参数，添加多个新增的Request</span></span><br><span class="line">    <span class="keyword">for</span> (Hotel hotel : hotels) &#123;</span><br><span class="line">        <span class="comment">// 2.1.转换为文档类型HotelDoc</span></span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">        <span class="comment">// 2.2.创建新增文档的Request对象</span></span><br><span class="line">        request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>)</span><br><span class="line">                    .id(hotelDoc.getId().toString())</span><br><span class="line">                    .source(JSON.toJSONString(hotelDoc), XContentType.JSON));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DSL批量插叙指令：<br>GET &#x2F;_hotel&#x2F;_search</p><h1 id="DSL查询语句"><a href="#DSL查询语句" class="headerlink" title="DSL查询语句"></a>DSL查询语句</h1><h2 id="DSL分类"><a href="#DSL分类" class="headerlink" title="DSL分类"></a>DSL分类</h2><ul><li>查询所有：查询出所有数据</li><li>全文检索：利用分词器将用户输入分词，然后从索引库中查询<ul><li>match_query</li><li>multi_match_query</li></ul></li><li>精确查找：根据精确词条查找</li></ul><h2 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h2><p>match查询语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TEXT&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>mulit_match语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TEXT&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;FIELD1&quot;</span><span class="punctuation">,</span> <span class="string">&quot; FIELD12&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="精确查询"><a href="#精确查询" class="headerlink" title="精确查询"></a>精确查询</h2><p>精确查询一般是查找keyword、数值、日期、boolean等类型字段。所以<strong>不会</strong>对搜索条件分词。常见的有：</p><ul><li>term：根据词条精确值查询</li><li>range：根据值的范围查询</li></ul><p>语法说明：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// term查询</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VALUE&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// range查询</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="comment">// 这里的gte代表大于等于，gt则代表大于</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">20</span> <span class="comment">// lte代表小于等于，lt则代表小于</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="RestClient查询"><a href="#RestClient查询" class="headerlink" title="RestClient查询"></a>RestClient查询</h1><h2 id="查询所有-查询内容处理"><a href="#查询所有-查询内容处理" class="headerlink" title="查询所有 + 查询内容处理"></a>查询所有 + 查询内容处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">void</span> <span class="title function_">testMatchAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        1.准备Request</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;test01&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2.准备DSL</span></span><br><span class="line">        request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line"><span class="comment">//        3.发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        4.解析结果</span></span><br><span class="line"><span class="comment">//        获取hit对象</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line"><span class="comment">//        获取hit数目</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> hits.getTotalHits().value;</span><br><span class="line"><span class="comment">//        获取hit到的数据</span></span><br><span class="line">        SearchHit[] searchHits = hits.getHits();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit :</span><br><span class="line">                searchHits) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(response);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202401202304327.png" alt="image-20240120230439233"></p><h2 id="match查询"><a href="#match查询" class="headerlink" title="match查询"></a>match查询</h2><p>RestClient查询整体代码流程没有区别，不同的查询方式之间只有QueryBuilder不一样，下面再拿match举例，直接借用machall代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">void</span> <span class="title function_">testMatchAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        1.准备Request</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;test01&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2.准备DSL</span></span><br><span class="line">        request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>,<span class="string">&quot;林&quot;</span>));</span><br><span class="line"><span class="comment">//        3.发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        4.解析结果</span></span><br><span class="line"><span class="comment">//        获取hit对象</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line"><span class="comment">//        获取hit数目</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> hits.getTotalHits().value;</span><br><span class="line"><span class="comment">//        获取hit到的数据</span></span><br><span class="line">        SearchHit[] searchHits = hits.getHits();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit :</span><br><span class="line">                searchHits) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(response);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="精确查询-1"><a href="#精确查询-1" class="headerlink" title="精确查询"></a>精确查询</h2><p>多余代码省略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QueryBuilders.termQuery(<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//范围</span></span><br><span class="line">QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).gte(<span class="number">100</span>).lte(<span class="number">150</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line"><span class="comment">// 2.2.添加term</span></span><br><span class="line">boolQuery.must(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, <span class="string">&quot;杭州&quot;</span>));</span><br><span class="line"><span class="comment">// 2.3.添加range</span></span><br><span class="line">boolQuery.filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).lte(<span class="number">250</span>));</span><br><span class="line"></span><br><span class="line">request.source().query(boolQuery);</span><br></pre></td></tr></table></figure><h2 id="排序分页"><a href="#排序分页" class="headerlink" title="排序分页"></a>排序分页</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.source().sort(<span class="string">&quot;age&quot;</span>, SortOrder.ASC);</span><br><span class="line"><span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> <span class="number">2</span>,size = <span class="number">1</span>;</span><br><span class="line">request.source().from((page - <span class="number">1</span>) * size).size(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.source().highlighter(<span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>().field(<span class="string">&quot;name&quot;</span>).requireFieldMatch(<span class="literal">false</span>));</span><br></pre></td></tr></table></figure><h1 id="数据聚合"><a href="#数据聚合" class="headerlink" title="数据聚合"></a>数据聚合</h1><h2 id="聚合种类"><a href="#聚合种类" class="headerlink" title="聚合种类"></a>聚合种类</h2><p>聚合常见的有三类：</p><ul><li><p><strong>桶（Bucket）</strong>聚合：用来对文档做分组</p><ul><li>TermAggregation：按照文档字段值分组，例如按照品牌值分组、按照国家分组</li><li>Date Histogram：按照日期阶梯分组，例如一周为一组，或者一月为一组</li></ul></li><li><p><strong>度量（Metric）</strong>聚合：用以计算一些值，比如：最大值、最小值、平均值等</p><ul><li>Avg：求平均值</li><li>Max：求最大值</li><li>Min：求最小值</li><li>Stats：同时求max、min、avg、sum等</li></ul></li><li><p><strong>管道（pipeline）</strong>聚合：其它聚合的结果为基础做聚合</p></li></ul><h2 id="DSL聚合语法-bucket"><a href="#DSL聚合语法-bucket" class="headerlink" title="DSL聚合语法(bucket)"></a>DSL聚合语法(bucket)</h2><p>可以对数据进行一个分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">get /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; // 限定条件</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;lte&quot;: 200</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 0, // 显示多少条数据</span><br><span class="line">  &quot;aggs&quot;: &#123; // 聚合</span><br><span class="line">    &quot;brandAgg&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;brand&quot;, // 参与聚合的字段</span><br><span class="line">        &quot;order&quot;: &#123;</span><br><span class="line">          &quot;_count&quot;: &quot;desc&quot; // 排序方式</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;size&quot;: 10 // 显示多少bucket（桶）</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DSL聚合语法（Metric）"><a href="#DSL聚合语法（Metric）" class="headerlink" title="DSL聚合语法（Metric）"></a>DSL聚合语法（Metric）</h2><p>结合上一个简单聚合使用，可以在每一个bucket中查找最大，最小，平均等等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">get /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;brandAgg&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;brand&quot;,</span><br><span class="line">        &quot;order&quot;: &#123;</span><br><span class="line">          &quot;scoreAgg.avg&quot;: &quot;asc&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;size&quot;: 10</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123; // 在基础聚合基础上</span><br><span class="line">      &quot;scoreAgg&quot;:&#123;</span><br><span class="line">        &quot;stats&quot;: &#123;</span><br><span class="line">          &quot;field&quot;: &quot;score&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="RestClient实现"><a href="#RestClient实现" class="headerlink" title="RestClient实现"></a>RestClient实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">void</span> <span class="title function_">testAggregation</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//       准备请求</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"><span class="comment">//        准备DSL</span></span><br><span class="line">        request.source().size(<span class="number">0</span>);</span><br><span class="line">        request.source().aggregation(</span><br><span class="line">                AggregationBuilders.terms(<span class="string">&quot;brandAgg&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;brand&quot;</span>)</span><br><span class="line">                .size(<span class="number">10</span>)</span><br><span class="line">        );</span><br><span class="line"><span class="comment">//        发出请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">//        解析结果</span></span><br><span class="line">        <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> response.getAggregations();</span><br><span class="line">        <span class="type">Terms</span> <span class="variable">brandTerms</span> <span class="operator">=</span>  aggregations.get(<span class="string">&quot;brandAgg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();</span><br><span class="line">        <span class="keyword">for</span>(Terms.Bucket bucket : buckets)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h1><h2 id="拼音分词器"><a href="#拼音分词器" class="headerlink" title="拼音分词器"></a>拼音分词器</h2><p>拼音分词器的官方地址：<a href="https://github.com/medcl/elasticsearch-analysis-pinyin">https://github.com/medcl/elasticsearch-analysis-pinyin</a></p><p>下载完毕后，将其解压放入es插件的本地挂载目录中即可</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202401310111850.png" alt="image-20240131011145793"></p><h2 id="演示根据拼音分词"><a href="#演示根据拼音分词" class="headerlink" title="演示根据拼音分词"></a>演示根据拼音分词</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">post /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;林峰学分布式&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>得到的部分结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;lin&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;lfxfbs&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;feng&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;xue&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure><h2 id="自定义分词器"><a href="#自定义分词器" class="headerlink" title="自定义分词器"></a>自定义分词器</h2><p>elasticsearch中分词器（analyzer）的组成包含三部分：</p><ul><li>character filters：在tokenizer之前对文本进行处理。例如删除字符、替换字符</li><li>tokenizer：将文本按照一定的规则切割成词条（term）。例如keyword，就是不分词；还有ik_smart</li><li>tokenizer filter：将tokenizer输出的词条做进一步处理。例如大小写转换、同义词处理、拼音处理等</li></ul><p>我们可以自定义这三部分，可以让这三部分分别使用不同的分词器</p><p>比如在tokenizer阶段，我们指定使用ik分词器，然后在tokenizer filter阶段，我们选用pinyin分词器，这样出来的结果和直接使用拼音分词器的不同之处在于，拼音分词器会将ik分词器的结果转换为拼音（比如苹果，直接使用拼音分词器结果是[“ping”,”guo”],而使用自定义分词器，结果为[“pingguo”]）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义拼音分词器</span></span><br><span class="line">PUT /test</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">        <span class="attr">&quot;my_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;py&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;py&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_joined_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_original&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;limit_first_letter_length&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remove_duplicated_term&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="自动补全-1"><a href="#自动补全-1" class="headerlink" title="自动补全"></a>自动补全</h2><ul><li><p>参与补全查询的字段必须是completion类型。</p></li><li><p>字段的内容一般是用来补全的多个词条形成的数组。</p></li></ul><p>例子</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动补全的索引库</span></span><br><span class="line">PUT test</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completion&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 示例数据</span></span><br><span class="line">POST test/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Sony&quot;</span><span class="punctuation">,</span> <span class="string">&quot;WH-1000XM3&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST test/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;SK-II&quot;</span><span class="punctuation">,</span> <span class="string">&quot;PITERA&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST test/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Nintendo&quot;</span><span class="punctuation">,</span> <span class="string">&quot;switch&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动补全查询</span></span><br><span class="line">POST /test/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;suggest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title_suggest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s&quot;</span><span class="punctuation">,</span> <span class="comment">// 关键字</span></span><br><span class="line">      <span class="attr">&quot;completion&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;title&quot;</span><span class="punctuation">,</span> <span class="comment">// 补全字段</span></span><br><span class="line">        <span class="attr">&quot;skip_duplicates&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 跳过重复的</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span> <span class="comment">// 获取前10条结果</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h1><p>es里存放的数据索引一般仅用作查询使用，其数据来源于数据库，当数据库中的数据遭到增删改查时，es中的数据并不会自动地同步修改，因此需要我们通过一些方法来同步修改es和数据库中的数据。</p><h2 id="三种方法"><a href="#三种方法" class="headerlink" title="三种方法"></a>三种方法</h2><p>法一：</p><p>同步调用：在修改数据库时，同步调用es的更新服务接口，这样每次修改都同时进行，三个步骤依次执行，缺点会导致业务耦合，整个业务流程被拉长，在更新完数据库后整个进程还要等待es更新，且如果其中某个业务出现问题，整个流程都会出现问题</p><p>法二：</p><p>异步调用，运用MQ信息通道，将法一调用服务接口的过程转变为在通道中发送消息，然后由es的更新服务接收消息，并更新es索引库，这样整个过程就将更新数据库和更新索引库分开了，且两者之间是异步的关系，缺点是复杂度略有提高</p><p>法三;</p><p>利用mysql自带的binlog，binlog是mysql自带的一个日志文件，对数据的增删改查都会在binlog中进行记录，然后使用canal中间件监听binlog的变化，然后再同步修改es。</p><p><strong>推荐第二种</strong></p><h2 id="es集群"><a href="#es集群" class="headerlink" title="es集群"></a>es集群</h2><p>集群的目的：解决海量存储问题还有单点故障问题</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker教学</title>
      <link href="/2023/12/23/Docker%E6%95%99%E5%AD%A6/"/>
      <url>/2023/12/23/Docker%E6%95%99%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker教学"><a href="#Docker教学" class="headerlink" title="Docker教学"></a>Docker教学</h1><h2 id="1-什么是Docker"><a href="#1-什么是Docker" class="headerlink" title="1.什么是Docker"></a>1.什么是Docker</h2><p>你可以把Docker看作一个容器，就像是一个可以装载软件和代码的集装箱。通过使用Docker，你可以将应用程序及其所有依赖项打包到一个独立的容器中，而不必担心它们会与其他应用程序或系统环境发生冲突。</p><p>使用Docker，你可以快速地在不同的计算机上部署应用程序，而不必担心配置和依赖问题。这意味着你可以在你的电脑上开发一个应用程序，并将其相同的运行环境在其他人的电脑或服务器上轻松地运行起来，而不需要重新配置和安装依赖项。</p><p>另外，Docker还使得应用程序的交付更加简单和可靠。你可以将应用程序和其依赖项打包到一个容器中，并将其发布到云端或其他服务器上，其他人只需要运行这个容器，就能够轻松地使用你的应用程序。</p><p>总之，Docker可以帮助开发者更轻松地构建、打包和运行应用程序，提供了一种简单、可靠的应用程序交付方式。它的优势在于提供了一致的运行环境，并且可以在不同的计算机上进行部署，极大地简化了开发和部署的过程。</p><h2 id="2-Docker和虚拟机差别"><a href="#2-Docker和虚拟机差别" class="headerlink" title="2.Docker和虚拟机差别"></a>2.Docker和虚拟机差别</h2><p><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</p><p><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统，如图：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312231651358.png" alt="image-20210731145914960"></p><p>对比来看：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312231651354.png" alt="image-20210731152243765"></p><h2 id="3-镜像和容器概念"><a href="#3-镜像和容器概念" class="headerlink" title="3.镜像和容器概念"></a>3.镜像和容器概念</h2><p>镜像：Docker将应用程序及其所需的依赖，函数库，环境，配置等打包在一起，称为镜像</p><p>容器：镜像中的应用运行的进程就是容器，容器有隔离作用</p><h2 id="4-Docker镜像基本操作"><a href="#4-Docker镜像基本操作" class="headerlink" title="4.Docker镜像基本操作"></a>4.Docker镜像基本操作</h2><h3 id="4-1-获取，查看，删除镜像"><a href="#4-1-获取，查看，删除镜像" class="headerlink" title="4.1 获取，查看，删除镜像"></a>4.1 获取，查看，删除镜像</h3><p>docker pull</p><blockquote><p>从服务端拉取</p></blockquote><p>docker images</p><blockquote><p>查看镜像</p></blockquote><p>docker rmi</p><blockquote><p>删除镜像</p></blockquote><h3 id="4-2-推送，保存，加载镜像"><a href="#4-2-推送，保存，加载镜像" class="headerlink" title="4.2 推送，保存，加载镜像"></a>4.2 推送，保存，加载镜像</h3><p>docker push</p><blockquote><p>推送镜像到服务</p></blockquote><p>docker save</p><blockquote><p>保存镜像为压缩包</p></blockquote><p>docker load</p><blockquote><p>加载压缩包为镜像</p></blockquote><h3 id="4-3-docker启动"><a href="#4-3-docker启动" class="headerlink" title="4.3 docker启动"></a>4.3 docker启动</h3><p>systemctl start docker</p><blockquote><p>启动命令</p></blockquote><h3 id="4-4-docker拉取实践"><a href="#4-4-docker拉取实践" class="headerlink" title="4.4 docker拉取实践"></a>4.4 docker拉取实践</h3><p>拉取nginx</p><blockquote><p>docker pull nginx</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312231748177.png" alt="image-20231223174801081"></p><p>拉取成功</p><p>docker images查看本地镜像</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312231748688.png" alt="image-20231223174833659"></p><h2 id="5-docker容器基本操作"><a href="#5-docker容器基本操作" class="headerlink" title="5. docker容器基本操作"></a>5. docker容器基本操作</h2><h3 id="5-1-常用命令"><a href="#5-1-常用命令" class="headerlink" title="5.1 常用命令"></a>5.1 常用命令</h3><p>docker run</p><blockquote><p>运行容器</p></blockquote><p>docker pause&#x2F;unpause</p><blockquote><p>暂停 &#x2F;结束暂停</p></blockquote><p>docker stop&#x2F;start</p><blockquote><p>停止&#x2F;开始</p></blockquote><p>docker ps</p><blockquote><p>查看所有运行的容器，还有状态</p></blockquote><p>docker exec</p><blockquote><p>进入容器执行命令</p></blockquote><p>docker rm</p><blockquote><p>删除容器</p></blockquote><h3 id="5-2-举例：启动Nginx容器"><a href="#5-2-举例：启动Nginx容器" class="headerlink" title="5.2 举例：启动Nginx容器"></a>5.2 举例：启动Nginx容器</h3><p>启动陌生容器之前，去dockerhub官网查一下</p><p>创建并运行nginx容器的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name containerName -p 80:80 -d nginx</span><br></pre></td></tr></table></figure><ul><li>docker run ：创建并运行一个容器</li><li>–name : 给容器起一个名字，比如叫做mn</li><li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li>-d：后台运行容器</li><li>nginx：镜像名称，例如nginx</li></ul><h2 id="6-Docker数据卷"><a href="#6-Docker数据卷" class="headerlink" title="6. Docker数据卷"></a>6. Docker数据卷</h2><p>相当于让容器使用宿主机某个文件目录，这样就可以随时修改容器的内容，比如nginx里的静态资源</p><p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p><h3 id="6-1-操作命令"><a href="#6-1-操作命令" class="headerlink" title="6.1 操作命令"></a>6.1 操作命令</h3><p>数据卷操作的基本语法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume [COMMAND]</span><br></pre></td></tr></table></figure><p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p><ul><li>create 创建一个volume</li><li>inspect 显示一个或多个volume的信息</li><li>ls 列出所有的volume</li><li>prune 删除未使用的volume</li><li>rm 删除一个或多个指定的volume</li></ul><h3 id="6-2-挂载数据卷"><a href="#6-2-挂载数据卷" class="headerlink" title="6.2 挂载数据卷"></a>6.2 挂载数据卷</h3><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name mn \</span><br><span class="line">  -v html:/root/html \</span><br><span class="line">  -p 8080:80</span><br><span class="line">  nginx \</span><br></pre></td></tr></table></figure><p>这里的-v就是挂载数据卷的命令：</p><ul><li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的&#x2F;root&#x2F;html这个目录中</li></ul><p>挂载后，容器内的相应目录会同步到自己设置的宿主机上的数据卷</p><p>挂载时，如果冒号左的数据卷（宿主机上的）不存在，则自动创建</p><h2 id="7-自定义镜像"><a href="#7-自定义镜像" class="headerlink" title="7.自定义镜像"></a>7.自定义镜像</h2><h3 id="7-1-Dockerfile常用指令"><a href="#7-1-Dockerfile常用指令" class="headerlink" title="7.1 Dockerfile常用指令"></a>7.1 Dockerfile常用指令</h3><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的**指令(Instruction)**，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312241519924.png" alt="image-20210731180321133"></p><h3 id="7-2-举例利用docker构建java项目"><a href="#7-2-举例利用docker构建java项目" class="headerlink" title="7.2 举例利用docker构建java项目"></a>7.2 举例利用docker构建java项目</h3><p>Dockerfilel例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 指定基础镜像</span><br><span class="line">FROM ubuntu:16.04</span><br><span class="line"># 配置环境变量，JDK的安装目录</span><br><span class="line">ENV JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"># 拷贝jdk和java项目的包</span><br><span class="line">COPY ./jdk8.tar.gz $JAVA_DIR/</span><br><span class="line">COPY ./docker-demo.jar /tmp/app.jar</span><br><span class="line"></span><br><span class="line"># 安装JDK</span><br><span class="line">RUN cd $JAVA_DIR \</span><br><span class="line"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span><br><span class="line"> &amp;&amp; mv ./jdk1.8.0_144 ./java8</span><br><span class="line"></span><br><span class="line"># 配置环境变量</span><br><span class="line">ENV JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line">ENV PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"># 暴露端口</span><br><span class="line">EXPOSE 8090</span><br><span class="line"># 入口，java项目的启动命令</span><br><span class="line">ENTRYPOINT java -jar /tmp/app.jar</span><br></pre></td></tr></table></figure><p>利用dockerfile构建镜像</p><blockquote><p>docker build -t javaweb:1.0 . </p></blockquote><p>在dockerfile同目录下执行</p><h2 id="8-DockerCompose"><a href="#8-DockerCompose" class="headerlink" title="8.DockerCompose"></a>8.DockerCompose</h2><h3 id="8-1-何为DockerCompose"><a href="#8-1-何为DockerCompose" class="headerlink" title="8.1 何为DockerCompose"></a>8.1 何为DockerCompose</h3><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p><h3 id="8-2-Compose举例"><a href="#8-2-Compose举例" class="headerlink" title="8.2 Compose举例"></a>8.2 Compose举例</h3><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">version<span class="punctuation">:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"> services<span class="punctuation">:</span></span><br><span class="line">  mysql<span class="punctuation">:</span></span><br><span class="line">    image<span class="punctuation">:</span> mysql<span class="punctuation">:</span><span class="number">5.7</span><span class="number">.25</span></span><br><span class="line">    environment<span class="punctuation">:</span></span><br><span class="line">     MYSQL_ROOT_PASSWORD<span class="punctuation">:</span> <span class="number">123</span> </span><br><span class="line">    volumes<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span></span><br><span class="line">  web<span class="punctuation">:</span></span><br><span class="line">    build<span class="punctuation">:</span> .</span><br><span class="line">    ports<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;8090:8090&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的Compose文件就描述一个项目，其中包含两个容器：</p><ul><li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li><li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos教程</title>
      <link href="/2023/12/23/Nacos%E6%95%99%E7%A8%8B/"/>
      <url>/2023/12/23/Nacos%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Nacos教程"><a href="#Nacos教程" class="headerlink" title="Nacos教程"></a>Nacos教程</h1><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><p>Nacos是阿里提供的注册中心，功能类似于Eureka且要更强大，两种注册中心都要学一下</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>GitHub主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>GitHub的Release下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>安装完成后进行解压</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212256701.png" alt="image-20231221225613653"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>conf&#x2F;application.properties这是nacos的配置文件，可以在里面进行一些常规的端口配置</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>在bin目录下，你可以直接双击startup.cmd</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212258877.png" alt="image-20231221225839838"></p><p>也可以在命令行模式下运行指令</p><blockquote><p>startup.cmd -m standalone</p><p>此处为单机启动</p></blockquote><p>启动界面：<br><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212300066.png" alt="image-20231221230001017"></p><p>然后我们可以访问上面给出的网页，可以看到nacos的界面</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212301899.png" alt="image-20231221230114812"></p><p>默认登录名和密码都是nacos</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212301323.png" alt="image-20231221230141264"></p><p>这就是nacos的界面，之后我们会在这里进行操作</p><p>关闭的话就是运行shutdown.cmd</p><h2 id="Nacos快速入门"><a href="#Nacos快速入门" class="headerlink" title="Nacos快速入门"></a>Nacos快速入门</h2><p>首先在项目的父工程中添加spring-cloud-alilbaba管理依赖，进行包管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在服务中添加nacos客户端依赖（注释掉之前的eureka依赖）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos客户端依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后修改配置文件（注释掉eureka）</p><p>配置结束后，正常启动服务，然后启动nacos进入控制台，就会看到两个服务被注册进来了</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212322745.png" alt="image-20231221232205678"></p><p>同样实现了注册中心的功能。</p><h2 id="Nacos服务分级储存模型"><a href="#Nacos服务分级储存模型" class="headerlink" title="Nacos服务分级储存模型"></a>Nacos服务分级储存模型</h2><p>实现服务的集群化</p><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212331253.png" alt="image-20210713232522531"></p><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212331260.png" alt="image-20210713232658928"></p><p>杭州机房内的order-service应该优先访问同机房的user-service。</p><p>操作：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment">#nacos 服务端地址</span></span><br><span class="line">  <span class="attr">discovery:</span></span><br><span class="line">    <span class="attr">cluster-name:</span> <span class="string">AH</span></span><br></pre></td></tr></table></figure><h2 id="Nacos负载均衡"><a href="#Nacos负载均衡" class="headerlink" title="Nacos负载均衡"></a>Nacos负载均衡</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userserver:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line"><span class="comment">#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule # 负载均衡规则</span></span><br><span class="line">      <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure><blockquote><p>NacosRule优先同集群内随机</p></blockquote><h2 id="配置权重"><a href="#配置权重" class="headerlink" title="配置权重"></a>配置权重</h2><p>权重可以影响被分配的几率，越大越容易被分配到，这个在nacos中就可以设置</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212347240.png" alt="image-20231221234708178"></p><h2 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h2><p>Nacos提供了namespace来实现环境隔离功能。</p><ul><li>nacos中可以有多个namespace</li><li>namespace下可以有group、service等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ul><p>方法</p><p>首先创建命名空间：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212355722.png" alt="image-20231221235551673"></p><p>然后进入到服务的配置文件进行配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment">#nacos 服务端地址</span></span><br><span class="line">  <span class="attr">discovery:</span></span><br><span class="line">    <span class="attr">cluster-name:</span> <span class="string">AH</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">25cd75bc-82c3-4396-ba42-a42a5de77b92</span> <span class="comment">#命名空间id</span></span><br></pre></td></tr></table></figure><p>这样就实现了隔离</p><h2 id="Nacos和Eureka相同和不同"><a href="#Nacos和Eureka相同和不同" class="headerlink" title="Nacos和Eureka相同和不同"></a>Nacos和Eureka相同和不同</h2><ul><li>Nacos与eureka的共同点<ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li>Nacos与Eureka的区别<ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul></li></ul><h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><p>在实际生产过程中，可能会出现频繁修改配置的情况，但是如果修改配置过程中涉及的微服务数量多了，会很麻烦且修改配置的微服务需要重启以生效新的配置，但重启可能会带来很大的损失，所以我们需要Nacos的配置管理，他可以保存服务中一些比较重要的核心配置，服务在启动时只需读取上面的配置，然后结合自身配置组成一套完整的配置文件。通过配置热更新，如果要修改只需要修改Nacos的配置管理，其余微服务就会读取到变化后的配置，然后加以应用，实现热更新。</p><h2 id="Nacos实现配置管理"><a href="#Nacos实现配置管理" class="headerlink" title="Nacos实现配置管理"></a>Nacos实现配置管理</h2><p>直接在Nacos控制台里操作</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221646375.png" alt="image-20231222164621257"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221651280.png" alt="image-20231222165131214"></p><h2 id="微服务获取Nacos中的配置"><a href="#微服务获取Nacos中的配置" class="headerlink" title="微服务获取Nacos中的配置"></a>微服务获取Nacos中的配置</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221700941.png" alt="image-20231222170002889"></p><p>由上面的流程图我们可以看到，bootstrap这一配置文件的优先级是要高于application的，因此我们需要把连接Nacos服务的配置配置到该文件里面，这样Spring会先根据这个配置文件访问到Nacos，并提取到其中的服务，然后在把其中的配置和本地application中的配置合并成完整的配置，这就是整个配置管理的全过程。</p><p>首先导入Nacos配置管理依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos配置管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在resource目录下添加bootstrap.yml文件</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221714999.png" alt="image-20231222171403954"></p><p>然后配置bootstrap，将Nacos服务连接配置，还有想要获取的被Nacos管理的配置信息写进去，注意一定要和Nacos中的名字相对应</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userserver</span> <span class="comment"># 对应配置名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev </span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br></pre></td></tr></table></figure><p>由于application中已经存在了Nacos服务连接配置，所以需要删除，还有原先在application中配置的dateformat</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221718207.png" alt="image-20231222171848160"></p><p>然后验证一下是否已经读到配置了，我们可以利用@Value注解拿到配置文件中的配置</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221725173.png" alt="image-20231222172508121"></p><p>看结果，成功读到：<br><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221725232.png" alt="image-20231222172555188"></p><h2 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h2><p>热更新即让我们的微服务能实时获取Nacos中变化的配置，而无需重启微服务</p><p>有两种方法</p><p>法一：<br>在@Value注入的类上添加注解@RefreshScope</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221752042.png" alt="image-20231222175209994"></p><p>法二（推荐）:<br>利用@ConfigurationProperties注解自动注入代替@Value注解。</p><p>为此我们可以单独建一个类，来获取配置文件的属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@ConfigurationProperties会自动将符合前缀名并且属性名和该类中的属性一致的配置的值，自动注入到属性中。</p></blockquote><p>获取的话，首先利用@Autowired注入该类，因为已经添加过@Data注解，直接调用get方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(patternProperties.getDateformat());</span><br></pre></td></tr></table></figure><p>然后让我们试验一下</p><p>重启微服务</p><p>先修改Nacos配置管理中的配置</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221801781.png" alt="image-20231222180110737"></p><p>然后再次访问我们写了输出语句的方法，热更新成功</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221801049.png" alt="image-20231222180155006"></p><p>再改一次</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221802694.png" alt="image-20231222180228652"></p><p>再试试，依然成功</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221803418.png" alt="image-20231222180301381"></p><h2 id="多环境配置共享"><a href="#多环境配置共享" class="headerlink" title="多环境配置共享"></a>多环境配置共享</h2><p>微服务启动时会从Nacos中读取多个配置</p><p>我们可以在Nacos中再加一个配置，格式是name + .yaml</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221823872.png" alt="image-20231222182304821"></p><p>这样这个配置所有环境下的userserver都可以读到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">    <span class="keyword">private</span> String sharedValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们再访问</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221825327.png" alt="image-20231222182521285"></p><p>访问到了两个配置文件中的内容，但实际上当前userserver是dev环境，这说明没有标明环境的配置文件可被多个微服务共享</p><p>优先级的话：<br>环境配置 &gt; 多环境配置 &gt; 本地</p><h2 id="Nacos集群"><a href="#Nacos集群" class="headerlink" title="Nacos集群"></a>Nacos集群</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221943020.png" alt="image-20231222194305936"></p><p>举例：</p><p>其中包含3个nacos节点，然后一个负载均衡器代理3个Nacos。这里负载均衡器可以使用nginx。</p><h3 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h3><h4 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h4><p>首先新建一个数据库，命名为nacos，而后导入下面的SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">64</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`enabled` <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roles` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="keyword">ASC</span>, `role` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permissions` (</span><br><span class="line">    `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `resource` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `action` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="配置Nacos"><a href="#配置Nacos" class="headerlink" title="配置Nacos"></a>配置Nacos</h4><p>进入nacos的conf目录，修改配置文件cluster.conf.example，重命名为cluster.conf：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221946748.png" alt="image-20231222194606692"></p><p>然后添加内容（分别对应你三个nacos节点的地址和端口）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:8845</span><br><span class="line">127.0.0.1.8846</span><br><span class="line">127.0.0.1.8847</span><br></pre></td></tr></table></figure><p>然后修改application.properties文件，添加数据库配置，对应自己电脑的数据库地址还有账号密码</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure><p>还有每个nacos的端口号要对应cluster.conf</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8845</span></span><br></pre></td></tr></table></figure><p>（每个nacos都要进行配置）</p><h4 id="启动nacos"><a href="#启动nacos" class="headerlink" title="启动nacos"></a>启动nacos</h4><p>这里直接运行startup.cmd，默认集群启动</p><h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><p>修改conf&#x2F;nginx.conf文件，配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> nacos-cluster &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8845</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:8846</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:8847</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /nacos &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://nacos-cluster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就使用了nginx反向代理了Nacos</p><h4 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start nginx.exe</span><br></pre></td></tr></table></figure><p>而后在浏览器访问：<a href="http://localhost/nacos%E5%8D%B3%E5%8F%AF%E3%80%82">http://localhost/nacos即可。</a></p><p>代码中application.yml文件配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment"># Nacos地址</span></span><br></pre></td></tr></table></figure><p>因为nginx监听80端口</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务入门学习</title>
      <link href="/2023/12/21/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/12/21/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="微服务入门学习"><a href="#微服务入门学习" class="headerlink" title="微服务入门学习"></a>微服务入门学习</h1><blockquote><p>部分资料来自于黑马程序员</p></blockquote><h2 id="1-热门微服务技术对比"><a href="#1-热门微服务技术对比" class="headerlink" title="1. 热门微服务技术对比"></a>1. 热门微服务技术对比</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312211454709.png" alt="image-20231221145402634"></p><h2 id="2-简单实现微服务的代码"><a href="#2-简单实现微服务的代码" class="headerlink" title="2. 简单实现微服务的代码"></a>2. 简单实现微服务的代码</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312211528506.png" alt="image-20231221152818473"></p><p>此处分别为用户服务和订单服务</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312211529092.png" alt="image-20231221152901057"></p><p>订单服务的端口为8080，且调用cloud_order数据库</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312211529778.png" alt="image-20231221152949744"></p><p>用户服务在8081，且数据库为cloud_user</p><p>加上简单的业务代码，这样就能实现简单的微服务。</p><p>访问user_service</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312211531063.png" alt="image-20231221153135034"></p><p>访问order_service</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312211531420.png" alt="image-20231221153150390"></p><h2 id="3-微服务远程调用"><a href="#3-微服务远程调用" class="headerlink" title="3. 微服务远程调用"></a>3. 微服务远程调用</h2><p>问题描述：</p><p>由于微服务架构中，一个完整的项目被分成了很多可以独立工作的部分，但我们在实际调用这些模块的时候，可能并不只是调用其中一个，我们可能需要多个模块协同工作后的结果，比如上面举例的用户的订单模块，如果我们想要在查询订单的时候一块查询到用户信息，而订单模块又无法直接操作用户数据库，应该怎么办？</p><p>这就需要微服务的远程调用，即用模块调用模块，实现方法类似于用java代码发送http请求给目标模块</p><p>spring提供了可以实现这一功能的工具：RestTemplate</p><p>首先先在启动类里面注册RestTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    注册RestTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在需要的地方注入并调用RestTemplate</p><p>注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        创建url，指向发送请求的地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8081/user/&quot;</span> + order.getUserId();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br></pre></td></tr></table></figure><blockquote><p>restTemplate.getForObject 发送get请求</p><p>restTemplate.postForObject 发送post请求</p><p>默认返回json格式字符串，可以自己定义返回类型</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312211602645.png" alt="image-20231221160222609"></p><p>返回的json同时有user模块的内容</p><p>需要注意的是：url一定记得完整，加http:&#x2F;&#x2F;,然后不要忘记参数前加&#x2F;</p><h2 id="4-Eureka注册中心"><a href="#4-Eureka注册中心" class="headerlink" title="4. Eureka注册中心"></a>4. Eureka注册中心</h2><p>上述远程调用看似很成功，实则存在很多问题：</p><ul><li>服务消费者如何获知提供者的地址信息（肯定不是写localhost）</li><li>如果存在多个提供者，消费者如何从中选择</li><li>消费者如何知道提供者的健康状态（服务器是否挂了）</li></ul><p>这就需要Eureka，它作为一个中间媒介，在每一个服务启动时，都会向eureka注册服务信息（名字，地址端口）,然后如果有服务有远程调用需要，它会联系Eureka，然后Eureka提供信息，如果存在多个提供者，则会利用负载均衡算法。至于健康状态，Eureka每30s会从每个服务接受一次信号（心跳续约），如果收不到，该服务的信息就会被剔除。</p><h2 id="5-Eureka实践"><a href="#5-Eureka实践" class="headerlink" title="5. Eureka实践"></a>5. Eureka实践</h2><p>导入依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        导入Eureka依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建启动类,并加入@EnableEurekaServer注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建配置文件，配置eureka</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaserver</span> <span class="comment">#服务名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#eureka地址信息</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8082/eureka</span></span><br></pre></td></tr></table></figure><p>启动eureka</p><p>访问defaultZone: <a href="http://localhost:8082/eureka%EF%BC%8C%E7%9C%8B%E5%88%B0%E4%B8%8B%E9%9D%A2%E7%9A%84%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BB%A3%E8%A1%A8%E6%88%90%E5%8A%9F">http://localhost:8082/eureka，看到下面的控制台代表成功</a></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312211655423.png" alt="image-20231221165535338"></p><h2 id="6-Eureka服务注册"><a href="#6-Eureka服务注册" class="headerlink" title="6. Eureka服务注册"></a>6. Eureka服务注册</h2><p>之前提到过，Eureka是一个中间媒介，所有的服务都会在它上面进行一个注册，同时所有的远程调用都会经过它得到服务提供者，所以接下来要做的是将每个服务都注册到Eureka上</p><p>先引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        Eureka客户端依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置注册信息（本服务的名字，以及Eureka服务的地址），此处以user-service为例，order-service一致</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userserver</span> <span class="comment">#服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#eureka地址信息</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8082/eureka</span></span><br></pre></td></tr></table></figure><p>然后就可以启动看一下是否已经在Eureka注册表里了</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312211957766.png" alt="image-20231221195713695"></p><h2 id="7-怎么使用Eureka"><a href="#7-怎么使用Eureka" class="headerlink" title="7. 怎么使用Eureka"></a>7. 怎么使用Eureka</h2><p>我们之前利用template远程调用时，在url中写的是死代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8081/user/&quot;</span> + order.getUserId();</span><br></pre></td></tr></table></figure><p>有了Eureka后，我们就可以利用服务名称来替代ip地址和端口号部分</p><p>即</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://userserver/user/&quot;</span> + order.getUserId();</span><br></pre></td></tr></table></figure><p>还要在启动类的注册resttemplate函数上加上@LoadBalanced注解用来启动负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    注册RestTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意，这是必须要加的。</p><h2 id="8-Ribbon负载均衡"><a href="#8-Ribbon负载均衡" class="headerlink" title="8. Ribbon负载均衡"></a>8. Ribbon负载均衡</h2><p>首先这个地址<a href="http://userserver/user/...%EF%BC%8C%E6%98%AF%E4%B8%80%E4%B8%AA%E6%97%A0%E6%95%88%E5%9C%B0%E5%9D%80%EF%BC%8C%E5%8D%B3%E6%88%91%E4%BB%AC%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E8%AF%A5%E5%9C%B0%E5%9D%80%E4%B8%8B%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%8C%E8%80%8C%E6%88%91%E4%BB%AC%E6%9C%80%E7%BB%88%E5%8D%B4%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E5%88%B0%E6%88%91%E4%BB%AC%E8%A6%81%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%E4%B8%AD%E9%97%B4%E6%9C%89%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%8B%A6%E6%88%AA%E5%99%A8%E6%8B%A6%E6%88%AA%E4%BA%86%E8%BF%99%E4%B8%AA%E8%AF%B7%E6%B1%82%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BA%A4%E7%BB%99Ribbon%E5%B9%B6%E5%AE%9E%E7%8E%B0%E4%BA%86%E8%A7%A3%E6%9E%90%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BA%A4%E7%BB%99IRule%E6%89%A7%E8%A1%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95%E9%80%89%E6%8B%A9%E4%BA%86%E5%90%88%E9%80%82%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85">http://userserver/user/...，是一个无效地址，即我们无法通过浏览器直接访问该地址下的内容，而我们最终却可以访问到我们要的数据，这是因为中间有负载均衡拦截器拦截了这个请求，然后交给Ribbon并实现了解析，然后交给IRule执行负载均衡算法选择了合适的服务提供者</a></p><h2 id="9-负载均衡策略"><a href="#9-负载均衡策略" class="headerlink" title="9. 负载均衡策略"></a>9. 负载均衡策略</h2><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><p>默认负载均衡策略为轮训<strong>ZoneAvoidanceRule</strong>，怎么改变这个默认策略：</p><p>方法1：<br>自己注入一个(配置类或者启动类中)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：</p><p>在配置文件中针对某项微服务修改（此处针对userserver）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userserver:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure><h2 id="10-Ribbon饥饿加载"><a href="#10-Ribbon饥饿加载" class="headerlink" title="10. Ribbon饥饿加载"></a>10. Ribbon饥饿加载</h2><p>Ribbon默认是懒加载，即第一次访问才创建LoadBalanceClient，请求时间长。饥饿加载会在项目启动时加载，降低第一次访问时的时间。</p><p>在需要饥饿加载的服务配置中加入以下内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">clients:</span> </span><br><span class="line">    <span class="string">-userserver</span>  <span class="comment">#指定对哪个服务饥饿加载，可以多个</span></span><br><span class="line">    <span class="string">-xxxserver</span></span><br></pre></td></tr></table></figure><h2 id="11-Nacos"><a href="#11-Nacos" class="headerlink" title="11. Nacos"></a>11. Nacos</h2><p>Nacos是阿里提供的注册中心，功能类似于Eureka且要更强大，两种注册中心都要学一下</p><h3 id="11-1-安装"><a href="#11-1-安装" class="headerlink" title="11.1 安装"></a>11.1 安装</h3><p>GitHub主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>GitHub的Release下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>安装完成后进行解压</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212256701.png" alt="image-20231221225613653"></p><h3 id="11-2-配置"><a href="#11-2-配置" class="headerlink" title="11.2 配置"></a>11.2 配置</h3><p>conf&#x2F;application.properties这是nacos的配置文件，可以在里面进行一些常规的端口配置</p><h3 id="11-3-启动"><a href="#11-3-启动" class="headerlink" title="11.3 启动"></a>11.3 启动</h3><p>在bin目录下，你可以直接双击startup.cmd</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212258877.png" alt="image-20231221225839838"></p><p>也可以在命令行模式下运行指令</p><blockquote><p>startup.cmd -m standalone</p><p>此处为单机启动</p></blockquote><p>启动界面：<br><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212300066.png" alt="image-20231221230001017"></p><p>然后我们可以访问上面给出的网页，可以看到nacos的界面</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212301899.png" alt="image-20231221230114812"></p><p>默认登录名和密码都是nacos</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212301323.png" alt="image-20231221230141264"></p><p>这就是nacos的界面，之后我们会在这里进行操作</p><p>关闭的话就是运行shutdown.cmd</p><h2 id="12-Nacos快速入门"><a href="#12-Nacos快速入门" class="headerlink" title="12. Nacos快速入门"></a>12. Nacos快速入门</h2><p>首先在项目的父工程中添加spring-cloud-alilbaba管理依赖，进行包管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在服务中添加nacos客户端依赖（注释掉之前的eureka依赖）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos客户端依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后修改配置文件（注释掉eureka）</p><p>配置结束后，正常启动服务，然后启动nacos进入控制台，就会看到两个服务被注册进来了</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212322745.png" alt="image-20231221232205678"></p><p>同样实现了注册中心的功能。</p><h2 id="13-Nacos服务分级储存模型"><a href="#13-Nacos服务分级储存模型" class="headerlink" title="13. Nacos服务分级储存模型"></a>13. Nacos服务分级储存模型</h2><p>实现服务的集群化</p><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212331253.png" alt="image-20210713232522531"></p><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212331260.png" alt="image-20210713232658928"></p><p>杭州机房内的order-service应该优先访问同机房的user-service。</p><p>操作：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment">#nacos 服务端地址</span></span><br><span class="line">  <span class="attr">discovery:</span></span><br><span class="line">    <span class="attr">cluster-name:</span> <span class="string">AH</span></span><br></pre></td></tr></table></figure><h2 id="14-Nacos负载均衡"><a href="#14-Nacos负载均衡" class="headerlink" title="14. Nacos负载均衡"></a>14. Nacos负载均衡</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userserver:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line"><span class="comment">#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule # 负载均衡规则</span></span><br><span class="line">      <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure><blockquote><p>NacosRule优先同集群内随机</p></blockquote><h2 id="15-配置权重"><a href="#15-配置权重" class="headerlink" title="15. 配置权重"></a>15. 配置权重</h2><p>权重可以影响被分配的几率，越大越容易被分配到，这个在nacos中就可以设置</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212347240.png" alt="image-20231221234708178"></p><h2 id="16-环境隔离"><a href="#16-环境隔离" class="headerlink" title="16. 环境隔离"></a>16. 环境隔离</h2><p>Nacos提供了namespace来实现环境隔离功能。</p><ul><li>nacos中可以有多个namespace</li><li>namespace下可以有group、service等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ul><p>方法</p><p>首先创建命名空间：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312212355722.png" alt="image-20231221235551673"></p><p>然后进入到服务的配置文件进行配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment">#nacos 服务端地址</span></span><br><span class="line">  <span class="attr">discovery:</span></span><br><span class="line">    <span class="attr">cluster-name:</span> <span class="string">AH</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">25cd75bc-82c3-4396-ba42-a42a5de77b92</span> <span class="comment">#命名空间id</span></span><br></pre></td></tr></table></figure><p>这样就实现了隔离</p><h2 id="17-Nacos和Eureka相同和不同"><a href="#17-Nacos和Eureka相同和不同" class="headerlink" title="17. Nacos和Eureka相同和不同"></a>17. Nacos和Eureka相同和不同</h2><ul><li>Nacos与eureka的共同点<ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li>Nacos与Eureka的区别<ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul></li></ul><h2 id="18-配置管理"><a href="#18-配置管理" class="headerlink" title="18. 配置管理"></a>18. 配置管理</h2><p>在实际生产过程中，可能会出现频繁修改配置的情况，但是如果修改配置过程中涉及的微服务数量多了，会很麻烦且修改配置的微服务需要重启以生效新的配置，但重启可能会带来很大的损失，所以我们需要Nacos的配置管理，他可以保存服务中一些比较重要的核心配置，服务在启动时只需读取上面的配置，然后结合自身配置组成一套完整的配置文件。通过配置热更新，如果要修改只需要修改Nacos的配置管理，其余微服务就会读取到变化后的配置，然后加以应用，实现热更新。</p><h2 id="19-Nacos实现配置管理"><a href="#19-Nacos实现配置管理" class="headerlink" title="19. Nacos实现配置管理"></a>19. Nacos实现配置管理</h2><p>直接在Nacos控制台里操作</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221646375.png" alt="image-20231222164621257"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221651280.png" alt="image-20231222165131214"></p><h2 id="20-微服务获取Nacos中的配置"><a href="#20-微服务获取Nacos中的配置" class="headerlink" title="20. 微服务获取Nacos中的配置"></a>20. 微服务获取Nacos中的配置</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221700941.png" alt="image-20231222170002889"></p><p>由上面的流程图我们可以看到，bootstrap这一配置文件的优先级是要高于application的，因此我们需要把连接Nacos服务的配置配置到该文件里面，这样Spring会先根据这个配置文件访问到Nacos，并提取到其中的服务，然后在把其中的配置和本地application中的配置合并成完整的配置，这就是整个配置管理的全过程。</p><p>首先导入Nacos配置管理依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos配置管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在resource目录下添加bootstrap.yml文件</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221714999.png" alt="image-20231222171403954"></p><p>然后配置bootstrap，将Nacos服务连接配置，还有想要获取的被Nacos管理的配置信息写进去，注意一定要和Nacos中的名字相对应</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userserver</span> <span class="comment"># 对应配置名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev </span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br></pre></td></tr></table></figure><p>由于application中已经存在了Nacos服务连接配置，所以需要删除，还有原先在application中配置的dateformat</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221718207.png" alt="image-20231222171848160"></p><p>然后验证一下是否已经读到配置了，我们可以利用@Value注解拿到配置文件中的配置</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221725173.png" alt="image-20231222172508121"></p><p>看结果，成功读到：<br><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221725232.png" alt="image-20231222172555188"></p><h2 id="21-配置热更新"><a href="#21-配置热更新" class="headerlink" title="21. 配置热更新"></a>21. 配置热更新</h2><p>热更新即让我们的微服务能实时获取Nacos中变化的配置，而无需重启微服务</p><p>有两种方法</p><p>法一：<br>在@Value注入的类上添加注解@RefreshScope</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221752042.png" alt="image-20231222175209994"></p><p>法二（推荐）:<br>利用@ConfigurationProperties注解自动注入代替@Value注解。</p><p>为此我们可以单独建一个类，来获取配置文件的属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@ConfigurationProperties会自动将符合前缀名并且属性名和该类中的属性一致的配置的值，自动注入到属性中。</p></blockquote><p>获取的话，首先利用@Autowired注入该类，因为已经添加过@Data注解，直接调用get方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(patternProperties.getDateformat());</span><br></pre></td></tr></table></figure><p>然后让我们试验一下</p><p>重启微服务</p><p>先修改Nacos配置管理中的配置</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221801781.png" alt="image-20231222180110737"></p><p>然后再次访问我们写了输出语句的方法，热更新成功</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221801049.png" alt="image-20231222180155006"></p><p>再改一次</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221802694.png" alt="image-20231222180228652"></p><p>再试试，依然成功</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221803418.png" alt="image-20231222180301381"></p><h2 id="22-多环境配置共享"><a href="#22-多环境配置共享" class="headerlink" title="22. 多环境配置共享"></a>22. 多环境配置共享</h2><p>微服务启动时会从Nacos中读取多个配置</p><p>我们可以在Nacos中再加一个配置，格式是name + .yaml</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221823872.png" alt="image-20231222182304821"></p><p>这样这个配置所有环境下的userserver都可以读到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">    <span class="keyword">private</span> String sharedValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们再访问</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221825327.png" alt="image-20231222182521285"></p><p>访问到了两个配置文件中的内容，但实际上当前userserver是dev环境，这说明没有标明环境的配置文件可被多个微服务共享</p><p>优先级的话：<br>环境配置 &gt; 多环境配置 &gt; 本地</p><h2 id="23-Nacos集群"><a href="#23-Nacos集群" class="headerlink" title="23. Nacos集群"></a>23. Nacos集群</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221943020.png" alt="image-20231222194305936"></p><p>举例：</p><p>其中包含3个nacos节点，然后一个负载均衡器代理3个Nacos。这里负载均衡器可以使用nginx。</p><h3 id="23-1-搭建集群"><a href="#23-1-搭建集群" class="headerlink" title="23.1 搭建集群"></a>23.1 搭建集群</h3><h4 id="23-1-1-初始化数据库"><a href="#23-1-1-初始化数据库" class="headerlink" title="23.1.1 初始化数据库"></a>23.1.1 初始化数据库</h4><p>首先新建一个数据库，命名为nacos，而后导入下面的SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">64</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`enabled` <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roles` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="keyword">ASC</span>, `role` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permissions` (</span><br><span class="line">    `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `resource` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `action` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="23-1-2-配置Nacos"><a href="#23-1-2-配置Nacos" class="headerlink" title="23.1.2 配置Nacos"></a>23.1.2 配置Nacos</h4><p>进入nacos的conf目录，修改配置文件cluster.conf.example，重命名为cluster.conf：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312221946748.png" alt="image-20231222194606692"></p><p>然后添加内容（分别对应你三个nacos节点的地址和端口）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:8845</span><br><span class="line">127.0.0.1.8846</span><br><span class="line">127.0.0.1.8847</span><br></pre></td></tr></table></figure><p>然后修改application.properties文件，添加数据库配置，对应自己电脑的数据库地址还有账号密码</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure><p>还有每个nacos的端口号要对应cluster.conf</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8845</span></span><br></pre></td></tr></table></figure><p>（每个nacos都要进行配置）</p><h4 id="23-1-3-启动nacos"><a href="#23-1-3-启动nacos" class="headerlink" title="23.1.3 启动nacos"></a>23.1.3 启动nacos</h4><p>这里直接运行startup.cmd，默认集群启动</p><h4 id="23-1-4-配置nginx"><a href="#23-1-4-配置nginx" class="headerlink" title="23.1.4 配置nginx"></a>23.1.4 配置nginx</h4><p>修改conf&#x2F;nginx.conf文件，配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> nacos-cluster &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8845</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:8846</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:8847</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /nacos &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://nacos-cluster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就使用了nginx反向代理了Nacos</p><h4 id="23-1-5-启动Nginx"><a href="#23-1-5-启动Nginx" class="headerlink" title="23.1.5 启动Nginx"></a>23.1.5 启动Nginx</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start nginx.exe</span><br></pre></td></tr></table></figure><p>而后在浏览器访问：<a href="http://localhost/nacos%E5%8D%B3%E5%8F%AF%E3%80%82">http://localhost/nacos即可。</a></p><p>代码中application.yml文件配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment"># Nacos地址</span></span><br></pre></td></tr></table></figure><p>因为nginx监听80端口</p><h2 id="24-Feign客户端"><a href="#24-Feign客户端" class="headerlink" title="24.Feign客户端"></a>24.Feign客户端</h2><p>Feign是用来替代RestTemplate为服务与服务之间请求搭建桥梁</p><p>我们之前使用RestTemplate，其用法是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        创建url，指向发送请求的地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8081/user/&quot;</span> + order.getUserId();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br></pre></td></tr></table></figure><h2 id="25-使用Feign"><a href="#25-使用Feign" class="headerlink" title="25.使用Feign"></a>25.使用Feign</h2><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在启动类上加注解，启动feign功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br></pre></td></tr></table></figure><p>编写Feign的服务端接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;userserver&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@FeignClient(“userserver”)：里面写访问服务名</p><p>@GetMapping(“&#x2F;user&#x2F;{id}”)：写访问路径，有参数写参数（restful风格）</p></blockquote><p>调用一下试试</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312222049052.png" alt="image-20231222204922970"></p><p>成功查询出带用户信息的订单</p><h2 id="26-Feign优化"><a href="#26-Feign优化" class="headerlink" title="26.Feign优化"></a>26.Feign优化</h2><p>Feign底层发起http请求，依赖于其它的框架。其底层客户端实现包括：</p><p>•URLConnection：默认实现，不支持连接池</p><p>•Apache HttpClient ：支持连接池</p><p>•OKHttp：支持连接池</p><p>因此提高Feign的性能主要手段就是使用<strong>连接池</strong>代替默认的URLConnection。</p><p>首先引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--httpClient的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置连接池</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#开启feign对httpclient支持</span></span><br><span class="line">    <span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment">#最大连接数</span></span><br><span class="line">    <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment">#每个路径的最大连接数</span></span><br></pre></td></tr></table></figure><h2 id="27-Feign最佳实践"><a href="#27-Feign最佳实践" class="headerlink" title="27. Feign最佳实践"></a>27. Feign最佳实践</h2><h3 id="27-1-继承方式"><a href="#27-1-继承方式" class="headerlink" title="27.1 继承方式"></a>27.1 继承方式</h3><p>一样的代码可以通过继承来共享：</p><p>1）定义一个API接口，利用定义方法，并基于SpringMVC注解做声明。</p><p>2）Feign客户端和Controller都继承该接口</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312222112810.png" alt="image-20210714190640857"></p><p>优点：</p><ul><li>简单</li><li>实现了代码共享</li></ul><p>缺点：</p><ul><li><p>服务提供方、服务消费方紧耦合</p></li><li><p>参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解</p></li></ul><h3 id="27-2-抽取方式"><a href="#27-2-抽取方式" class="headerlink" title="27.2 抽取方式"></a>27.2 抽取方式</h3><p>将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用。</p><p>例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用。</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312222116839.png" alt="image-20210714214041796"></p><h2 id="28-抽取方式实践"><a href="#28-抽取方式实践" class="headerlink" title="28. 抽取方式实践"></a>28. 抽取方式实践</h2><p>创建新的模块feign-api，用来放置feign服务</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312222123476.png" alt="image-20231222212324413"></p><p>将原本order-service中的client还有它需要的user实体类提取出来，放到feign-api中，原项目里的就可以删除了</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312222124349.png" alt="image-20231222212417286"></p><p>然后将feign-api以依赖的形式导入到order-service中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后修改启动类的@EnableFeignClients注解，它默认是扫描当前模块的包，由于我们当前项目的client已经提取出去了，所以此处是扫描不到的，因此我们需要修改包扫描位置，改为导入的feign依赖的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(clients = UserClient.class)</span></span><br></pre></td></tr></table></figure><h2 id="29-统一网关"><a href="#29-统一网关" class="headerlink" title="29. 统一网关"></a>29. 统一网关</h2><p>网关功能</p><ul><li>身份认证权限认证</li><li>服务路由，负载均衡（判断是访问哪个功能）</li><li>请求限流</li></ul><p>实现</p><ul><li>gateway</li><li>zuul</li></ul><h2 id="30-网关搭建"><a href="#30-网关搭建" class="headerlink" title="30. 网关搭建"></a>30. 网关搭建</h2><p>创建网关模块，并引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos服务发现依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置路由文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment"># 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 路由id，自定义，只要唯一即可</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userserver</span> <span class="comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://orderserver</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br></pre></td></tr></table></figure><p>这样我们就能从网关访问到其他服务</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312231456471.png" alt="image-20231223145608371"></p><h2 id="31-路由断言predicates"><a href="#31-路由断言predicates" class="headerlink" title="31. 路由断言predicates"></a>31. 路由断言predicates</h2><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p><p>用到哪个去官网查哪个怎么写</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>-  After&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>-  Before&#x3D;2031-04-13T15:14:47.433+08:00[Asia&#x2F;Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>-  Between&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver],  2037-01-21T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie&#x3D;chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header&#x3D;X-Request-Id, \d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>-  Host&#x3D;<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method&#x3D;GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path&#x3D;&#x2F;red&#x2F;{segment},&#x2F;blue&#x2F;**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query&#x3D;name, Jack或者-  Query&#x3D;name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr&#x3D;192.168.1.1&#x2F;24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table><h2 id="32-网关过滤器"><a href="#32-网关过滤器" class="headerlink" title="32. 网关过滤器"></a>32. 网关过滤器</h2><p>过滤器的作用是什么？</p><p>① 对路由的请求或响应做加工处理，比如添加请求头</p><p>② 配置在路由下的过滤器只对当前路由的请求生效</p><p>defaultFilters的作用是什么？</p><p>① 对所有路由都生效的过滤器</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> </span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://userservice</span> </span><br><span class="line">  <span class="attr">predicates:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/user/**</span> </span><br><span class="line">  <span class="attr">filters:</span> <span class="comment"># 过滤器</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">AddRequestHeader=</span> <span class="string">Hello</span> <span class="string">world!</span> <span class="comment"># 添加请求头</span></span><br><span class="line">  <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项,针对所有路由</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Itcast</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span> </span><br></pre></td></tr></table></figure><h2 id="33-全局过滤器"><a href="#33-全局过滤器" class="headerlink" title="33. 全局过滤器"></a>33. 全局过滤器</h2><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。（之前说的那个是官方固定的几个写法）</p><p>首先创建过滤器接口，继承GlobalFilter，并实现filter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己写拦截器接口中的拦截逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line"><span class="comment">//        此处模拟实现查看用户身份的过滤器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        1.获取请求参数</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        MultiValueMap&lt;String, String&gt; queryParams = request.getQueryParams();</span><br><span class="line"><span class="comment">//        2.获取其中的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> queryParams.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line"><span class="comment">//        3.判断其身份是否是admin</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(authorization))&#123;</span><br><span class="line"><span class="comment">//            放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        拦截</span></span><br><span class="line"><span class="comment">//        拦截前设置状态码，告知用户原因</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类上加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(-1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br></pre></td></tr></table></figure><blockquote><p>Order是拦截器的访问顺序</p></blockquote><p>然后重启网关，再次访问</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312231547631.png" alt="image-20231223154737500" style="zoom:50%;" /><p>发现无法访问了，再加上我们刚刚设置的请求参数，成功放行</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312231548950.png" alt="image-20231223154840861"></p><p>（犯了一个错，创建gateway启动类的时候忘了，启动类应该在最外层，因为包扫描默认扫描的是启动类的同一目录下的内容，导致我配置的拦截器失效，把启动类放到最外层就可以了）</p><h2 id="34-过滤器排序规则"><a href="#34-过滤器排序规则" class="headerlink" title="34. 过滤器排序规则"></a>34. 过滤器排序规则</h2><p>排序的规则是什么呢？</p><ul><li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li><li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li></ul><h2 id="35-解决跨域问题"><a href="#35-解决跨域问题" class="headerlink" title="35. 解决跨域问题"></a>35. 解决跨域问题</h2><p>在gateway服务的application.yml文件中，添加下面的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 。。。</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求 </span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:8090&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure><h2 id="36-RabbitMQ"><a href="#36-RabbitMQ" class="headerlink" title="36. RabbitMQ"></a>36. RabbitMQ</h2><p>微服务间通讯有同步和异步两种方式：</p><p>同步通讯：就像打电话，需要实时响应。</p><p>异步通讯：就像发邮件，不需要马上回复。</p><h3 id="36-1-同步调用"><a href="#36-1-同步调用" class="headerlink" title="36.1 同步调用"></a>36.1 同步调用</h3><p>同步调用的优点：</p><ul><li>时效性较强，可以立即得到结果</li></ul><p>同步调用的问题：</p><ul><li>耦合度高</li><li>性能和吞吐能力下降</li><li>有额外的资源消耗</li><li>有级联失败问题</li></ul><h3 id="36-2-异步调用"><a href="#36-2-异步调用" class="headerlink" title="36.2 异步调用"></a>36.2 异步调用</h3><p>好处：</p><ul><li><p>吞吐量提升：无需等待订阅者处理完成，响应更快速</p></li><li><p>故障隔离：服务没有直接调用，不存在级联失败问题</p></li><li><p>调用间没有阻塞，不会造成无效的资源占用</p></li><li><p>耦合度极低，每个服务都可以灵活插拔，可替换</p></li><li><p>流量削峰：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件</p></li></ul><p>缺点：</p><ul><li>架构复杂了，业务没有明显的流程线，不好管理</li><li>需要依赖于Broker的可靠、安全、性能</li></ul><h3 id="36-3-RabbitMQ安装"><a href="#36-3-RabbitMQ安装" class="headerlink" title="36.3 RabbitMQ安装"></a>36.3 RabbitMQ安装</h3><p>推荐使用docker镜像</p><p>安装完镜像后运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=linfeng \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=123456 \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3-management</span><br></pre></td></tr></table></figure><blockquote><p>用户名：RABBITMQ_DEFAULT_USER&#x3D;linfeng<br>密码：RABBITMQ_DEFAULT_PASS&#x3D;123456</p><p>15672是可视化平台的访问端口 </p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312261403332.png" alt="image-20231226140317235"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312261403065.png" alt="image-20231226140345951"></p><h3 id="36-4-消息模型"><a href="#36-4-消息模型" class="headerlink" title="36.4 消息模型"></a>36.4 消息模型</h3><p>RabbitMQ官方提供了5个不同的Demo示例，对应了不同的消息模型：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312261411408.png" alt="image-20210717163332646"></p><h3 id="36-5-RMQ的简单实现"><a href="#36-5-RMQ的简单实现" class="headerlink" title="36.5 RMQ的简单实现"></a>36.5 RMQ的简单实现</h3><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">// 1.建立连接</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.10.128&quot;</span>);</span><br><span class="line">    factory.setPort(<span class="number">5672</span>);</span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    factory.setUsername(<span class="string">&quot;linfeng&quot;</span>);</span><br><span class="line">    factory.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="comment">// 1.2.建立连接</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.创建队列</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>; <span class="comment">//发送和接收都要创建队列，因为不确定哪个先执行，是一种保险措施</span></span><br><span class="line">    channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.发送消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, rabbitmq!&quot;</span>;</span><br><span class="line">    channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">    System.out.println(<span class="string">&quot;发送消息成功：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.关闭通道和连接</span></span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">// 1.建立连接</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.10.128&quot;</span>);</span><br><span class="line">    factory.setPort(<span class="number">5672</span>);</span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    factory.setUsername(<span class="string">&quot;linfeng&quot;</span>);</span><br><span class="line">    factory.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="comment">// 1.2.建立连接</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.创建队列</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.订阅消息</span></span><br><span class="line">    channel.basicConsume(queueName, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span><br><span class="line"><span class="params">                                   AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="comment">// 5.处理消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;等待接收消息。。。。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="36-6-测试结果"><a href="#36-6-测试结果" class="headerlink" title="36.6 测试结果"></a>36.6 测试结果</h3><p>运行发送端：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312261428101.png" alt="image-20231226142826006"></p><p>同时在RabbitMQ控制台中就能看到队列中有内容</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312261429129.png" alt="image-20231226142917051"></p><p>运行接受端</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312261430042.png" alt="image-20231226143006974"></p><h2 id="37-SpringAMQP（hello-world队列）"><a href="#37-SpringAMQP（hello-world队列）" class="headerlink" title="37. SpringAMQP（hello world队列）"></a>37. SpringAMQP（hello world队列）</h2><p>之前的实现方法是RabbitMQ官方的实现方法，可以看到代码非常多，很复杂。</p><p>SpringAMQP是基于RabbitMQ封装的一套模板，并且还利用SpringBoot对其实现了自动装配，使用起来非常方便。</p><p>SpringAMQP提供了三个功能：</p><ul><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听器模式，异步接收消息</li><li>封装了RabbitTemplate工具，用于发送消息</li></ul><h3 id="37-1-使用SpringAMQP"><a href="#37-1-使用SpringAMQP" class="headerlink" title="37.1 使用SpringAMQP"></a>37.1 使用SpringAMQP</h3><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加mq连接配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.128</span> <span class="comment">#MQ地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">linfeng</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>编写发送代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,linfeng!hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收端也要配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.128</span> <span class="comment">#MQ地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">linfeng</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>接受消息逻辑，编写监听类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabblitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerQ</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收到消息：&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行springboot项目，便会自动监听</p><h3 id="37-2-使用SpringAMQP（工作队列）"><a href="#37-2-使用SpringAMQP（工作队列）" class="headerlink" title="37.2 使用SpringAMQP（工作队列）"></a>37.2 使用SpringAMQP（工作队列）</h3><p>Work queues，也被称为（Task queues），任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312261500704.png" alt="image-20210717164238910"></p><p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。</p><p>此时就可以使用work 模型，多个消费者共同处理消息处理，速度就能大大提高了。</p><p>在多消息时，两个接收端会一起接受，差不多就是下图这种情况</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312261537655.png" alt="image-20231226153738574"></p><h3 id="37-3-消息预取限制"><a href="#37-3-消息预取限制" class="headerlink" title="37.3 消息预取限制"></a>37.3 消息预取限制</h3><p>因为队列中的消息会提前分配到消费者中，分配的量是由消息预取值决定的，默认是无限，但这没有考虑根据消费者的能力进行考虑。</p><p>可以在配置文件中调整</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.128</span> <span class="comment">#MQ地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">linfeng</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="38-发布订阅模式"><a href="#38-发布订阅模式" class="headerlink" title="38. 发布订阅模式"></a>38. 发布订阅模式</h2><p>发布订阅的模型如图：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312261600140.png" alt="image-20210717165309625"></p><p>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li><li>Consumer：消费者，与以前一样，订阅队列，没有变化</li><li>Queue：消息队列也与以前一样，接收消息、缓存消息。</li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h3 id="38-1-Fanout-Exchange-广发"><a href="#38-1-Fanout-Exchange-广发" class="headerlink" title="38.1 Fanout Exchange 广发"></a>38.1 Fanout Exchange 广发</h3><p>该种交换价接收到的消息会转发给所有于其绑定的队列上</p><p>绑定过程如下，新建一个交换机配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    交换机名 linfeng.fanout</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;linfeng.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    第一个队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQ1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.q1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    第二个队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQ2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.q2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding</span><span class="params">(Queue fanoutQ1,FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">                BindingBuilder.bind(fanoutQ1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    第二次绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding2</span><span class="params">(Queue fanoutQ2,FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">                BindingBuilder.bind(fanoutQ2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收消息端代码没什么变化，listener队列名即可</p><p>发送端将原先的队列名位置改为交换机名，发送方法需要routingKey（当前设置为空）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendFanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        交换机名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangename</span> <span class="operator">=</span> <span class="string">&quot;linfeng.fanout&quot;</span>;</span><br><span class="line"><span class="comment">//        消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;hello fanout exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangename,<span class="string">&quot;&quot;</span>,msg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果就是两个消费者哦度收到了同样的消息</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312261631686.png" alt="image-20231226163113611"></p><h3 id="38-2-DirectExchange-指定路由"><a href="#38-2-DirectExchange-指定路由" class="headerlink" title="38.2 DirectExchange 指定路由"></a>38.2 DirectExchange 指定路由</h3><p>每个Queue都会与Exchange设置一个BindingKey，发布者发送消息时也会指定一个RoutingKey，然后exchange将消息转发到和RoutingKey一致的BindingKey所指的消息队列上，另外不同Queue可以指定相同key</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312262059031.png" alt="image-20210717170223317"></p><p>首先是创建交换机，然后将它和消息队列进行绑定，之前我们是用@Bean来实现的，太麻烦，这里提出改进方法，用注解的形式直接完成创建，到绑定，到指定key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">        bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name=&quot;direct.q1&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name=&quot;linfeng.direct&quot;,type= ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">        key=&#123;&quot;red&quot;,&quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQ1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接收到了：&quot;</span> + msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就会自动创建交换机和绑定关系</p><p>下面写发送代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangename</span> <span class="operator">=</span> <span class="string">&quot;linfeng.direct&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;hello Direct Exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangename,<span class="string">&quot;red&quot;</span>,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>rabbitTemplate.convertAndSend(exchangename,”red”,msg);</p><p>此处的red就是之前定义的key，因为red是两个队列都绑定的key，所以本此消息类似于群发</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312262125518.png" alt="image-20231226212541464"></p><p>如果将key改为blue</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312262126954.png" alt="image-20231226212602908"></p><p>只有2收到了</p><h3 id="38-3-发布订阅TopicExchange"><a href="#38-3-发布订阅TopicExchange" class="headerlink" title="38.3 发布订阅TopicExchange"></a>38.3 发布订阅TopicExchange</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p> 通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><p><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></p><p><code>item.*</code>：只能匹配<code>item.spu</code></p><p>​     </p><p>图示：</p><p> <img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312262132008.png" alt="image-20210717170705380"></p><p>解释：</p><ul><li>Queue1：绑定的是<code>china.#</code> ，因此凡是以 <code>china.</code>开头的<code>routing key</code> 都会被匹配到。包括china.news和china.weather</li><li>Queue2：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配。包括china.news和japan.news</li></ul><p>举例实践一把：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">        bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">                value = @Queue(name = &quot;topic.q1&quot;),</span></span><br><span class="line"><span class="meta">                exchange = @Exchange(name = &quot;linfeng.topic&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">                key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQ1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;1接收到的消息：&quot;</span> + msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">        bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">                value = @Queue(name = &quot;topic.q2&quot;),</span></span><br><span class="line"><span class="meta">                exchange = @Exchange(name = &quot;linfeng.topic&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">                key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQ2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;2接收到的消息：&quot;</span> + msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单绑定两个，和之前的设置差不多，下面是发送端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendTopicExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangename</span> <span class="operator">=</span> <span class="string">&quot;linfeng.topic&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangename,<span class="string">&quot;china.huainan&quot;</span>,msg + <span class="string">&quot;china.huainan&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定的是china.huainan，很显然符合key：china.#</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312262142315.png" alt="image-20231226214232259"></p><p>如果改为huainan.news，很显然会匹配到Q2</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312262143963.png" alt="image-20231226214333914"></p><h2 id="39-消息转换器"><a href="#39-消息转换器" class="headerlink" title="39. 消息转换器"></a>39. 消息转换器</h2><p>Spring会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312262152828.png" alt="image-20200525170410401"></p><p>只不过，默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p><ul><li>数据体积过大</li><li>有安全漏洞</li><li>可读性差</li></ul><p>推荐使用json转换器</p><h3 id="39-1-json转换器配置"><a href="#39-1-json转换器配置" class="headerlink" title="39.1 json转换器配置"></a>39.1 json转换器配置</h3><p>在publisher和consumer两个服务中都引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置消息转换器。</p><p>在启动类中添加一个Bean即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx入门</title>
      <link href="/2023/12/09/Nginx%E5%85%A5%E9%97%A8/"/>
      <url>/2023/12/09/Nginx%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx入门"><a href="#Nginx入门" class="headerlink" title="Nginx入门"></a>Nginx入门</h1><blockquote><p>部分词条来自百度百科</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Nginx是一款轻量级的Web 服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>ubuntu下：</p><blockquote><p>&#x2F;usr&#x2F;sbin&#x2F;nginx：主程序，启动文件<br>&#x2F;etc&#x2F;nginx：存放配置文件<br>&#x2F;var&#x2F;www&#x2F;html：存放项目目录<br>&#x2F;var&#x2F;log&#x2F;nginx：存放日志  </p></blockquote><p>启动：</p><p>在sbin目录下</p><blockquote><p>.&#x2F;nginx</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312092004100.png" alt="image-20231209200428025"></p><p>启动后我们就可以通过虚拟机的ip地址访问到nginx的默认页面（如果访问不到，请关闭linux防火墙）</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312092008547.png" alt="image-20231209200809504"></p><p>关闭nginx</p><blockquote><p>.&#x2F;nginx -s stop</p></blockquote><p>重新加载nginx</p><blockquote><p>.&#x2F;niginx -s reload</p></blockquote><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>在etc&#x2F;profile文件中追加：<br><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312092022860.png" alt="image-20231209202204827"></p><blockquote><p>&#x2F;user&#x2F;sbin（你的nginx启动器所在目录）</p></blockquote><p>这样在所有目录下都可以启动nginx了（不用.&#x2F;nginx）</p><h2 id="部署静态资源"><a href="#部署静态资源" class="headerlink" title="部署静态资源"></a>部署静态资源</h2><p>把静态html放到&#x2F;var&#x2F;www&#x2F;html下即可</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql主从复制</title>
      <link href="/2023/12/07/Mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2023/12/07/Mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql主从复制"><a href="#Mysql主从复制" class="headerlink" title="Mysql主从复制"></a>Mysql主从复制</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>当所有的读写操作都集中在一台mysql服务器上时，会使得该台服务器负载增大，其次是，当数据全部集中到一台服务器上，且没有其他服务器做备份的话，一旦发生事故导致数据丢失，会带来巨大的损失。要想解决这两个问题，就引出了Mysql主从复制的功能，即将主服务器上的数据“备份”一份，放到从服务器上，然后让从服务器也承担一部分数据库功能，比如专门查询，这样既缓解了一个服务器的压力，又能存在备份。</p><h2 id="框架图"><a href="#框架图" class="headerlink" title="框架图"></a>框架图</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312072123240.png" alt="image-20231207212310135"></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>主库将所有的写操作记录到binlog日志中并生成一个log dump线程，将binlog日志传给从库的I&#x2F;O线程。</li><li>从库的IO线程会读取主库的binlog日志，然后将读到的日志写入relaylog（中继日志）中</li><li>从库的sql线程再读取relaylog然后复现日志中的sql操作，达成主从数据一致</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="两台服务器，分别配置Mysql"><a href="#两台服务器，分别配置Mysql" class="headerlink" title="两台服务器，分别配置Mysql"></a>两台服务器，分别配置Mysql</h3><p>比如：<br>主库： 192.168.138.100</p><p>从库： 192.168.138.101</p><h3 id="配置主库"><a href="#配置主库" class="headerlink" title="配置主库"></a>配置主库</h3><p>修改配置文件 &#x2F;etc&#x2F;my.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">  server-id=11</span><br><span class="line">  log-bin=mysql-bin#添加，主服务器开启二进制日志</span><br><span class="line">  binlog_format=mixed</span><br></pre></td></tr></table></figure><p>然后重启服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>登录数据库，然后为从库分配一个身份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p *** </span><br><span class="line">grant replication slave on *.* to &#x27;名字&#x27;@&#x27;%&#x27; identified by &#x27;123456   #给从服务器授权</span><br><span class="line">flush privileges;</span><br><span class="line">show master status;  #查看用户状态</span><br></pre></td></tr></table></figure><h3 id="配置从库"><a href="#配置从库" class="headerlink" title="配置从库"></a>配置从库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">  server-id = 22#修改，注意id与Master的不同，两个slave的id也要不同</span><br><span class="line">  relay-log=relay-log-bin#开启中继日志，从主服务器上同步日志文件记录到本地</span><br><span class="line">  relay-log-index=relay-log-bin.index#定义中继日志文件的位置和名称，一般和relay-log在同一目录</span><br></pre></td></tr></table></figure><p>重启服务，并登录，然后连接到主库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br><span class="line">mysql -u root -p***</span><br><span class="line">change master to master_host=&#x27;192.168.138.100&#x27;,master_user=&#x27;名字&#x27;,master_password=&#x27;123456&#x27;,master_log_file=&#x27;mysql-bin.000002&#x27;,master_log_pos=604;#配置同步，注意 master_log_file 和 master_log_pos 的值要与Master查询的一致</span><br><span class="line">start slave;#启动同步，如有报错执行 reset </span><br><span class="line">show slave status/G#查看 slave 状态</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis入门</title>
      <link href="/2023/12/03/Redis%E5%85%A5%E9%97%A8/"/>
      <url>/2023/12/03/Redis%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h1><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312031922774.png" alt="image-20231203192247704"></p><h2 id="设置连接密码"><a href="#设置连接密码" class="headerlink" title="设置连接密码"></a>设置连接密码</h2><p>打开redis根目录下的redis.windows.conf，找到requirepass这一行，可以看到其默认是注释掉的，解开注释，然后输入自己想要设置的密码保存就可以了。</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312031924487.png" alt="image-20231203192448458"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312031932639.png" alt="image-20231203193201603"></p><p>设置密码后，在输入命令时会提示没有认证</p><p>输入密码：<br><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312031932293.png" alt="image-20231203193253266"></p><p>当然也可以在登录的时候输入密码：<br><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312031934763.png" alt="image-20231203193421726"></p><p>虽然会提示不安全</p><h2 id="设置远程连接"><a href="#设置远程连接" class="headerlink" title="设置远程连接"></a>设置远程连接</h2><p>完整的登录命令</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312031936908.png" alt="image-20231203193651881"></p><blockquote><p>redis-cli.exe -h localhost -p 6379 -a 123456</p><p>-h :加IP地址</p><p>-p :加端口号</p><p>-a : 加密码</p></blockquote><p>要想实现远程连接，需要再次打开配置文件，在里面搜索下面这条命令：<br><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312031952780.png" alt="image-20231203195216753"></p><p>该命令意思是只允许127.0.0.1连接，直接注释掉然后保存退出。</p><h2 id="Redis常用数据类型"><a href="#Redis常用数据类型" class="headerlink" title="Redis常用数据类型"></a>Redis常用数据类型</h2><p>Redis里面存储的是key-value结构的数据，其中key为字符串，value可以是一下几种数据类型：</p><ol><li>字符串string</li><li>哈希 hash (用来存储对象)</li><li>列表 list </li><li>集合 set</li><li>有序集合 sorted set</li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>string类型：</p><ul><li>set key value ：设置键值</li><li>get key ： 获得键对应的值</li><li>setex key seconds value ： 设置key值，并在seconds秒后过期</li><li>setnx key value ：当key不存在时才创建该键值对</li><li>del key ： 删除</li></ul><p>hash类型</p><ul><li>hset key field value ： 将哈希表key中的字段field的值设为value</li><li>hget key field ： 获取指定字段</li><li>hdel key field ： 删除字段</li><li>hkeys key ： 获取哈希表所有字段</li><li>hvals key： 获取所有值</li><li>hgetall key ： 获取所有字段和值</li></ul><p>List类型</p><ul><li>lpush key value: 插入（头插）</li><li>lrange key start stop ：获取范围内的元素 （0 -1是获取全部）</li><li>rpop key : 移除并获取最后一个</li><li>llen key ：获取长度</li><li>brpop key timeout : 移除并获取最后一个，如果获取不到会一直堵塞到tiemout结束</li></ul><p>set类型</p><ul><li>sadd key member ： 向集合中添加成员</li><li>smembers key ：返回集合中所有成员</li><li>scard key ：获取成员数</li><li>sinter key1 key2 ：返回给定集合的交集</li><li>sunion key1 key2 ：返回给定集合的并集</li><li>sdiff key1 key2 ：差集</li><li>srem key member ：移除元素</li></ul><p>sorted set类型</p><ul><li>zadd key score member：添加一个成员（string）并指定其分数为score(double)，分数可以理解为优先级，优先级越大排的越后。</li><li>zrange key start stop ：返回区间内的成员</li><li>zincrby key increment member ：对某个成员的分数加increment</li><li>zrem key member ：删除</li></ul><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><ul><li>keys pattern查到所有给定key</li><li>exists key         检查给定key是否存在</li><li>type key          返回key存储的值类型·</li><li>ttl key              返回给定key的剩余生存时间</li><li>del key             key存在则删除key</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux教程</title>
      <link href="/2023/11/27/Linux%E6%95%99%E7%A8%8B/"/>
      <url>/2023/11/27/Linux%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux教程"><a href="#Linux教程" class="headerlink" title="Linux教程"></a>Linux教程</h1><p>环境为ubuntu20</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>ls</td><td>查看当前目录下的内容</td></tr><tr><td>2</td><td>pwd</td><td>查看当前所在目录</td></tr><tr><td>3</td><td>cd [目录名]</td><td>切换目录</td></tr><tr><td>4</td><td>touch [文件名]</td><td>如果文件不存在，则创建</td></tr><tr><td>5</td><td>mkdir [目录名]</td><td>创建目录</td></tr><tr><td>6</td><td>rm [文件名]</td><td>删除文件</td></tr></tbody></table><p>命令使用小技巧</p><blockquote><p>tab 自动补全 连续两次tab给出操作提示</p><p>上下箭头给出历史命令</p><p>clear 或者 ctrl + l清屏</p></blockquote><p>命令格式</p><p>command [-options] [parameter]</p><blockquote><p>[-options] : 选项，对命令进行控制</p><p>[parameter]：命令所需参数</p></blockquote><h3 id="ls-命令"><a href="#ls-命令" class="headerlink" title="ls 命令"></a>ls 命令</h3><p>l [-a|-l|-al] [dir]</p><blockquote><p>-a: 列出所有</p><p>-l：详细信息</p></blockquote><p>ls -l 可以简写为 ll</p><h3 id="cd-命令"><a href="#cd-命令" class="headerlink" title="cd 命令"></a>cd 命令</h3><p>cd [dirName]</p><blockquote><p>特殊符号：</p><p>~：home目录</p><p>. :当前目录</p><p>.. :上一级</p></blockquote><h3 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h3><p>cat [-n] fileName</p><blockquote><p>-n: 编号</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311272245843.png" alt="image-20231127224510781"></p><h3 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h3><p>more filename</p><blockquote><p>已分页形式展示文件内容</p><p>回车向下一行</p><p>空格向下一屏</p><p>b  返回上一屏</p><p>q 或 ctrl + c 退出</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311272249458.png" alt="image-20231127224920411"></p><h3 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h3><p>tail [-f] filename</p><blockquote><p>查看文件末尾</p><p>-f: 动态读取文件末尾，并输出</p><p>-行数: 读取几行</p></blockquote><h3 id="mkdir-命令"><a href="#mkdir-命令" class="headerlink" title="mkdir 命令"></a>mkdir 命令</h3><p>mkdir [-p] 目录</p><blockquote><p>-p：加了 -p 可以创建多层目录</p></blockquote><h3 id="rmdir-命令"><a href="#rmdir-命令" class="headerlink" title="rmdir 命令"></a>rmdir 命令</h3><p>rmdir [-p] 目录</p><blockquote><p>-p：子目录删除使父目录为空，则一并删除</p><p>rmdir + 名称*：删除以名称开头的所有目录</p></blockquote><p>rm命令</p><p>rm [-rf] name</p><blockquote><p>删除文件或者目录</p><p>-r：删除目录和其中的文件（递归删除）</p><p>-f：无需确认，直接删</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311272302724.png" alt="image-20231127230230690"></p><h3 id="cp-命令"><a href="#cp-命令" class="headerlink" title="cp 命令"></a>cp 命令</h3><p>cp [-r] source dest</p><blockquote><p>将文件或者目录从source复制到dest</p><p>-r:如果是目录则需要，复制目录下所有</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311272306073.png" alt="image-20231127230616030"></p><blockquote><p>cp -r lf&#x2F;* ..&#x2F; ：lf&#x2F;* 指复制lf目录下的文件</p></blockquote><h3 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h3><p>mv source dest</p><blockquote><p>改名目录或者文件，或者移动</p><p>改名：mv hello.txt hi.txt</p><p>​mv lf&#x2F; linf&#x2F; 如果linf&#x2F;不存在，则改名，存在则移动</p></blockquote><h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3><p>tar [-zcxvf] fileName [files]</p><p>文件后缀为.tar表示仅打包，.tar.gz表示打包加压缩</p><blockquote><p>-z:表示用gzip压缩或者解压</p><p>-c：创建新的包文件</p><p>-x:从包文件还原文件</p><p>-v:显示命令执行过程</p><p>-f: 指定包文件名称</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311291024758.png" alt="image-20231129102450682"></p><p>常用组合：</p><p>-cvf</p><p>打包 + 显示过程 + 命名</p><p>-zcvf</p><p>打包 + 压缩 + 显示过程 + 命名</p><p>-xvf </p><p>解压 + 过程 + 文件名</p><h3 id="vi命令"><a href="#vi命令" class="headerlink" title="vi命令"></a>vi命令</h3><p>vi + filename</p><blockquote><p>对文本内容进行编辑</p></blockquote><p>还有个类似的叫vim，他能让文本内容出现颜色变化（可以解析我们的文本）</p><p>vim需要自己下载：yum install vim</p><p>打开的文件有三种模式：<br>命令模式：<br>能查看或者移动光标，默认进入命令模式</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311291037994.png" alt="image-20231129103754932"></p><p>插入模式：<br>按下a,i,o任意一个，进入插入模式，此时可以对文件内容进行插入</p><p>按esc退出</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311291039293.png" alt="image-20231129103908254"></p><p>底行模式</p><p>可以对文件内容查找，显示行号，退出</p><p>按下 ：或者&#x2F;</p><p>&#x2F; ： 可以对文件内容进行查找</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311291042996.png" alt="image-20231129104216958"></p><p>：：wq保存并退出，q！不保存退出，set nu显示行号</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311291042864.png" alt="image-20231129104240827"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311291043271.png" alt="image-20231129104301236"></p><h3 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h3><p>find dirName -name fileName</p><blockquote><p>dirname ：目标目录</p><p>filename：查找文件  可以利用通配符比如：*.cpp 所有c++文件</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311291047829.png" alt="image-20231129104719795"></p><h3 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h3><p>grep word filename</p><blockquote><p>从指定文件中查找内容</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311291049770.png" alt="image-20231129104939740"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git教程</title>
      <link href="/2023/11/23/Git%E6%95%99%E7%A8%8B/"/>
      <url>/2023/11/23/Git%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础教学笔记"><a href="#Git基础教学笔记" class="headerlink" title="Git基础教学笔记"></a>Git基础教学笔记</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311232227203.png" alt="image-20231123222710137" style="zoom:50%;" /><p>git是一个分布式版本控制工具，通常用来管理源代码。</p><p>git可以管理两种仓库：本地仓库 &amp; 远程仓库</p><blockquote><p>基本的命令有：<br>commit : 提交，将本地文件和版本信息保存到本地仓库</p><p>push:推送，将本地仓库上传到远程仓库</p><p>pull：拉取，下载远程仓库到本地仓库</p></blockquote><h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>安装完git后，首先要做的就是配置你的用户名和email地址。</p><p>命令：</p><blockquote><p>git config –global user.name “***”</p><p>git config –global user.email “***”</p></blockquote><p>查看配置信息</p><blockquote><p>git config –list</p></blockquote><h2 id="本地初始化仓库"><a href="#本地初始化仓库" class="headerlink" title="本地初始化仓库"></a>本地初始化仓库</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>本地运行</p><blockquote><p>git init</p></blockquote><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>通过命令克隆已有仓库</p><blockquote><p>git clone + “地址”</p></blockquote><h2 id="工作区，暂存区，版本库"><a href="#工作区，暂存区，版本库" class="headerlink" title="工作区，暂存区，版本库"></a>工作区，暂存区，版本库</h2><p>版本库：就是我们本地目录中的.git文件，里面包含了很多配置信息，日志，和文件版本信息（不要动）</p><p>工作区：包含.git的文件目录</p><p>暂存区：位于.git的index下，用于临时保存修改文件</p><h2 id="文件的两种状态"><a href="#文件的两种状态" class="headerlink" title="文件的两种状态"></a>文件的两种状态</h2><ul><li>untracked未跟踪（未纳入版本控制）(git不会管理该文件)</li><li>tracked已跟踪</li></ul><ol><li>unmodified 未修改</li><li>modified已修改</li><li>staged暂存</li></ol><h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><h3 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h3><blockquote><p>git status查看文件状态（看文件是否被跟踪）</p><p>git add将修改加入暂存区</p><p>git reset  取消暂存或者切换到指定版本</p><p>git commit  提交暂存区文件到版本库</p><p>git log  日志</p></blockquote><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><blockquote><p>git remote查看远程仓库</p><p>git remote add 添加远程仓库（如果是从已有仓库克隆，则本地仓库自动关联远程，如果是本地init，则需要添加 格式：git remote add origin + 地址）</p><p>git clone     从远程仓库克隆</p><p>git pull从远程仓库拉取</p><p>git push  推送到远程仓库（git push origin master）</p></blockquote><p>注意：git pull过程中，如果是一个本地init的仓库通过add关联远程，然后pull远程仓库，如果本地init的仓库已经存在文件，那么拉取时会报错，解决方法：在git pull 后加–allow-unrelated-histories</p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>默认master</p><blockquote><p>git branch查看分支</p><p>git branch name创建分支</p><p>git checkout name切换分支</p><p>git push origin name推送到origin的name分支上</p><p>git merge name合并分支</p></blockquote><h3 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h3><p>冲突原因：两个分支修改了同个文件的同一位置</p><ol><li>找到冲突文件</li><li>修改冲突位置（留哪一段）</li><li>保存</li><li>git add + 冲突文件</li><li>git commit -m  -i</li></ol><p>避免冲突：及时git pull拉取最新仓库</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>可以看做版本号</p><p>命令</p><blockquote><p>git tag列出已有标签</p><p>git tag name创建标签</p><p>git push origin 标签名推送标签</p><p>git checkout -b “branch” “name” 检出标签（branch名随便，它将作为你检出标签后存放的分支名，检出和版本回退差不多）</p></blockquote><p>标签和分支差别：标签是静态的，他会永远确认一个仓库的状态；分支是动态的</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣阶段性总结（1~30）</title>
      <link href="/2023/11/14/%E5%8A%9B%E6%89%A3%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93%EF%BC%881-30%EF%BC%89/"/>
      <url>/2023/11/14/%E5%8A%9B%E6%89%A3%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93%EF%BC%881-30%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="刷题阶段性回顾（Day1-30）"><a href="#刷题阶段性回顾（Day1-30）" class="headerlink" title="刷题阶段性回顾（Day1~30）"></a>刷题阶段性回顾（Day1~30）</h1><h2 id="Day1合并两个有序数组"><a href="#Day1合并两个有序数组" class="headerlink" title="Day1合并两个有序数组"></a>Day1<a href="https://leetcode.cn/problems/merge-sorted-array/">合并两个有序数组</a></h2><p>题目：给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p><p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><p><strong>注意：</strong>最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p><p>回顾解读：<br>本题关键就是合并后的数组也是有序的，顾设两个指针i,j分别用来遍历nums1和nums2,将其中的较小（或大）者插入到新数组中，同时做插入的数组指针进行移动，不做插入的不移动。</p><p>有个关键就是，在循环结束后，可能会存在某个数组中的值还有剩余，此时需要再设置循环，将剩余的值插入的新数组中。</p><p>收获：</p><p>vector数组的创建方法：vector<int> nums(m + n);</p><h2 id="Day2移除元素"><a href="#Day2移除元素" class="headerlink" title="Day2移除元素"></a>Day2<a href="https://leetcode.cn/problems/remove-element/">移除元素</a></h2><p>题目：给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong>。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>回顾解读：<br>题目要求原地移除，并且补充不需要考虑数组中超出新长度后面的元素。很显然是让我们通过把非val的数移到到val处，最终实现数组尾部都是val的结果。</p><p>我的思路遍历数组，遇到val的时候就进行循环从val后第n个元素开始判断，是否是val，是n就自增，不是则交换（实际上赋值也可以）。n设置的是一个不会重置的变量，因为一旦val连续出现，且最终我们会把遇到的第一个非val的数换到i处，所以n的值会永久变大，然后在每次往后找非val的数时，i和n中间的就没必要再遍历了，因为肯定都是val，这个解题思路要优于力扣官方给出的题解。</p>]]></content>
      
      
      <categories>
          
          <category> 算法总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day34</title>
      <link href="/2023/11/13/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day34/"/>
      <url>/2023/11/13/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day34/</url>
      
        <content type="html"><![CDATA[<p><em><u>跳脱常规激发更多的创造力，同时可以造就不凡的成功。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/rotate-image/">旋转图像</a></p><p>给定一个 <em>n</em> × <em>n</em> 的二维矩阵 <code>matrix</code> 表示一个图像。请你将图像顺时针旋转 90 度。</p><p>你必须在**<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong> 使用另一个矩阵来旋转图像。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (n + <span class="number">1</span>) / <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="type">int</span> tmp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[n - <span class="number">1</span> - j][i];</span><br><span class="line">                matrix[n - <span class="number">1</span> - j][i] = matrix[n - <span class="number">1</span> - i][n - <span class="number">1</span> - j];</span><br><span class="line">                matrix[n - <span class="number">1</span> - i][n - <span class="number">1</span> - j] = matrix[j][n - <span class="number">1</span> - i];</span><br><span class="line">                matrix[j][n - <span class="number">1</span> - i] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311131957045.png" alt="image-20231113195754992"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>题目要求我们原地旋转，所以只能通过找规律来实现，有如下规律：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311131958884.png" alt="image-20231113195857844"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311132001389.png" alt="image-20231113200128356"></p><p>每次按以上规律交换即可。</p><p>这个思路比较难想，这里再贴一份用到额外空间的,</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 深拷贝 matrix -&gt; tmp</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; tmp = matrix;</span><br><span class="line">        <span class="comment">// 根据元素旋转公式，遍历修改原矩阵 matrix 的各元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                matrix[j][n - <span class="number">1</span> - i] = tmp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day33</title>
      <link href="/2023/11/12/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day33/"/>
      <url>/2023/11/12/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day33/</url>
      
        <content type="html"><![CDATA[<p><em><u>成功的人主宰时间，失败的人被时间主宰。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/spiral-matrix/">螺旋矩阵</a></p><p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (matrix.<span class="built_in">empty</span>()) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="type">int</span> top = <span class="number">0</span>, left = <span class="number">0</span>,right = matrix[<span class="number">0</span>].<span class="built_in">size</span>()<span class="number">-1</span>,bottom = matrix.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> l = left;l&lt;=right;l++)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(matrix[top][l]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(++top &gt; bottom) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> l = top;l&lt;=bottom;l++)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(matrix[l][right]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(--right &lt; left) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> l = right;l&gt;=left;l--)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(matrix[bottom][l]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(--bottom &lt; top) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> l = bottom;l&gt;=top;l--)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(matrix[l][left]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(++left &gt; right) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311122137449.png" alt="image-20231112213733403"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>经典题目，刚开始做的时候陷入了很多误区，比如设计一个n来统计圈数（用来控制边界），绕了很多路。</p><p>解法：<br>先定义好上，下，左，右四个边界，然后在进行完每一次遍历后（从左到右，上到下，右到左，下到上），都让边界内敛一个单位，这样就能实现控制边界，当边界交叉时，说明结束。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day32</title>
      <link href="/2023/11/11/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day32/"/>
      <url>/2023/11/11/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day32/</url>
      
        <content type="html"><![CDATA[<p><em><u>生命短暂，而你可以决定让它活出灿烂。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/valid-sudoku/">有效的数独</a></p><p>请你判断一个 <code>9 x 9</code> 的数独是否有效。只需要 <strong>根据以下规则</strong> ，验证已经填入的数字是否有效即可。</p><ol><li>数字 <code>1-9</code> 在每一行只能出现一次。</li><li>数字 <code>1-9</code> 在每一列只能出现一次。</li><li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。（请参考示例图）</li></ol><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidSudoku</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数字 1-9 在每一行只能出现一次。</span></span><br><span class="line">        <span class="comment">// 数字 1-9 在每一列只能出现一次。</span></span><br><span class="line">        <span class="comment">// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> row[<span class="number">9</span>][<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> col[<span class="number">9</span>][<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> box[<span class="number">9</span>][<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;.&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> num = board[i][j] - <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span>(row[i][num]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(col[j][num]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(box[i/<span class="number">3</span>*<span class="number">3</span>+j/<span class="number">3</span>][num]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                row[i][num] = <span class="number">1</span>;</span><br><span class="line">                col[j][num] = <span class="number">1</span>;</span><br><span class="line">                box[i/<span class="number">3</span>*<span class="number">3</span>+j/<span class="number">3</span>][num] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311111855116.png" alt="image-20231111185538069"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>简单的暴力算法，设置三个9*9的数组分别记录下每行每列每块（9x9）中，数字是否出现过，然后从头遍历该二维数组，经过int num &#x3D; boardij - ‘1’，将char转int,分别判断：</p><blockquote><pre><code>            if(row[i][num]) return false;  //条件1            if(col[j][num]) return false;  //条件2            if(box[i/3*3+j/3][num]) return false; //条件3</code></pre></blockquote><p>其实刷了一些日子的题，我发现自己的思想发生了改变。看到题的第一眼，我总是会下意识否认掉那些“暴力解法”，因为我认为它们太简单，占用资源太多了，如果提交上去很容易出现超时之类的。但是很难否认，看起来困难的题，他的最优解法往往就是暴力算法，直来直去。如果一个题，暴力算法都没有思路的话，那就没资格去思考更优的方法，我之后会先思考每一题的暴力算法，然后进行优化，这是我最近醒悟到的。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day31</title>
      <link href="/2023/11/09/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day31/"/>
      <url>/2023/11/09/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day31/</url>
      
        <content type="html"><![CDATA[<p><u><em>没有什么是不可能的 ; 这个词本意就是“我有一切可能” 。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/substring-with-concatenation-of-all-words/">串联所有单词的子串</a></p><p>给定一个字符串 <code>s</code> 和一个字符串数组 <code>words</code><strong>。</strong> <code>words</code> 中所有字符串 <strong>长度相同</strong>。</p><p> <code>s</code> 中的 <strong>串联子串</strong> 是指一个包含 <code>words</code> 中所有字符串以任意顺序排列连接起来的子串。</p><ul><li>例如，如果 <code>words = [&quot;ab&quot;,&quot;cd&quot;,&quot;ef&quot;]</code>， 那么 <code>&quot;abcdef&quot;</code>， <code>&quot;abefcd&quot;</code>，<code>&quot;cdabef&quot;</code>， <code>&quot;cdefab&quot;</code>，<code>&quot;efabcd&quot;</code>， 和 <code>&quot;efcdab&quot;</code> 都是串联子串。 <code>&quot;acdbef&quot;</code> 不是串联子串，因为他不是任何 <code>words</code> 排列的连接。</li></ul><p>返回所有串联子串在 <code>s</code> 中的开始索引。你可以以 <strong>任意顺序</strong> 返回答案。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findSubstring</span><span class="params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(words.<span class="built_in">empty</span>()) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        unordered_map&lt;string,<span class="type">int</span>&gt; wordmap,smap;</span><br><span class="line">        <span class="keyword">for</span>(string word:words) wordmap[word]++;</span><br><span class="line">        <span class="type">int</span> wordlen = words[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> wordnum = words.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;wordlen;k++)&#123;</span><br><span class="line">            <span class="type">int</span> i=k,j=k;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;s.<span class="built_in">size</span>()-wordnum*wordlen+<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(j&lt;i+wordnum*wordlen)&#123;</span><br><span class="line">                    string temp = s.<span class="built_in">substr</span>(j,wordlen);</span><br><span class="line">                    smap[temp]++;</span><br><span class="line">                    j+=wordlen;</span><br><span class="line">                    <span class="keyword">if</span>(wordmap[temp]==<span class="number">0</span>)&#123;<span class="comment">//情况二，有words中不存在的单词</span></span><br><span class="line">                        i=j;<span class="comment">//对i加速</span></span><br><span class="line">                        smap.<span class="built_in">clear</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(smap[temp]&gt;wordmap[temp])&#123;<span class="comment">//情况三，子串中temp数量超了</span></span><br><span class="line">                        <span class="keyword">while</span>(smap[temp]&gt;wordmap[temp])&#123;</span><br><span class="line">                            smap[s.<span class="built_in">substr</span>(i,wordlen)]--;</span><br><span class="line">                            i+=wordlen;<span class="comment">//对i加速</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;                   </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//正确匹配，由于情况二和三都对i加速了，不可能满足此条件</span></span><br><span class="line">                <span class="keyword">if</span>(j==i+wordlen*wordnum)&#123;</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">                    smap[s.<span class="built_in">substr</span>(i,wordlen)]--;</span><br><span class="line">                    i+=wordlen;<span class="comment">//i正常前进</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            smap.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311091021172.png" alt="image-20231109102139114"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>困难题。花了我比较长的时间（题解也看了很久），简单说一下思路：用两个hashmap（wordmap,smap）分别用来存放words中的单词和出现数量，以及在窗口中的单词以及出现数量。然后三层循环：第一层是用来确定滑动窗口的出发点，来保证能遍历到s的每一个子串，第二、三层循环用来进行窗口滑动，i是窗口左边界，j为右边界。每次取右边界的一个长为wordlen的单词进行判断，如果该单词不在wordmap，则将i加速到j的位置（之前窗口内所有单词都失效了），还有可能是单词在wordmap但是数量超过了规定数，则i进行右移（将一个单词移出窗口），若两种情况都不符合，说明是我们要找的字串，记录下标i。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day30</title>
      <link href="/2023/11/04/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day30/"/>
      <url>/2023/11/04/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day30/</url>
      
        <content type="html"><![CDATA[<p><em><u>在有说服力的演讲，讯息的传递不是由口到耳，而是由心到心。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串</a></p><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// &quot;abcabcbb&quot;</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> tag;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; s.<span class="built_in">length</span>(); j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(tag = i; tag &lt; j; tag++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[tag] == s[j])&#123;</span><br><span class="line">                    i = tag + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = ans &gt; (j - i + <span class="number">1</span>) ? ans : (j - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311041405503.png" alt="image-20231104140551457"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>本来想是先用暴力法做一做，看看评分如何，没想到还不错，所以直接暴力法秒了。原理即j指针每移动一次就回头看一下有没有重复的，有的话将i移到重复元素的下一位，然后重新找。每次循环后更新ans的大小。</p><p>注意：</p><p>“pwwkew”他的最长无重复子串长为“wke”3位，而不是”pwke“，这是一个子序列，而不是子串。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day29（滑动窗口）</title>
      <link href="/2023/11/02/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day29/"/>
      <url>/2023/11/02/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day29/</url>
      
        <content type="html"><![CDATA[<p><u><em>永远无法保证有人会喜欢你。 所以如果有人喜欢你，你就已经赢了。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">长度最小的子数组</a></p><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p><p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = INT_MAX;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">            sum += nums[j];</span><br><span class="line">            <span class="keyword">while</span>(sum &gt;= target)&#123;</span><br><span class="line">                ans = (j - i + <span class="number">1</span>) &gt; ans ? ans : (j - i + <span class="number">1</span>);</span><br><span class="line">                sum -= nums[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans == INT_MAX) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311022117220.png" alt="image-20231102211703168"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>滑动窗口方法：</p><blockquote><p>以下思路是比较形象的滑动窗口问题的解题步骤，但有些题目找到窗口限定比较隐晦，需要具体问题具体分析：</p><p>（1）初始化窗口：<br>初始化左右边界 left &#x3D; right &#x3D; 0，把索引闭区间 [left, right] 称为一个「窗口」。</p><p>（2）寻找可行解：<br>我们先不断地增加 right 指针扩大窗口 [left, right]，直到窗口中的满足可行解。</p><p>（3）优化可行解：<br>此时，我们停止增加 right，转而不断增加 left 指针缩小窗口 [left, right]，直到窗口中的可行解不再符合要求。同时，每次增加 left，我们都要更新一轮结果。</p><p>（4）滑动窗口，直至一次遍历结束：<br>重复第 2 和第 3 步，直到 right 到达到的尽头。</p></blockquote><p>比较适用于需要在不改变数组原顺序的情况下选择满足要求的子数组，本题套用上述模板就能找到解题方法。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day28</title>
      <link href="/2023/11/01/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day28/"/>
      <url>/2023/11/01/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day28/</url>
      
        <content type="html"><![CDATA[<p><u><em>遇到失败绝不要一走了之，相反的，为其隐藏的资产仔细并有想像力的研究。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/3sum/">三数之和</a></p><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p><p>你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() &lt; <span class="number">3</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">            <span class="comment">// 去重</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] + nums[right] + nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[left] + nums[right] + nums[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(&#123;nums[left], nums[right], nums[i]&#125;);</span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202311012257955.png" alt="image-20231101225729911"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>先对数组整体排序，然后进行循环，每次固定一个最小值i（数组最右边的数）,然后双指针left（i + 1），right（size - 1）向内收缩，加和碰到等于0的情况就加入到答案中，并同时变动left和fight。如果和大于0，说明right大了，则right左移，如果加和小于0，说明left小了，left右移。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day27</title>
      <link href="/2023/10/30/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day27/"/>
      <url>/2023/10/30/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day27/</url>
      
        <content type="html"><![CDATA[<p><u><em>当你把自已交给愿景后，成功开始追逐你。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/container-with-most-water/">盛最多水的容器</a></p><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p><p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 因为两个板之间能容的下的最大水量是由短板决定的</span></span><br><span class="line">        <span class="comment">// 所以每次只移动短板，这样最终结果可能变大或者不变</span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            ans = height[i] &lt; height[j] ?</span><br><span class="line">                <span class="built_in">max</span>(ans, (j - i) * height[i++]) :</span><br><span class="line">                <span class="built_in">max</span>(ans, (j - i) * height[j--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310302234712.png" alt="image-20231030223408666"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>双指针遍历，由于两板之间的最大储水量是由最短的板子决定的，那现在就存在两种情况：1.移动短板，那两板中短板可能变长或者不变。2.移动长板，短板可能不变或者变短 两种情况相对比，明显移动短板比较划算，所以每次遍历比较两板高度，移动较小者，就能得到最大值。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day26</title>
      <link href="/2023/10/28/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day26/"/>
      <url>/2023/10/28/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day26/</url>
      
        <content type="html"><![CDATA[<p><u><em>动机总是能战胜天赋。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/">两数之和 II - 输入有序数组</a></p><p>给你一个下标从 <strong>1</strong> 开始的整数数组 <code>numbers</code> ，该数组已按 <strong>非递减顺序排列</strong> ，请你从数组中找出满足相加之和等于目标数 <code>target</code> 的两个数。如果设这两个数分别是 <code>numbers[index1]</code> 和 <code>numbers[index2]</code> ，则 <code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code> 。</p><p>以长度为 2 的整数数组 <code>[index1, index2]</code> 的形式返回这两个整数的下标 <code>index1</code> 和 <code>index2</code>。</p><p>你可以假设每个输入 <strong>只对应唯一的答案</strong> ，而且你 <strong>不可以</strong> 重复使用相同的元素。</p><p>你所设计的解决方案必须只使用常量级的额外空间。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = numbers.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[i] + numbers[j] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;i + <span class="number">1</span> , j + <span class="number">1</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(numbers[j] &gt; target - numbers[i])&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310282030209.png" alt="image-20231028203000162"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>缪莎！如果采用暴力方法，一个一个试，那时间复杂度是o(m * n)，非常滴高。因为题目给的是有序数组，随灵光一现，双指针（i,j）一个从头遍历，一个从尾。过程中先固定i,然后进行判断，如果i和j就是题解，那直接返回（i+1,j+1），如果numbers[j] &gt; target - numbers[i]，那说明在j前面可能会出现想要的值，故j–前移（i固定）,若在前移过程中发现numbers[j] &lt; target - numbers[i],说明不存在当前i对应的值，故j不动i++进行后移，因为i对应的值变大了，target - numbers[i]值变小，遂可以继续比较，重复以上过程。</p><p>总结一下就是，固定i，然后根据i找对应的j，如果没找到，则i后移重新找，这样通过一遍遍历就能解决问题，妙！</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day25</title>
      <link href="/2023/10/27/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day25/"/>
      <url>/2023/10/27/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day25/</url>
      
        <content type="html"><![CDATA[<p><u><em>一个人离问题愈远就愈理想主义。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/is-subsequence/">判断子序列</a></p><p>给定字符串 <strong>s</strong> 和 <strong>t</strong> ，判断 <strong>s</strong> 是否为 <strong>t</strong> 的子序列。</p><p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，<code>&quot;ace&quot;</code>是<code>&quot;abcde&quot;</code>的一个子序列，而<code>&quot;aec&quot;</code>不是）。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubsequence</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() &gt; t.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; j &lt; t.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == t[j])&#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == s.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310271619191.png" alt="image-20231027161957143"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>双指针，如果匹配到s[i] &#x3D;&#x3D; t[j]则i和j同时移动，如果不匹配则只移动j，最终根据终止条件判断结果。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day24</title>
      <link href="/2023/10/26/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day24/"/>
      <url>/2023/10/26/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day24/</url>
      
        <content type="html"><![CDATA[<p><u><em>过去的损失和失败经验，应是你采取行动，而非不采取行动的理由。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/valid-palindrome/">验证回文串</a></p><p>如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 <strong>回文串</strong> 。</p><p>字母和数字都属于字母数字字符。</p><p>给你一个字符串 <code>s</code>，如果它是 <strong>回文串</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>,j = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!<span class="built_in">isalpha</span>(s[i]) &amp;&amp; i &lt; j &amp;&amp; !<span class="built_in">isdigit</span>(s[i]))&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(!<span class="built_in">isalpha</span>(s[j]) &amp;&amp; i &lt; j &amp;&amp; !<span class="built_in">isdigit</span>(s[j]))&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">tolower</span>(s[i]) != <span class="built_in">tolower</span>(s[j]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310262117710.png" alt="image-20231026211742662"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>简单题，思路也比较简单，双指针，一个从头开始便利，一个从尾开始遍历。中途如果遇到不是字母或数字的元素，则i++，同理j–，直到遇到可以比较的，如果相同则继续往后比较，不同直接返回false。</p><blockquote><p>isalpha 用来判断是不是字母</p><p>isdigit 判断是否是数字</p><p>tolower 将字母转化为小写</p><p>toupper 字母转化为大写</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day23</title>
      <link href="/2023/10/24/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day23/"/>
      <url>/2023/10/24/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day23/</url>
      
        <content type="html"><![CDATA[<p><em><u>你不造就未来，就不能控制发生在你身上的事。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">找出字符串中第一个匹配项的下标</a></p><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串的第一个匹配项的下标（下标从 0 开始）。如果 <code>needle</code> 不是 <code>haystack</code> 的一部分，则返回 <code>-1</code> 。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(needle.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(haystack.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; haystack.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(haystack[i] == needle[j])&#123;</span><br><span class="line">                <span class="keyword">if</span>(j == needle.<span class="built_in">size</span>() - <span class="number">1</span>) <span class="keyword">return</span> i - j;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i = i - j;</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>此题用的暴力匹配，还有更好的kmp算法，今晚懒不想写了，之后有空再说，暴力匹配即目标串和匹配串分别有一个下标指针，如果遇到匹配的字符，目标串和匹配串的下标一起移动，若匹配串下标等于匹配串长度减1，说明找到匹配段了，返回目标串下标减匹配串下标，就能得到第一个匹配项下标；如果在此过程中出现一个不匹配的字符，那目标串的下标要移动到开始第一个匹配字符的下一个，然后匹配串下标归零重新进行匹配，这也是该做法“暴力”所在，时间复杂度较高。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day22</title>
      <link href="/2023/10/23/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day22/"/>
      <url>/2023/10/23/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day22/</url>
      
        <content type="html"><![CDATA[<p><u><em>但你必须不断尝试，每天表现你最好的一面。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/zigzag-conversion/">N 字形变换</a></p><p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 <code>&quot;PAYPALISHIRING&quot;</code> 行数为 <code>3</code> 时，排列如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;PAHNAPLSIIGYIR&quot;</code>。</p><p>请你实现这个将字符串进行指定行数变换的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="type">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numRows &lt; <span class="number">2</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">-1</span>;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">rows</span><span class="params">(numRows)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> || i == numRows - <span class="number">1</span>)&#123;</span><br><span class="line">                flag = -flag;  </span><br><span class="line">            &#125;</span><br><span class="line">            rows[i] += c;</span><br><span class="line">            i += flag;</span><br><span class="line">        &#125;</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span>(string row : rows)&#123;</span><br><span class="line">            ans += row;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310231630185.png" alt="image-20231023163046137"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>本题算法模拟了题目中的”Z“形成的过程，设置下标i和标志位flag，从头遍历字符串s，期间往字符串数组rows中填充字符，其中i下标模拟了Z的每一层，如果i等于0或是层数-1，说明到了转折点，此时改变flag为-flag，i的值便会往相反方向增长，这就实现了类似于反复扫描的过程，”扫描“结束后，字符串数组每一个元素对应的就是Z的每一层。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day21</title>
      <link href="/2023/10/22/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day21/"/>
      <url>/2023/10/22/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day21/</url>
      
        <content type="html"><![CDATA[<p><u><em>你得先跨越恐惧才能获得你所想要的一切。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">反转字符串中的单词</a></p><p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。</p><p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p><p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。</p><p><strong>注意：</strong>输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string word = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> tag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tag)&#123;</span><br><span class="line">                    ans == <span class="string">&quot;&quot;</span> ? ans = word : ans = word + <span class="string">&quot; &quot;</span> + ans;</span><br><span class="line">                    word = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    tag = <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">continue</span>; </span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tag = <span class="number">1</span>;</span><br><span class="line">                word += s[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(word != <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            ans == <span class="string">&quot;&quot;</span> ? ans = word : ans = word + <span class="string">&quot; &quot;</span> + ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310221723511.png" alt="image-20231022172336457"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>用了一个笨但有效的方法：先设置一个标志位tag，从头遍历字符串，遇到空格且标志位为0时，则跳过空格继续遍历，遇到非空格则将标志位置1，并加到word中，这样当再次遇到空格时，标志位为1代表word中已经有了一个完整的单词，然后将word和ans结合，注意此处word要在ans前。这里有几个值得注意的地方，如果此时ans为空，则不能使用ans &#x3D; word + “ “ + ans这种形式（会导致结尾多空格），必须区分出此情况。另外结束遍历时，word可能不为空（因为还没有来得及加入到ans，遍历就到结束条件了），此时应该用同样的方法将word与ans结合。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day20</title>
      <link href="/2023/10/21/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day20/"/>
      <url>/2023/10/21/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day20/</url>
      
        <content type="html"><![CDATA[<p><u><em>别害怕失败，只要做对一次就够了。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/longest-common-prefix/">最长公共前缀</a></p><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        string ans_str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> min_len = <span class="number">1000000</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; strs.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(strs[i].<span class="built_in">length</span>() &lt; min_len)&#123;</span><br><span class="line">                min_len = strs[i].<span class="built_in">length</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; min_len)&#123;</span><br><span class="line">            <span class="type">char</span> c = strs[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; strs.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(strs[j][i] != c)&#123;</span><br><span class="line">                    <span class="keyword">return</span> ans_str;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            ans_str += c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans_str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310211654074.png" alt="image-20231021165435032"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>简单题，首先统计出最短字符串，然后同时比较字符串的i下标对应的字符是否一致，相同则加到结果中，不同则直接返回当前结果。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day19</title>
      <link href="/2023/10/21/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day19/"/>
      <url>/2023/10/21/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day19/</url>
      
        <content type="html"><![CDATA[<p><u><em>若想得到你从未拥有的东西，你得愿意做你从未做过的事。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/length-of-last-word/">最后一个单词的长度</a></p><p>给你一个字符串 <code>s</code>，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 <strong>最后一个</strong> 单词的长度。</p><p><strong>单词</strong> 是指仅由字母组成、不包含任何空格字符的最大子字符串。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLastWord</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i;i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310211626322.png" alt="image-20231021162646271"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>简单题，过于简单了。通过观察给出的测试用例，发现存在以空格结尾的字符串，所以单纯从后往前遍历字符串，碰到空格就停止是无法实现的，所以先用了一个循环，记录第一个字母的位置，从此位置开始再进行依次循环，碰到空格就停止。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day18</title>
      <link href="/2023/10/18/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day18/"/>
      <url>/2023/10/18/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day18/</url>
      
        <content type="html"><![CDATA[<p><u><em>怪罪别人绝不会让你获得成功。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/integer-to-roman/">整数转罗马数字</a></p><p>罗马数字包含以下七种字符： <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给你一个整数，将其转为罗马数字。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        string result;</span><br><span class="line">        <span class="type">int</span> values[] = &#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        string reps[] = &#123;<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span>(num)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(num &gt;= values[i])&#123;</span><br><span class="line">                    result += reps[i];</span><br><span class="line">                    num -= values[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310182055103.png" alt="image-20231018205534054"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>此题是上一道题目的变种，上一道题目是给出罗马数字转阿拉伯数字，本题给出阿拉伯数字转罗马数字。先说一下我遇到的问题，开始我还是打算利用hash表存放对应关系，即键是int值是string。但后面遇到了问题。此题解法为贪心算法，贪心思路是遍历存放数和罗马数字数组，每次取其中能表示的最大的数，（因为数组中的对应关系刻意采用从大到小的方式排列，只要从头遍历，一旦满足条件就break），表示出来然后将原数减掉表示完的数，将得到的罗马数字加到ans里，循环结束后即可得到正确ans。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day17</title>
      <link href="/2023/10/17/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day17/"/>
      <url>/2023/10/17/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day17/</url>
      
        <content type="html"><![CDATA[<p><em><u>努力成为那位能获得你追寻目标的人物。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/roman-to-integer/">罗马数字转整数</a></p><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; m;</span><br><span class="line">        m[<span class="string">&#x27;I&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">        m[<span class="string">&#x27;V&#x27;</span>]=<span class="number">5</span>;</span><br><span class="line">        m[<span class="string">&#x27;X&#x27;</span>]=<span class="number">10</span>;</span><br><span class="line">        m[<span class="string">&#x27;L&#x27;</span>]=<span class="number">50</span>;</span><br><span class="line">        m[<span class="string">&#x27;C&#x27;</span>]=<span class="number">100</span>;</span><br><span class="line">        m[<span class="string">&#x27;D&#x27;</span>]=<span class="number">500</span>;</span><br><span class="line">        m[<span class="string">&#x27;M&#x27;</span>]=<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> per = <span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m[s[i]] &lt;= per)&#123;</span><br><span class="line">                ans += m[s[i]];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans -= per;</span><br><span class="line">                ans += m[s[i]] - per;</span><br><span class="line">            &#125;</span><br><span class="line">            per = m[s[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310172149174.png" alt="image-20231017214958127"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>重回简单题的感觉非常好，首先选择用hash表存储char字符和数字的一一对应关系，然后逐一解析字符，在解析过程中保存前一个字符对应的数字记为per，per初始值设为1001（比最大的M大1），然后进行判断，如果当前字符对应的值要小于等于per，则正常累加到ans中，如果大于这说明是特殊表示，就把per从ans中删除再重新加入当前数-per即可得到正确值。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day16</title>
      <link href="/2023/10/16/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day16/"/>
      <url>/2023/10/16/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day16/</url>
      
        <content type="html"><![CDATA[<p><em><u>大人物都是从小人物时不断地尝试而造就。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/trapping-rain-water/">接雨水</a></p><p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> h = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> max_height = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> hole = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> wall = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; height.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            max_height = <span class="built_in">max</span>(max_height,height[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(max_height &gt; h)&#123;</span><br><span class="line">            <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> right = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; height.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(height[i] &gt; h)&#123;</span><br><span class="line">                    left = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = height.<span class="built_in">size</span>() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(height[i] &gt; h)&#123;</span><br><span class="line">                    right = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            wall = <span class="built_in">min</span>(height[left],height[right]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = left + <span class="number">1</span>;i &lt; right;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(height[i] &lt; wall)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(height[i] &gt; h)&#123;</span><br><span class="line">                        sum += wall - height[i];</span><br><span class="line">                    &#125;<span class="keyword">else</span> </span><br><span class="line">                        sum += wall - h;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            h = wall;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310161842687.png" alt="image-20231016184207642"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>我本人的想法是，首先对整个数组进行一次遍历，找到数组中的最大值作为循环的限制条件。设置变量h为当前层数，然后进入while循环，在while循环中首先从左到右遍历，找到第一个值大于h的下标，记为left，同理从右到左遍历，记为right。接下来在left和right中的较小者（记为wall）围成的区域中进行操作，遍历此区域，从中减去无法存储雨水的区域，这里分两种情况，如果值大于h，则wall与当前height[i]的差值就是储水区域，如果值小于h，则wall和h的差值是储水区域，第二种这样处理的原因是防止已经计算过的区域重复计算，遍历完当前层后，更新h的值为当前wall的高度。</p><p>但这样时间复杂度十分滴高，大概率因为进行了太多次的循环，下面是官方题解代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> leftMax = <span class="number">0</span>, rightMax = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            leftMax = <span class="built_in">max</span>(leftMax, height[left]);</span><br><span class="line">            rightMax = <span class="built_in">max</span>(rightMax, height[right]);</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                ans += leftMax - height[left];</span><br><span class="line">                ++left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += rightMax - height[right];</span><br><span class="line">                --right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另外我单独写了一份可以可视化样例的程序，能方便调试吧。</p><p>(比较丑)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;head.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; n = &#123;<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">while</span>(max &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n[i] &gt;= max)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> </span><br><span class="line">                cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        max--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310161933908.png" alt="image-20231016193349868"></p><p>根据给的样例生成柱状图↑</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day15</title>
      <link href="/2023/10/12/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day15/"/>
      <url>/2023/10/12/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day15/</url>
      
        <content type="html"><![CDATA[<p><u><em>过分谨慎的人难有成就。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/candy/">分发糖果</a></p><p><code>n</code> 个孩子站成一排。给你一个整数数组 <code>ratings</code> 表示每个孩子的评分。</p><p>你需要按照以下要求，给这些孩子分发糖果：</p><ul><li>每个孩子至少分配到 <code>1</code> 个糖果。</li><li>相邻两个孩子评分更高的孩子会获得更多的糖果。</li></ul><p>请你给每个孩子分发糖果，计算并返回需要准备的 <strong>最少糖果数目</strong> 。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">candy</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; ratings)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = ratings.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">right</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span> &amp;&amp; ratings[i] &gt; ratings[i - <span class="number">1</span>])&#123;</span><br><span class="line">                left[i] = left[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i != n - <span class="number">1</span> &amp;&amp; ratings[i] &gt; ratings[i + <span class="number">1</span>])&#123;</span><br><span class="line">                right[i] = right[i + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += <span class="built_in">max</span>(left[i], right[i]);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310122122022.png" alt="image-20231012212252979"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>此题最终满足两个规则，从左到右遍历，每次比较两个孩子，保证如果右边的孩子比左边孩子分高，糖果也要多。从右到左遍历，保证左边的孩子分高，糖果比右边多。简称左规则和右规则。进行两次遍历，第一次遍历从左到右，将满足左规则的糖果分配存放在left数组中。再进行一遍右便利，满足将满足右规则的糖果分配存放到right。同时对比left[i]和right[i]，取其中最大的数，这个数一定同时满足左右规则，累加到sum，最终得到糖果总数。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day14</title>
      <link href="/2023/10/11/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day14/"/>
      <url>/2023/10/11/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day14/</url>
      
        <content type="html"><![CDATA[<p><u><em>时代和环境变化非常快速，因此我们必须持续将目光聚焦在未来。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/gas-station/">加油站</a></p><p>在一条环路上有 <code>n</code> 个加油站，其中第 <code>i</code> 个加油站有汽油 <code>gas[i]</code> 升。</p><p>你有一辆油箱容量无限的的汽车，从第 <code>i</code> 个加油站开往第 <code>i+1</code> 个加油站需要消耗汽油 <code>cost[i]</code> 升。你从其中的一个加油站出发，开始时油箱为空。</p><p>给定两个整数数组 <code>gas</code> 和 <code>cost</code> ，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 <code>-1</code> 。如果存在解，则 <strong>保证</strong> 它是 <strong>唯一</strong> 的。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">canCompleteCircuit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; gas, vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; gas.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            now += gas[i] - cost[i];</span><br><span class="line">            sum += gas[i] - cost[i];</span><br><span class="line">            <span class="keyword">if</span>(now &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                start = i+<span class="number">1</span>;</span><br><span class="line">                now = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="总结与收获："><a href="#总结与收获：" class="headerlink" title="总结与收获："></a>总结与收获：</h1><p>此题首先确立两步，一是总油量减总消耗如果大于0，那必定有解；二是遍历所有加油站，只要当前的消耗大于油量，则说明这个出发点不行，直接定义下一个加油站为起点。这样遍历一遍加油站后，就能得出有没有解。（怎么确保这是唯一解？）</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day13</title>
      <link href="/2023/10/10/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day13/"/>
      <url>/2023/10/10/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day13/</url>
      
        <content type="html"><![CDATA[<p><em><u>失败是抵达卓越的另一个踏脚石。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/product-of-array-except-self/"> 除自身以外数组的乘积</a></p><p>给你一个整数数组 <code>nums</code>，返回 <em>数组 <code>answer</code> ，其中 <code>answer[i]</code> 等于 <code>nums</code> 中除 <code>nums[i]</code> 之外其余各元素的乘积</em> 。</p><p>题目数据 <strong>保证</strong> 数组 <code>nums</code>之中任意元素的全部前缀元素和后缀的乘积都在 <strong>32 位</strong> 整数范围内。</p><p>请 <strong>不要使用除法，</strong>且在 <code>O(*n*)</code> 时间复杂度内完成此题。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">productExceptSelf</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(len,<span class="number">1</span>)</span></span>;</span><br><span class="line">        ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            ans[i] = ans[i - <span class="number">1</span>] * nums[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> tmp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            tmp *= nums[i + <span class="number">1</span>];</span><br><span class="line">            ans[i] *= tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310101901689.png" alt="image-20231010190145639"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>刚拿到题目，我还在窃喜，此题只要提前算出所有元素的乘积，再利用除法即可轻松解决，无奈发现题目要求不能用除法，遂作罢。其实要想求一个数除了自己本身，其他数的乘积无非就是三个步骤，第一步，求该数左边部分的乘积，第二步求右边部分的乘积，第三步两边乘积相乘，即可得到结果，于是在代码中，我用了两个循环，第一个循环是计算每个元素左边所有元素的乘积，第二个循环是用第一步的计算结果，乘右边部分，最终得到ans数组即是结果，题中还运用了动态规划，ans数组中的每一个元素，都可以看做是前一个元素乘nums数组上一个元素所得，没有重复计算，下面附几张大佬的解读图：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310101904116.png" alt="image-20231010190452079"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310101905326.png" alt="image-20231010190502289"></p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day12</title>
      <link href="/2023/10/09/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day12/"/>
      <url>/2023/10/09/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day12/</url>
      
        <content type="html"><![CDATA[<p><em><u>事情会改变，朋友会离去。 生命不会为了任何人而停歇。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/insert-delete-getrandom-o1/">O(1) 时间插入、删除和获取随机元素</a></p><p>实现<code>RandomizedSet</code> 类：</p><ul><li><code>RandomizedSet()</code> 初始化 <code>RandomizedSet</code> 对象</li><li><code>bool insert(int val)</code> 当元素 <code>val</code> 不存在时，向集合中插入该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li><li><code>bool remove(int val)</code> 当元素 <code>val</code> 存在时，从集合中移除该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li><li><code>int getRandom()</code> 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 <strong>相同的概率</strong> 被返回。</li></ul><p>你必须实现类的所有函数，并满足每个函数的 <strong>平均</strong> 时间复杂度为 <code>O(1)</code> 。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedSet</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">RandomizedSet</span>() &#123;</span><br><span class="line"></span><br><span class="line">        data.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="built_in">find</span>(val) != data.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data[val] = data.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="built_in">find</span>(val) == data.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data.<span class="built_in">erase</span>(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = data.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">rand</span>() % n;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = data.<span class="built_in">begin</span>(); it != data.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == index) &#123;</span><br><span class="line">                <span class="keyword">return</span> it-&gt;first;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310092308196.png" alt="image-20231009230830147"></p><h1 id="总结收获："><a href="#总结收获：" class="headerlink" title="总结收获："></a>总结收获：</h1><p>题目要求在o(1)复杂度内实现集合的增，删，和随机获取，o（1）复杂的首选哈希表，在题目给的类中加入新的元素：哈希表data，用来存放数据，之后再调用哈希表本身自带的方法即可实现o(1)复杂度增删，但取随机元素会比较复杂，最坏情况需要o（n）的复杂度，因此这并不是最优解。</p><h1 id="优化："><a href="#优化：" class="headerlink" title="优化："></a>优化：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedSet</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">RandomizedSet</span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">srand</span>((<span class="type">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="built_in">count</span>(val) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data[val] = data.<span class="built_in">size</span>();</span><br><span class="line">        nums.<span class="built_in">emplace_back</span>(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="built_in">count</span>(val) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> index = data[val];</span><br><span class="line">        <span class="type">int</span> last = nums.<span class="built_in">back</span>();</span><br><span class="line">        nums[index] = last;</span><br><span class="line">        data[last] = index;</span><br><span class="line">        nums.<span class="built_in">pop_back</span>();</span><br><span class="line">        data.<span class="built_in">erase</span>(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">rand</span>() % nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> nums[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>具体优化就是新增了一个数组用来存放集合里的元素，与之前的代码相比，除了空间复杂度略有提高之外，代码体积上也有增加，因为需要同步维护该数组，该数组最重要的作用是在取随机值时可以直接作为索引，取得随机数，时间复杂度是o(1)。</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310092316276.png" alt="image-20231009231602231"></p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day11</title>
      <link href="/2023/10/08/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day11/"/>
      <url>/2023/10/08/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day11/</url>
      
        <content type="html"><![CDATA[<p><em><u>原谅是人际关系的润滑油。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/h-index/">H 指数</a></p><p>给你一个整数数组 <code>citations</code> ，其中 <code>citations[i]</code> 表示研究者的第 <code>i</code> 篇论文被引用的次数。计算并返回该研究者的 <strong><code>h</code> 指数</strong>。</p><p>根据维基百科上 <a href="https://baike.baidu.com/item/h-index/3991452?fr=aladdin">h 指数的定义</a>：<code>h</code> 代表“高引用次数” ，一名科研人员的 <code>h</code> <strong>指数</strong> 是指他（她）至少发表了 <code>h</code> 篇论文，并且每篇论文 <strong>至少</strong> 被引用 <code>h</code> 次。如果 <code>h</code> 有多种可能的值，**<code>h</code> 指数** 是其中最大的那个。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(citations.<span class="built_in">begin</span>(), citations.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> len = citations.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(citations[i] &gt;= len - i)&#123;</span><br><span class="line">                <span class="keyword">return</span> len - i;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310082137008.png" alt="image-20231008213659929"></p><h1 id="总结收获："><a href="#总结收获：" class="headerlink" title="总结收获："></a>总结收获：</h1><p>题目看起来比较唬人，但实际就是下标和数组值之间的关系，当我们把数组升序排序后，此时数组中是论文引用次数递增，再从头遍历数组，当数组中的最小值大于数组剩余元素个数，这个值就是题目要求的h指数。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day10</title>
      <link href="/2023/10/07/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day10/"/>
      <url>/2023/10/07/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day10/</url>
      
        <content type="html"><![CDATA[<p><em><u>善用你的优势。 多做你擅长的事情而不是那些你不擅长的事。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/jump-game-ii/">跳跃游戏 II</a></p><p>给定一个长度为 <code>n</code> 的 <strong>0 索引</strong>整数数组 <code>nums</code>。初始位置为 <code>nums[0]</code>。</p><p>每个元素 <code>nums[i]</code> 表示从索引 <code>i</code> 向前跳转的最大长度。换句话说，如果你在 <code>nums[i]</code> 处，你可以跳转到任意 <code>nums[i + j]</code> 处:</p><ul><li><code>0 &lt;= j &lt;= nums[i]</code> </li><li><code>i + j &lt; n</code></li></ul><p>返回到达 <code>nums[n - 1]</code> 的最小跳跃次数。生成的测试用例可以到达 <code>nums[n - 1]</code>。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> maxPos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        maxPos = <span class="built_in">max</span>(nums[i] + i, maxPos);</span><br><span class="line">        <span class="keyword">if</span> (i == end)</span><br><span class="line">        &#123;</span><br><span class="line">            end = maxPos;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> step;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310072326239.png" alt="image-20231007232643158"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day09</title>
      <link href="/2023/10/04/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day09/"/>
      <url>/2023/10/04/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day09/</url>
      
        <content type="html"><![CDATA[<p><em><u>不论今天过得很好还是过得很有趣。 明天都是新的开始。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/jump-game/">跳跃游戏</a></p><p>给你一个非负整数数组 <code>nums</code> ，你最初位于数组的 <strong>第一个下标</strong> 。数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标，如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> most = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; most) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            k = <span class="built_in">max</span>(most, i + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310041949219.png" alt="image-20231004194923166"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>遍历一遍数组，看看能到达的最远距离是否比数组要长，如果是就能到达。开始想麻烦了，把所有之后能跳到的点都遍历一遍，找最远的，然后不停重复这个过程，实际上只需要记录一个最远距离，如果。另外如果i &gt; most说明i的值已经超过了最远距离，说明most一定在某处停止更新，永远不会到达终点。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day08</title>
      <link href="/2023/10/03/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day08/"/>
      <url>/2023/10/03/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day08/</url>
      
        <content type="html"><![CDATA[<p><u><em>千秋为卷，山河作答。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">买卖股票的最佳时机 II</a></p><p>给你一个整数数组 <code>prices</code> ，其中 <code>prices[i]</code> 表示某支股票第 <code>i</code> 天的价格。</p><p>在每一天，你可以决定是否购买和&#x2F;或出售股票。你在任何时候 <strong>最多</strong> 只能持有 <strong>一股</strong> 股票。你也可以先购买，然后在 <strong>同一天</strong> 出售。</p><p>返回 <em>你能获得的 <strong>最大</strong> 利润</em> 。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> profit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; prices.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            temp = prices[i] - prices[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(temp &gt; <span class="number">0</span>) profit += temp;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310032015200.png" alt="image-20231003201555152"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>本题运用了贪心算法，其实是一种取巧方法，贪心算法的要点是每次都取最优解，运用到本题中，其实就是只要今天比昨天的股票有涨值，就出手获得利润，贪心的过程不是最终的购买过程，但可以利用贪心算法计算最大利润。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day07</title>
      <link href="/2023/10/01/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day07/"/>
      <url>/2023/10/01/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day07/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">买卖股票的最佳时机</a></p><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p><p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> min = prices[<span class="number">0</span>];    </span><br><span class="line">        <span class="type">int</span> max_profit = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> day: prices)&#123;</span><br><span class="line">            max_profit = max_profit&gt;(day-min)?max_profit:(day-min);</span><br><span class="line">            min = min&lt;(day)?min:day;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max_profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310012353713.png" alt="image-20231001235321662"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>拿现实中举个例子，如果我们买彩票想计算如果我们今天卖出，最多能赚多少，那一定是需要我们在之前价格最低的一天买入，所以我们一次遍历该数组，记录下历史最低价格，就假设我们是那天买入的，之后再继续遍历每天的利润（卖出-买入），记录下一个最大值。这样在一次遍历之后，就能得到最优解。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day06</title>
      <link href="/2023/09/30/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day06/"/>
      <url>/2023/09/30/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day06/</url>
      
        <content type="html"><![CDATA[<p><u><em>面对阳光你就不会看到阴影</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/rotate-array/">轮转数组</a></p><p>给定一个整数数组 <code>nums</code>，将数组中的元素向右轮转 <code>k</code> 个位置，其中 <code>k</code> 是非负数。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        k = k % nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">begin</span>()+ k - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>() + k, nums.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309301820301.png" alt="image-20230930182046224"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>本题还是比较简单的，轮转数组，如果要轮转k个元素，首先将k的数值范围减小成k % nums.size()，这才是有效移动的位数，然后将整个数组进行翻转，再然后以下标k为分界线，分界线左边和右边分别再进行一次翻转，最终得到翻转后的数组。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day05摩尔投票</title>
      <link href="/2023/09/29/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day05%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8/"/>
      <url>/2023/09/29/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day05%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8/</url>
      
        <content type="html"><![CDATA[<p><em><u>我从失败走向成功。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/majority-element/">多数元素</a></p><p>给定一个大小为 <code>n</code> 的数组 <code>nums</code> ，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">ceil</span>(nums.<span class="built_in">size</span>() / <span class="number">2.0</span>);</span><br><span class="line">        <span class="keyword">return</span> nums[len - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309300042563.png" alt="image-20230930004210454"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>这个求解思路其实和求解众数（一组数据中出现次数最多的数）但题目是找出出现次数大于n&#x2F;2的数（多数元素），只能说多数元素一定是众数，而众数不一定是多数元素，但题目说假设一定会有多数元素，所以用这种方法也可以求出题解。</p><p>将一个数组排序，中位数一定是众数。</p><p>在评论区看到了一个很有意思的解法，叫摩尔投票，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>,votes = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(votes == <span class="number">0</span>) n = num;</span><br><span class="line">            votes += num == n?<span class="number">1</span>:<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>n为目前假设的多数元素的值，votes是“票数”，遍历数组，当数组元素等于我们假设的多数元素，那就给票数+1，如果等于则-1，因为多数元素的数量一定大于数组长度的一半，所以其他元素的票数是不可能大于多数元素的，即-1的数量会小于+1，而对于错误的假设，最终votes一定会变成0，然后会假设新的元素为多数元素。</p><ul><li><strong>时间复杂度 O(N)O(N)*O*(*N*) ：</strong> NN<em>N</em> 为数组 <code>nums</code> 长度。</li><li><strong>空间复杂度 O(1)O(1)*O*(1) ：</strong> <code>votes</code> 变量使用常数大小的额外空间。</li></ul><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309300101950.png" alt="image-20230930010124902"></p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day04</title>
      <link href="/2023/09/29/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day04/"/>
      <url>/2023/09/29/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day04/</url>
      
        <content type="html"><![CDATA[<p><em><u>忧虑的度过一天，比起工作一周还令人劳累。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/">删除有序数组中的重复项 II</a></p><p>给你一个有序数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使得出现次数超过两次的元素<strong>只出现两次</strong> ，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() &lt;= <span class="number">2</span>) <span class="keyword">return</span> nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> fast = <span class="number">2</span>,slow = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(fast;fast &lt; nums.<span class="built_in">size</span>();fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] != nums[slow - <span class="number">2</span>])&#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309292227897.png" alt="image-20230929222725858"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>此题可以参考昨天的一题，都是采用了快慢指针的思路，不过本题多了一个条件是可以允许元素最多出现两次，在昨天的题目中，我们是用快指针和慢指针前一个元素比较，发现如果一样则表示重复，慢指针所指的位置作为待替换位。今天的题目，我们需要比较慢指针前两个元素和快指针所指元素，如果一样，说明元素数量超过两个，则慢指针为待替换位。<br>本题提交的时候错了一次，因为没有检测如果数组的元素数量小于等于2（因为两个元素理论上不需要进行操作）。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day03</title>
      <link href="/2023/09/29/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day03/"/>
      <url>/2023/09/29/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day03/</url>
      
        <content type="html"><![CDATA[<p><em><u>海上生明月，天涯共此时。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">删除有序数组中的重复项</a></p><p>给你一个 <strong>非严格递增排列</strong> 的数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。然后返回 <code>nums</code> 中唯一元素的个数。</p><p>考虑 <code>nums</code> 的唯一元素的数量为 <code>k</code> ，你需要做以下事情确保你的题解可以被通过：</p><ul><li>更改数组 <code>nums</code> ，使 <code>nums</code> 的前 <code>k</code> 个元素包含唯一元素，并按照它们最初在 <code>nums</code> 中出现的顺序排列。<code>nums</code> 的其余元素与 <code>nums</code> 的大小不重要。</li><li>返回 <code>k</code> 。</li></ul><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">       <span class="type">int</span> first = <span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> second = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span>(first;first &lt; nums.<span class="built_in">size</span>();first++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[first] != nums[second - <span class="number">1</span>])&#123;</span><br><span class="line">                nums[second] = nums[first];</span><br><span class="line">                second++;</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> second + <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309292145337.png" alt="image-20230929214547282"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>本题运用了快慢指针，代码中first为快指针，second为慢指针，循环开始时，快慢指针同时指向数组中第二个元素，在之后的循环中，若快指针和慢指针后一位不相等，则快慢指针一起后移，若相等，则 慢指针原地不动，作为替换位，快指针继续后移，直到找到不等于慢指针后一位元素的数，这时将慢指针本身指向的数替换为快指针的值，完成去重。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day02</title>
      <link href="/2023/09/27/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day02/"/>
      <url>/2023/09/27/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day02/</url>
      
        <content type="html"><![CDATA[<p><em><u>事情不是足以改变世界才算重要。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/remove-element/">移除元素</a></p><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong>。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">bool</span> is_end = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(nums[i] == val)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i + n == len )&#123;</span><br><span class="line">                    is_end = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nums[i + n] != val)&#123;</span><br><span class="line">                    <span class="built_in">swap</span>(nums[i], nums[i + n]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    n++; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(is_end)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309272241529.png" alt="image-20230927224136448"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>这道题我的思路是如果当前下标指向的元素数值等于val，那就将他和后面一个不为val的数交换，直到所有等于val的数交换到数组尾部，然后再返回实际长度就可以了。其中我设置了一个变量n，初始化为1，代表如果遇到等于val的数，就看他后面1位是不是也等于val，如果不是直接交换，如果是就将n++，代表之后会看后面第2位是否是val，n的值是永久改变的，因为按照该算法如果出现了两个或以上val连在一起的情况，如果不改变n的值，会导致val值之间换来换去，同时我加了一个判断标志，如果当前下标加上n的值超过了数组长度，那就说明下标后所有的值都是val，这时只要返回下标值（因为下标比实际长度少1），就等于数组最终长度。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day01</title>
      <link href="/2023/09/26/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day01/"/>
      <url>/2023/09/26/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day01/</url>
      
        <content type="html"><![CDATA[<p><em><u>最危险情况是当你不再有新进展。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/merge-sorted-array/">合并两个有序数组</a></p><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p><p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><p><strong>注意：</strong>最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nums3</span><span class="params">(m + n)</span></span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> key = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i] &lt; nums2[j])&#123;</span><br><span class="line">                nums3[key++] = nums1[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nums3[key++] = nums2[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; m)&#123;</span><br><span class="line">            nums3[key++] = nums1[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; n)&#123;</span><br><span class="line">            nums3[key++] = nums2[j++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        nums1 = nums3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309262135213.png" alt="image-20230926213549163"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>这是一道很经典的题目，我的解题思路是创建一个vector数组nums3，它的大小是m+n,用来暂时存放合并后的数组，然后从头遍历nums1和nums2,将两者之间的较小者插入nums3中，被选择的元素所在的数组下标和nums3下标同时后移一位，循环结束后将没插入num3的剩余内容循环插入，最后将nums3赋值给nums1。</p><p>收获：</p><p>1.vector数组的创建方法：vector<int> nums(m + n);</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构基础</title>
      <link href="/2023/09/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/09/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="重拾数据结构"><a href="#重拾数据结构" class="headerlink" title="重拾数据结构"></a>重拾数据结构</h1><p>我认为数据结构相关的东西都是同一套模板，只不过是使用了不同的数据存储方式，所以看懂代码思路很重要，看懂思路后面的不论是顺序表，链表还是树，其实性质大差不差。</p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">//若用printf,scanf,getchar,putchar,gets,puts函数需包含该头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span><span class="comment">//用malloc,free,realloc函数需包含该头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100 <span class="comment">//设线性表初始分配空间大小</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  <span class="comment">//先设定数据元素的类型为整型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//0：定义顺序表的结构类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">ElemType* elem;</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line"><span class="type">int</span> listsize;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1：初始化顺序表</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InitList_Sq</span><span class="params">(SqList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">L.elem = (ElemType*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ElemType) * MAXSIZE);</span><br><span class="line"><span class="keyword">if</span> (!L.elem) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">L.length = <span class="number">0</span>;</span><br><span class="line">L.listsize = MAXSIZE;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>malloc :动态内存分配，用法是（数据类型*）malloc(sizeof(要分配的地址块大小) * 块数量)</p><p>补充：realloc 动态修改内存</p><p>用法是 (数据类型* )realloc(原地址指针,新地址大小)</p><p>realloc的使用存在三种情况，一是如果后面的空间足够扩展，则会直接扩展；二是后面的空间不足扩展，realloc会调用malloc重新开辟一块大小为所需大小的内存空间，然后把原内容拷贝进来，并释放原空间；三是内存不足，扩展失败，此时原空间不会发生改变，realloc返回一个空地址。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2：打印顺序表中所有元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(SqList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, L.elem[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*****3：在顺序表中第i个位置(i=1~n)插入元素*****</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListInsert_Sq</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> p = L.length - <span class="number">1</span>; p &gt;= i; p--) &#123;</span><br><span class="line">L.elem[p] = L.elem[p - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">L.elem[i - <span class="number">1</span>] = e;</span><br><span class="line">L.length++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*****4：删除顺序表中第i(i=1~n)个元素，用e返回删除的元素*****</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListDelete_Sq</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, ElemType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">e = L.elem[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> p = i - <span class="number">1</span>; p &lt; L.length - <span class="number">1</span>; p++) &#123;</span><br><span class="line">L.elem[p] = L.elem[p + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">L.length--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里遇到的坑无非就是何为length，插入位置，下标之间的关系，因为下标是从0开始，所以如果要使用下标，就要考虑length和插入位置都要减1，这就要牵扯出一些边界条件，对于拿不准的我比较喜欢简单画一下图，或者举一点数据量小的例子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顺序表合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeList</span><span class="params">(SqList La, SqList Lb, SqList&amp; Lc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> end_La = La.length;</span><br><span class="line"><span class="type">int</span> end_lb = Lb.length;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Lc.elem = (ElemType*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ElemType) * MAXSIZE);</span><br><span class="line">Lc.length = end_La + end_lb;</span><br><span class="line">Lc.listsize = MAXSIZE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; end_La &amp;&amp; j &lt; end_lb) &#123;</span><br><span class="line"><span class="keyword">if</span> (La.elem[i] &lt; Lb.elem[j]) &#123;</span><br><span class="line">Lc.elem[c] = La.elem[i];</span><br><span class="line">c++;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Lc.elem[c] = Lb.elem[j];</span><br><span class="line">c++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt; end_La) &#123;</span><br><span class="line"><span class="keyword">while</span> (La.elem[i]) &#123;</span><br><span class="line">Lc.elem[c] = La.elem[i];</span><br><span class="line">i++;</span><br><span class="line">c++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j &lt; end_lb) &#123;</span><br><span class="line"><span class="keyword">while</span> (Lc.elem[j]) &#123;</span><br><span class="line">Lc.elem[c] = Lb.elem[j];</span><br><span class="line">j++;</span><br><span class="line">c++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>单链表结点结构体:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> &#123;</span><br><span class="line">    <span class="comment">///===============补充代码======================== </span></span><br><span class="line">    ElemType data;</span><br><span class="line">    LNode* next;</span><br><span class="line"></span><br><span class="line">&#125;LNode, * LinkList;      <span class="comment">// 定义节点类型以及链表类型（链表类型实际上是一个节点指针类型）</span></span><br></pre></td></tr></table></figure><p>单链表有两种插入方法，一种头插法，一种尾插法，前者结果是倒序，后者为正序</p><p>头插法(i为1时)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListInsert_L</span><span class="params">(LinkList&amp; L, <span class="type">int</span> i, ElemType e)</span> </span>&#123; <span class="comment">// 算法2.9</span></span><br><span class="line">    <span class="comment">// 在带头结点的单链线性表L的第i个元素之前插入元素e   </span></span><br><span class="line">  <span class="comment">///===============补充代码========================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    LNode* new_node = (LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    new_node-&gt;data = e;</span><br><span class="line">    new_node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    LNode* per_node = L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        per_node = per_node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    new_node-&gt;next = per_node-&gt;next;</span><br><span class="line">    per_node-&gt;next = new_node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="comment">// LinstInsert_L</span></span><br></pre></td></tr></table></figure><p>尾插法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListInsert_N</span><span class="params">(LinkList&amp; L)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    LNode* per_node = L;</span><br><span class="line">    <span class="keyword">while</span> (per_node-&gt;next != <span class="literal">NULL</span> &amp;&amp; per_node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        per_node = per_node-&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        std::cin &gt;&gt; e;</span><br><span class="line">        LNode* new_node = (LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">        new_node-&gt;data = e;</span><br><span class="line">        new_node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        per_node-&gt;next = new_node;</span><br><span class="line">        per_node = per_node-&gt;next;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单链表有一个容易被忽略的点是在new_node分配内存后一定要给其中的data，next赋初值，不然会越界。</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>“先进先出”</p><p>队列结构体：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">ElemType* base;</span><br><span class="line"><span class="type">int</span> front;</span><br><span class="line"><span class="type">int</span> rear;</span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><p>谈及队列一般都是指循环队列，因为普通队列在使用时，如果发生出队操作，那对头所在的空间就无法再返回使用了，导致空间的浪费，而使用循环队列，当队尾到达分配的MAXSIZE上限时，通过取余操作重新利用到已经出队的空间，具体操作在入队，出队，以及计算队长等均有体现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求队列的长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QueueLength</span><span class="params">(SqQueue&amp; Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Q.rear - Q.front + MAXQSIZE) % MAXQSIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素e作为Q的新的队尾元素，队满则返回0，否则返回1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">EnQueue</span><span class="params">(SqQueue&amp; Q, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) % MAXQSIZE == Q.front) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">Q.base[Q.rear] = e;</span><br><span class="line">Q.rear = (Q.rear + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若队列不空，则删除Q的队头元素，用e返回其值，并返回1,否则返回0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">DeQueue</span><span class="params">(SqQueue&amp; Q, ElemType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">QueueEmpty</span>(Q)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">e = Q.base[Q.front];</span><br><span class="line">Q.front = (Q.front + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>“后进先出”</p><p>栈结构体：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">STACK</span></span><br><span class="line">&#123;</span><br><span class="line">ElemType* base;</span><br><span class="line">ElemType* top;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><p>栈所有的操作都只变化top指针，这点不同于队列，因为其后进先出的性质，栈在回溯算法利用的比较多，他可以实现“后退”操作，比如回到树的上一结点。栈的本质我认为就是个只能对末尾操作的数组，同理队列可以理解为可以两边同时操作的数组。</p><p>判空操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判栈空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈中元素个数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求栈中元素个数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StackLength</span><span class="params">(SqStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (StackEmpty) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> S.top - S.base ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里S.top - S.base就能得到栈中元素个数，因为指针值相减的结果是两个指针之间的距离，即它们所指向的内存地址之间的偏移量。这个偏移量的单位取决于指针所指向的数据类型的大小。例如，在C语言中，如果两个指针指向相同类型的数组元素，那么它们之间的距离就是数组元素的个数乘以每个元素的大小。</p><p>入栈：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Push</span><span class="params">(SqStack&amp; s, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">StackLength</span>(s) == MAXSIZE) &#123;</span><br><span class="line">s.base = (ElemType*)<span class="built_in">realloc</span>(s.base, <span class="built_in">sizeof</span>(ElemType) * (s.size + STACKINCREMENT));</span><br><span class="line">s.size = s.size + STACKINCREMENT;</span><br><span class="line">&#125;</span><br><span class="line">*(s.top++) = e;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里加了一个扩容（其实之前都可以加，不过懒得都没加），栈的top一般都停在最近的一个空位，而不是指向栈尾，因此入栈后top要后移。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pop</span><span class="params">(SqStack&amp; s, ElemType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e = *(--s.top);</span><br><span class="line"><span class="keyword">return</span>  <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理出栈top先前移。</p><h3 id="数制转换"><a href="#数制转换" class="headerlink" title="数制转换"></a>数制转换</h3><p>扩展一下栈的一个用法：数制转换</p><p>因为数制转换一般是使用短除法，最后将余数反向组合，反向组合就可以利用栈后进先出的性质，通过取整取余操作，就能实现简单的进制转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数制转换函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">conversion</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ElemType e;</span><br><span class="line">SqStack S;</span><br><span class="line"><span class="built_in">InitStack</span>(S);</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">int</span> jinzhi;</span><br><span class="line">std::cin &gt;&gt; num;</span><br><span class="line">std::cin &gt;&gt; jinzhi;</span><br><span class="line"><span class="keyword">while</span> (num) &#123;</span><br><span class="line"><span class="built_in">Push</span>(S, num % jinzhi);</span><br><span class="line">num = num / jinzhi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(S)) &#123;</span><br><span class="line"><span class="built_in">Pop</span>(S,num);</span><br><span class="line"><span class="keyword">if</span> (num &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">std::cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">std::cout &lt;&lt; (<span class="type">char</span>)(num - <span class="number">10</span> + <span class="number">65</span>) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为16进制比较特殊，他会出现大于等于10的情况，这种情况要输出“ABC。。。”，所以在输出时加了一个判断，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">std::cout &lt;&lt; (<span class="type">char</span>)(num - <span class="number">10</span> + <span class="number">65</span>) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>二叉树结构体：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BiTNode</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    BiTNode* left;</span><br><span class="line">    BiTNode* right;</span><br><span class="line"></span><br><span class="line">&#125;BiTNode, * BiTree;</span><br></pre></td></tr></table></figure><p>创建树：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree&amp; T)</span><span class="comment">//按先序次序输入，以&quot;#&quot;表示空树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> input;</span><br><span class="line">    std::cin &gt;&gt; input;</span><br><span class="line">    <span class="keyword">if</span> (input != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        T = (BiTree)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BiTNode));</span><br><span class="line">        T-&gt;data = input;</span><br><span class="line">        <span class="built_in">CreateBiTree</span>(T-&gt;left);</span><br><span class="line">        <span class="built_in">CreateBiTree</span>(T-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        T = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注意点就是记得给空结点赋值为NULL（并不是默认为NULL，他会指向0FFFFF。。。）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T)</span><span class="comment">//先序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        cout &lt;&lt; T-&gt;data &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">PreOrderTraverse</span>(T-&gt;left);</span><br><span class="line">        <span class="built_in">PreOrderTraverse</span>(T-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span><span class="comment">//中序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">InOrderTraverse</span>(T-&gt;left);</span><br><span class="line">        cout &lt;&lt; T-&gt;data &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">InOrderTraverse</span>(T-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span><span class="comment">//后序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">PostOrderTraverse</span>(T-&gt;left);</span><br><span class="line">        <span class="built_in">PostOrderTraverse</span>(T-&gt;right);</span><br><span class="line">        cout &lt;&lt; T-&gt;data &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求树深：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">BTDepth</span><span class="params">(BiTree T)</span><span class="comment">//求二叉树的深度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> Lheight;</span><br><span class="line">    <span class="type">int</span> Rheight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        Lheight = <span class="built_in">BTDepth</span>(T-&gt;left);</span><br><span class="line">        Rheight = <span class="built_in">BTDepth</span>(T-&gt;right);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Lheight &gt; Rheight ? Lheight + <span class="number">1</span> : Rheight + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遇到的问题：在树为NULL的时候忘记return 0了，在向上层return的时候忘记在当前深度的基础上加1</p><p>求叶结点个数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Leaf</span><span class="params">(BiTree T)</span><span class="comment">//求二叉树的叶子数, 使用全局变量</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">Leaf</span>(T-&gt;right);</span><br><span class="line">        <span class="built_in">Leaf</span>(T-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (T-&gt;left == <span class="literal">NULL</span> &amp;&amp; T-&gt;right == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            LEAFCOUNT++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前两个递归调用的终点是每个叶节点，只需要判断是否递归到叶节点，条件就是左右子树都是空。</p><p>求总结点个数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">NodeCount</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;BiTree&gt; st;</span><br><span class="line">    <span class="keyword">while</span> (T || !st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (T) &#123;</span><br><span class="line">            NODECOUNT++;</span><br><span class="line">            st.<span class="built_in">push</span>(T);</span><br><span class="line">            T = T-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            T = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            T = T-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈和while循环搭配使用的方法很适合遍历，如果树不为空就入栈继续遍历，如果树为空了那就栈顶出栈，继续走右节点，这种遍历方式或许还可以用到一些迷宫小游戏里。</p><p>非递归的遍历也是使用这种结构：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Traverse_By_Stack</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    stack&lt;BiTree&gt; sta;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (T || !sta.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (T) &#123;</span><br><span class="line">            cout &lt;&lt; T-&gt;data &lt;&lt; endl; <span class="comment">// 先序遍历</span></span><br><span class="line">            sta.<span class="built_in">push</span>(T);</span><br><span class="line">            T = T-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            T = sta.<span class="built_in">top</span>();</span><br><span class="line">            <span class="comment">//cout &lt;&lt; T-&gt;data &lt;&lt; endl; // 后序遍历</span></span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">            T = T-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库内核开发-基础原理</title>
      <link href="/2023/07/31/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91-%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
      <url>/2023/07/31/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91-%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库内核开发-基础原理篇"><a href="#数据库内核开发-基础原理篇" class="headerlink" title="数据库内核开发-基础原理篇"></a>数据库内核开发-基础原理篇</h1><h2 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a>项目框架</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202307311742209.png" alt="image-20230731174232121"></p><p>sql执行流程代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">YY_BUFFER_STATE buf = <span class="built_in">yy_scan_string</span>(data_recv);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">yyparse</span>() == <span class="number">0</span>) &#123;</span><br><span class="line"> <span class="keyword">if</span> (ast::parse_tree != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// analyze and rewrite</span></span><br><span class="line">    std::shared_ptr&lt;Query&gt; query = analyze-&gt;<span class="built_in">do_analyze</span>(ast::parse_tree);</span><br><span class="line">             <span class="built_in">yy_delete_buffer</span>(buf);</span><br><span class="line">             finish_analyze = <span class="literal">true</span>;</span><br><span class="line">             <span class="built_in">pthread_mutex_unlock</span>(buffer_mutex);</span><br><span class="line">                    <span class="comment">// 优化器</span></span><br><span class="line">    std::shared_ptr&lt;Plan&gt; plan = optimizer-&gt;<span class="built_in">plan_query</span>(query, context);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// portal</span></span><br><span class="line">    std::shared_ptr&lt;PortalStmt&gt; portalStmt = portal-&gt;<span class="built_in">start</span>(plan, context);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    portal-&gt;<span class="built_in">run</span>(portalStmt, ql_manager.<span class="built_in">get</span>(), &amp;txn_id, context);</span><br><span class="line">                    </span><br><span class="line">              portal-&gt;<span class="built_in">drop</span>();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>一条sql语句从输入到数据库系统，再到执行一般需要经历四个阶段</p><h3 id="语法解析阶段（parser）"><a href="#语法解析阶段（parser）" class="headerlink" title="语法解析阶段（parser）"></a>语法解析阶段（parser）</h3><p>在这一阶段，程序会利用<strong>flex</strong>（语法分析生成器）和<strong>bison</strong>（语法分析生成器）对我们输入的sql语句进行解析，解释一下flex和bison</p><blockquote><p>Flex和Bison是两个用于处理语言解析的工具，常常被用于编译器和解释器的开发中。</p><ol><li><p><strong>Flex</strong>：Flex是一个词法分析器生成器，也就是说，它可以根据用户定义的模式生成一个词法分析器（或者叫做扫描器）。这个词法分析器可以将输入的字符流转换为一系列的词法单元（tokens）。例如，对于一条SQL语句，词法分析器可以将其分解为一系列的关键字、标识符、运算符等。</p></li><li><p><strong>Bison</strong>：Bison是一个语法分析器生成器，它可以根据用户定义的语法规则生成一个语法分析器。这个语法分析器可以将由词法分析器生成的词法单元序列转换为一个语法结构，通常是一个抽象语法树（AST）。例如，对于一条SQL语句，语法分析器可以将其转换为一个描述了这条SQL语句结构的AST。</p></li></ol></blockquote><p>在流程代码中，</p><blockquote><p>YY_BUFFER_STATE buf &#x3D; yy_scan_string(data_recv);</p></blockquote><p> 这行代码将接收到的SQL语句字符串转换为一个缓冲区，然后</p><blockquote><p> if (yyparse() &#x3D;&#x3D; 0) </p></blockquote><p>这行代码调用解析器对SQL语句进行语法解析。如果解析成功，ast::parse_tree 将包含解析生成的抽象语法树（AST）。</p><p>抽象语法树（AST）是源代码的抽象语法结构的树状表现形式，它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。在数据库中，当我们输入一条SQL语句时，数据库首先需要解析这条语句，解析的结果就是一个抽象语法树。例如，对于SQL语句 SELECT * FROM table WHERE id &#x3D; 1，其对应的抽象语法树可能如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  SELECT</span><br><span class="line">   /   |   \</span><br><span class="line"> *   FROM  WHERE</span><br><span class="line">     /     /   \</span><br><span class="line">table   id   =   1</span><br></pre></td></tr></table></figure><p>在这个树中，每个节点都代表一个操作或者一个值，例如 “SELECT”、”FROM”、”WHERE”、”&#x3D;” 等等。这个树形结构清晰地表示了SQL语句的结构，使得数据库可以更容易地理解和执行这条SQL语句。</p><p>同时在parser能进行基本的sql语法检查。</p><h3 id="语义分析（analyze）"><a href="#语义分析（analyze）" class="headerlink" title="语义分析（analyze）"></a>语义分析（analyze）</h3><blockquote><p>std::shared_ptr<Query> query &#x3D; analyze-&gt;do_analyze(ast::parse_tree);</p></blockquote><p>这行代码进行语义分析，将AST转换为一个查询对象。这个查询对象包含了执行查询所需的所有信息。</p><p>传入analyze的parse_tree会在里面进行分类，通过</p><blockquote><p>auto x &#x3D; std::dynamic_pointer_cast&lt;ast::SelectStmt&gt;(parse)</p></blockquote><p>​<strong>↑</strong></p><blockquote><p>SelectStmt，UpdateStmt，DeleteStmt，InsertStmt分别代表增删改查几种sql语句</p></blockquote><p>在analyze阶段，可以对解析出来的parse进行进一步检查，比如目标表（列）是否存在，以及左操作数和右操作数种类是否匹配等，然后把经过检查后的parse中的信息，封装成query查询对象，里面包含了查询所需的所有信息。</p><h3 id="查询优化（optimizer）"><a href="#查询优化（optimizer）" class="headerlink" title="查询优化（optimizer）:"></a>查询优化（optimizer）:</h3><p>对应执行流程里的</p><blockquote><p>std::shared_ptr<Plan> plan &#x3D; optimizer-&gt;plan_query(query, context);</p></blockquote><p>将查询对象传递给优化器，优化器会生成一个执行计划。执行计划是一个树形结构，经过优化器后的执行计划要做出一定程度的优化，最终生成计划树，举个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1, col2 <span class="keyword">FROM</span> table1, table2 <span class="keyword">WHERE</span> table1.id <span class="operator">=</span> table2.id <span class="keyword">AND</span> table1.id <span class="operator">&gt;</span> <span class="number">5</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> col2 <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><p>这条sql对应的查询计划树可能是下面：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SortPlan (col2 DESC)</span><br><span class="line">|</span><br><span class="line">ProjectionPlan (col1, col2)</span><br><span class="line">|</span><br><span class="line">JoinPlan (table1.id = table2.id)</span><br><span class="line">|   |</span><br><span class="line">|   ScanPlan (table2)</span><br><span class="line">|</span><br><span class="line">ScanPlan (table1, id &gt; 5)</span><br></pre></td></tr></table></figure><ol><li><p>最底层的 ScanPlan 是扫描操作，它们分别扫描 table1 和 table2。对于 table1，还有一个过滤条件 id &gt; 5。</p></li><li><p>JoinPlan 是连接操作，它将 table1 和 table2 连接在一起，连接条件是 table1.id &#x3D; table2.id。</p></li><li><p>ProjectionPlan 是投影操作，它从连接结果中选择 col1 和 col2 两列。</p></li><li><p>最顶层的 SortPlan 是排序操作，它按照 col2 列的值进行降序排序。</p></li></ol><p>这个查询计划树表示了如何执行这条SQL查询语句。数据库会从最底层的扫描操作开始，逐步向上执行，最后得到排序后的结果。 </p><h3 id="执行计划（run）"><a href="#执行计划（run）" class="headerlink" title="执行计划（run）"></a>执行计划（run）</h3><blockquote><p>portal-&gt;run(portalStmt, ql_manager.get(), &amp;txn_id, context);</p></blockquote><p>执行计划也有了，下一步就是按照计划调用执行方法，操作数据库了</p><p>run的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历算子树并执行算子生成执行结果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">(std::shared_ptr&lt;PortalStmt&gt; portal, QlManager* ql, <span class="type">txn_id_t</span> *txn_id, Context *context)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(portal-&gt;tag) &#123;</span><br><span class="line">        <span class="keyword">case</span> PORTAL_ONE_SELECT:</span><br><span class="line">        &#123;</span><br><span class="line">            ql-&gt;<span class="built_in">select_from</span>(std::<span class="built_in">move</span>(portal-&gt;root), std::<span class="built_in">move</span>(portal-&gt;sel_cols), context);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> PORTAL_DML_WITHOUT_SELECT:</span><br><span class="line">        &#123;</span><br><span class="line">            ql-&gt;<span class="built_in">run_dml</span>(std::<span class="built_in">move</span>(portal-&gt;root));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> PORTAL_MULTI_QUERY:</span><br><span class="line">        &#123;</span><br><span class="line">            ql-&gt;<span class="built_in">run_mutli_query</span>(portal-&gt;plan, context);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> PORTAL_CMD_UTILITY:</span><br><span class="line">        &#123;</span><br><span class="line">            ql-&gt;<span class="built_in">run_cmd_utility</span>(portal-&gt;plan, txn_id, context);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">InternalError</span>(<span class="string">&quot;Unexpected field type&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>sql –&gt; parser解析生成抽象语法树 –&gt; analyzer分析器生成query执行计划 –&gt; optimizer优化查询计划 –&gt; run执行查询计划</p><p>以上是一般数据库内核执行一条sql的大体流程。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库内核开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库内核开发 </tag>
            
            <tag> 手搓数据库系列 </tag>
            
            <tag> 数据库大赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库内核开发-存储模块</title>
      <link href="/2023/07/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91-%E5%AD%98%E5%82%A8%E6%A8%A1%E5%9D%97/"/>
      <url>/2023/07/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91-%E5%AD%98%E5%82%A8%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库内核开发-存储模块"><a href="#数据库内核开发-存储模块" class="headerlink" title="数据库内核开发-存储模块"></a>数据库内核开发-存储模块</h1><h2 id="相关目录结构"><a href="#相关目录结构" class="headerlink" title="相关目录结构"></a>相关目录结构</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202307290147743.png" alt="image-20230729014711696"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202307291746977.png" alt="image-20230729174614930"></p><p>disk_manager： 主要用于数据库和磁盘文件之间交流，操作存储在磁盘中的数据</p><p>buffer_pool_manager: 主要用于操作数据库缓冲池</p><p>rm_file_handle：主要用于对记录的增删改查</p><p>他们中封装了很多对数据进行基本操作的方法</p><h2 id="数据的存储原理"><a href="#数据的存储原理" class="headerlink" title="数据的存储原理"></a>数据的存储原理</h2><p>一张最基本的数据库表，它包含两部分，第一部分是表头(元数据)，它存储字段信息，第二部分是数据</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>xiaoming</td></tr><tr><td>2</td><td>xiaohong</td></tr></tbody></table><p>(第一行为表头，2，3行为数据)</p><p>像这样的，数据库中的每一行，在数据库系统中是以二进制形式作为一条<strong>记录</strong>进行存储的，而数据库对磁盘进行操作时并不是以记录为单位，如果每操作一次数据就要回磁盘中操作记录，这样做的效率是极低的，所以数据库中引入了另一种关系模型<strong>页</strong>，以页为单位管理记录。</p><p>因为任何涉及到磁盘的读写的操作，其效率是远不如直接在内存中进行运算的，所以我们要想提高效率，就必须要减少磁盘读写的次数，除了上述说的以页为单位操作数据，在数据库中一般还存在<strong>缓冲池</strong>（bufferpool）,他可以将一次磁盘读取的多个页暂时存储在内存中，每个页占据缓冲池的一块空间，这块空间称为<strong>帧</strong>，这样便能大大减少磁盘操作的次数，将大量内存与磁盘之间的数据操作转为内存与内存之间进行操作，在内存中被修改的数据所在的页将被标识为<strong>脏页</strong>，之后只要对脏页统一写回磁盘，数据就能实现更新。</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202307291645118.png" alt="存储原理"></p><h2 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h2><h3 id="记录："><a href="#记录：" class="headerlink" title="记录："></a>记录：</h3><h4 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h4><p>记录⽂件相关的数据结构，每⼀个数据库中的表可以分为表的元数据和表的记录数据，表的元数据统⼀存 储在.meta文件中，表的记录数据单独存储在同名⽂件中，我们称该⽂件为记录⽂件，在RMDB中， 我们⽤RmFileHandle类来对⼀个记录⽂件进⾏管理，RmFileHandle类中记录了⽂件描述符和⽂件头信息，数据结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 每个RmFileHandle对应一个表的数据文件，里面有多个page，每个page的数据封装在RmPageHandle中 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RmFileHandle</span> &#123;      </span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">RmScan</span>;    </span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">RmManager</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    DiskManager *disk_manager_; </span><br><span class="line">    BufferPoolManager *buffer_pool_manager_;</span><br><span class="line">    <span class="type">int</span> fd_;        <span class="comment">// 打开文件后产生的文件句柄</span></span><br><span class="line">    RmFileHdr file_hdr_;    <span class="comment">// 文件头，维护当前表文件的元数据</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RmFileHdr的数据结构：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">RmFileHdr</span> &#123;</span><br><span class="line"> <span class="type">int</span> record_size; <span class="comment">// 元组⼤⼩（⻓度不固定，由上层进⾏初始化）</span></span><br><span class="line"> <span class="type">int</span> num_pages; <span class="comment">// ⽂件中当前分配的page个数（初始化为1）</span></span><br><span class="line"> <span class="type">int</span> num_records_per_page; <span class="comment">// 每个page最多能存储的元组个数</span></span><br><span class="line"> <span class="type">int</span> first_free_page_no; <span class="comment">// ⽂件中当前第⼀个可⽤的page no（初始化为-1）</span></span><br><span class="line"> <span class="type">int</span> bitmap_size; <span class="comment">// bitmap⼤⼩</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>file_hdr中的num_pages记录此⽂件分配的page个数，page_no范围为[0,file_hdr.num_pages)，page_no从0开始 增加，其中第0⻚存file_hdr，从第1页开始存放真正的记录数据。</p><p>RmPageHandle的数据结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">RmPageHandle</span> &#123;</span><br><span class="line"> <span class="type">const</span> RmFileHdr *file_hdr; <span class="comment">// ⽤到了file_hdr的bitmap_size, record_size</span></span><br><span class="line"> Page *page; <span class="comment">// 指向单个page</span></span><br><span class="line"> RmPageHdr *page_hdr; <span class="comment">// page-&gt;data的第⼀部分，指针指向⾸地址，⻓度为sizeof(RmPageHdr)</span></span><br><span class="line"> <span class="type">char</span> *bitmap; <span class="comment">// page-&gt;data的第⼆部分，指针指向⾸地址，⻓度为file_hdr-&gt;bitmap_size</span></span><br><span class="line"> <span class="type">char</span> *slots; <span class="comment">// page-&gt;data的第三部分，指针指向⾸地址，每个slot的⻓度为file_hdr-&gt;record_size</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于具体的每⼀个记录，使⽤RmRecord来进⾏管理，数据结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">RmRecord</span> &#123;</span><br><span class="line"> <span class="type">char</span> *data; <span class="comment">// 保存记录的二进制数据，data初始化分配size个字节的空间</span></span><br><span class="line"> <span class="type">int</span> size; <span class="comment">// size = RmFileHdr的record_size</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同时，使⽤Rid来对每⼀个记录进⾏唯⼀的标识，数据结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Rid</span> &#123;</span><br><span class="line"> <span class="type">int</span> page_no; <span class="comment">// 该记录所在的数据⻚的page_no</span></span><br><span class="line"> <span class="type">int</span> slot_no; <span class="comment">// 该记录所在数据⻚中的具体slot_no</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="关系解读："><a href="#关系解读：" class="headerlink" title="关系解读："></a>关系解读：</h4><p>- RmFileHandle：这是一个文件句柄类，它维护了一个打开的表文件的信息。它包含一个DiskManager对象和一个BufferPoolManager对象，这两个对象分别用于管理磁盘和缓冲池。它还包含一个文件描述符fd_，用于标识打开的文件。此外，它还包含一个RmFileHdr对象，用于存储文件头信息。</p><p>- RmFileHdr：这是一个文件头结构，它存储了表文件的元数据，如记录大小、页面数量、每页的记录数量、第一个包含空闲空间的页面号和每页的bitmap大小。</p><p>- RmPageHandle：这是一个页面句柄结构，它包含了一个页面的所有信息。它包含一个RmFileHdr对象的指针，指向当前页面所在文件的文件头。它还包含一个Page对象的指针，指向页面的实际数据。此外，它还包含一个RmPageHdr对象的指针，指向页面的页头信息。最后，它还包含两个字符指针，分别指向页面的bitmap和记录槽。</p><p>- RmPageHdr：这是一个页面头结构，它存储了每个页面的元数据，如下一个包含空闲空间的页面号和当前页面中的记录数量。</p><p>- RmRecord：这是一个记录结构，它包含了一条记录的数据和大小。</p><p>- PageId：这是一个页面ID结构，它包含了一个文件描述符和一个页面号，用于唯一标识一个页面。</p><h3 id="表的元数据存储"><a href="#表的元数据存储" class="headerlink" title="表的元数据存储"></a>表的元数据存储</h3><h4 id="数据结构：-1"><a href="#数据结构：-1" class="headerlink" title="数据结构："></a>数据结构：</h4><p>表的元数据主要通过TabMeta数据结构来进⾏管理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TabMeta</span> &#123;</span><br><span class="line"> std::string name; <span class="comment">// 表名称</span></span><br><span class="line"> std::vector&lt;ColMeta&gt; cols; <span class="comment">// 表包含的字段</span></span><br><span class="line"> std::vector&lt;IndexMeta&gt; indexes; <span class="comment">// 表上建⽴的索引</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于每个字段，运用ColMeta数据结构进行管理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ColMeta</span> &#123;</span><br><span class="line"> std::string tab_name; <span class="comment">// 表名称</span></span><br><span class="line"> std::string name; <span class="comment">// 字段名称</span></span><br><span class="line"> ColType type; <span class="comment">// 字段类型</span></span><br><span class="line"> <span class="type">int</span> len; <span class="comment">// 字段⻓度</span></span><br><span class="line"> <span class="type">int</span> offset; <span class="comment">// 字段所在记录中的偏移量，⽤于查询字段的具体存储位置</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于索引结构，通过IndexMeta数据结构来进⾏管理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">IndexMeta</span> &#123;</span><br><span class="line"> std::string tab_name; <span class="comment">// 索引所属表名称</span></span><br><span class="line"> <span class="type">int</span> col_tot_len; <span class="comment">// 索引字段⻓度总和</span></span><br><span class="line"> <span class="type">int</span> col_num; <span class="comment">// 索引字段数量</span></span><br><span class="line"> std::vector&lt;ColMeta&gt; cols; <span class="comment">// 索引包含的字段</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="关系解读：-1"><a href="#关系解读：-1" class="headerlink" title="关系解读："></a>关系解读：</h4><p>TabMeta是表的封装，包括表名，字段名，表上的索引。</p><p>ColMeta是字段的封装，包括字段所在的表名，字段名，字段类型，字段长度，字段所在记录中的偏移量。关于<strong>偏移量</strong>（offset），根据之前说的记录的定义，每一条记录即是表的一行，一行可能存在多个字段，所以要依靠偏移量来定位字段在记录中的位置。</p><p>IndexMeta是对索引的封装，包括索引的基本信息。</p><h2 id="操作方法和部分实现思路"><a href="#操作方法和部分实现思路" class="headerlink" title="操作方法和部分实现思路"></a>操作方法和部分实现思路</h2><h3 id="磁盘管理器（diskmanager）"><a href="#磁盘管理器（diskmanager）" class="headerlink" title="磁盘管理器（diskmanager）:"></a>磁盘管理器（diskmanager）:</h3><p>主要是对磁盘文件开启关闭，写入读入。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页操作</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 将数据写入文件的指定磁盘页面中</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; fd 磁盘文件的文件句柄</span></span><br><span class="line"><span class="comment"> * @param &#123;page_id_t&#125; page_no 写入目标页面的page_id</span></span><br><span class="line"><span class="comment"> * @param &#123;char&#125; *offset 要写入磁盘的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; num_bytes 要写入磁盘的数据大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">write_page</span><span class="params">(<span class="type">int</span> fd, <span class="type">page_id_t</span> page_no, <span class="type">const</span> <span class="type">char</span> *offset, <span class="type">int</span> num_bytes)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 读取文件中指定编号的页面中的部分数据到内存中</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; fd 磁盘文件的文件句柄</span></span><br><span class="line"><span class="comment"> * @param &#123;page_id_t&#125; page_no 指定的页面编号</span></span><br><span class="line"><span class="comment"> * @param &#123;char&#125; *offset 读取的内容写入到offset中</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; num_bytes 读取的数据量大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read_page</span><span class="params">(<span class="type">int</span> fd, <span class="type">page_id_t</span> page_no, <span class="type">char</span> *offset, <span class="type">int</span> num_bytes)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*目录操作*/</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">is_dir</span><span class="params">(<span class="type">const</span> std::string &amp;path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">create_dir</span><span class="params">(<span class="type">const</span> std::string &amp;path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">destroy_dir</span><span class="params">(<span class="type">const</span> std::string &amp;path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*文件操作*/</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">is_file</span><span class="params">(<span class="type">const</span> std::string &amp;path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">create_file</span><span class="params">(<span class="type">const</span> std::string &amp;path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">destroy_file</span><span class="params">(<span class="type">const</span> std::string &amp;path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">open_file</span><span class="params">(<span class="type">const</span> std::string &amp;path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">close_file</span><span class="params">(<span class="type">int</span> fd)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_file_size</span><span class="params">(<span class="type">const</span> std::string &amp;file_name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">get_file_name</span><span class="params">(<span class="type">int</span> fd)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_file_fd</span><span class="params">(<span class="type">const</span> std::string &amp;file_name)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 文件打开列表，用于记录文件是否被打开</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//path2fd_:通过文件路径查找其文件句柄。用于检查文件是否已打开,并获取其句柄。</span></span><br><span class="line">    <span class="comment">//fd2path_:通过文件描述符查找其文件路径。用于通过文件句柄获取对应的文件路径。</span></span><br><span class="line"></span><br><span class="line">    std::unordered_map&lt;std::string, <span class="type">int</span>&gt; path2fd_;  <span class="comment">//&lt;Page文件磁盘路径,Page fd&gt;哈希表</span></span><br><span class="line">    std::unordered_map&lt;<span class="type">int</span>, std::string&gt; fd2path_;  <span class="comment">//&lt;Page fd,Page文件磁盘路径&gt;哈希表</span></span><br></pre></td></tr></table></figure><p>write_page &amp; read_page分别为读页和写页，这两个函数的实现思路是一样的，因为涉及到在文件的某一位置读或者写，所以要先定位，可以直接使用c++自带的io库中的lseek方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lseek</span>(fd,page_no * PAGE_SIZE,SEEK_SET); <span class="comment">//定位到第page_no个文件的文件头，SEEK_SET = 0</span></span><br></pre></td></tr></table></figure><p>读写同样调用自带write，read方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> bw = <span class="built_in">write</span>(fd,offset,num_bytes);</span><br><span class="line"><span class="type">ssize_t</span> br = <span class="built_in">read</span>(fd,offset,num_bytes);</span><br></pre></td></tr></table></figure><p>目录操作和文件操作都是基本的io操作，不做详解了。</p><blockquote><p> &#x2F;&#x2F; 文件打开列表，用于记录文件是否被打开</p><p>std::unordered_map&lt;std::string, int&gt; path2fd_;  &#x2F;&#x2F;&lt;Page文件磁盘路径,Page fd&gt;哈希表<br>std::unordered_map&lt;int, std::string&gt; fd2path_;  &#x2F;&#x2F;&lt;Page fd,Page文件磁盘路径&gt;哈希表</p></blockquote><p>文件打开列表是两个map类型，记录了当前系统下被打开的文件，即使用中的文件，可以利用它防止重复打开，关闭或删除正在使用中的文件，同时我们在打开和关闭文件时都要注意更新文件打开列表。</p><h3 id="缓冲池管理器（buffer-pool-manager）："><a href="#缓冲池管理器（buffer-pool-manager）：" class="headerlink" title="缓冲池管理器（buffer_pool_manager）："></a>缓冲池管理器（buffer_pool_manager）：</h3><p>缓冲池管理器主要是对系统的缓冲池进行管理，包括给页分配空闲帧，对缓冲池更新，将缓冲池中的脏页写回，其中缓冲池的更新需要实现专门的更新算法，比较重要。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @description: 将目标页面标记为脏页</span></span><br><span class="line"><span class="comment">  * @param &#123;Page*&#125; page 脏页</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">mark_dirty</span><span class="params">(Page* page)</span> </span>&#123; page-&gt;is_dirty_ = <span class="literal">true</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"> <span class="function">Page* <span class="title">fetch_page</span><span class="params">(PageId page_id)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">bool</span> <span class="title">unpin_page</span><span class="params">(PageId page_id, <span class="type">bool</span> is_dirty)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">bool</span> <span class="title">flush_page</span><span class="params">(PageId page_id)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function">Page* <span class="title">new_page</span><span class="params">(PageId* page_id)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">bool</span> <span class="title">delete_page</span><span class="params">(PageId page_id)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">flush_all_pages</span><span class="params">(<span class="type">int</span> fd)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">delete_pages_index</span><span class="params">(<span class="type">int</span> fd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"> <span class="function"><span class="type">bool</span> <span class="title">find_victim_page</span><span class="params">(<span class="type">frame_id_t</span>* frame_id)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">update_page</span><span class="params">(Page* page, PageId new_page_id, <span class="type">frame_id_t</span> new_frame_id)</span></span>;</span><br></pre></td></tr></table></figure><p>find_victim_page:</p><blockquote><p> * @description: 从free_list或replacer中得到可淘汰帧页的 *frame_id</p><p> * @return {bool} true: 可替换帧查找成功 , false: 可替换帧查找失败</p><p> * @param {frame_id_t*} frame_id 帧页id指针,返回成功找到的可替换帧id</p></blockquote><p>从空闲帧链表中获取帧id，并return true，同时如果没有空闲帧则需要调用淘汰算法进行淘汰</p><p>update_page:</p><blockquote><p> * @description: 更新页面数据, 如果为脏页则需写入磁盘，再更新为新页面，更新page元数据(data, is_dirty, page_id)和page table</p><p> * @param {Page*} page 写回页指针</p><p> * @param {PageId} new_page_id 新的page_id</p><p> * @param {frame_id_t} new_frame_id 新的帧frame_id</p></blockquote><p>更新缓冲池中的页到磁盘，如果页面未被修改（非脏页），则直接更新该页的数据给新页，删除旧帧号和页面号之间的映射，将新页号和帧号映射，如果是脏页，还需要提前写回磁盘：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BufferPoolManager::update_page</span><span class="params">(Page *page, PageId new_page_id, <span class="type">frame_id_t</span> new_frame_id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1 如果是脏页，写回磁盘，并且把dirty置为false</span></span><br><span class="line">    <span class="keyword">if</span> (page-&gt;<span class="built_in">is_dirty</span>()) &#123;</span><br><span class="line">        disk_manager_-&gt;<span class="built_in">write_page</span>(page-&gt;<span class="built_in">get_page_id</span>().fd, page-&gt;<span class="built_in">get_page_id</span>().page_no, page-&gt;<span class="built_in">get_data</span>(), PAGE_SIZE);</span><br><span class="line">        page-&gt;is_dirty_ = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2 更新page table</span></span><br><span class="line">    page_table_.<span class="built_in">erase</span>(page-&gt;<span class="built_in">get_page_id</span>());</span><br><span class="line">    page_table_[new_page_id] = new_frame_id;</span><br><span class="line">    <span class="comment">// 3 重置page的data，更新page id</span></span><br><span class="line">    page-&gt;<span class="built_in">reset_memory</span>();</span><br><span class="line">    page-&gt;id_ = new_page_id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fetch_page:</p><blockquote><ul><li>@description: 从buffer pool获取需要的页。</li><li><pre><code>         如果页表中存在page_id（说明该page在缓冲池中），并且pin_count++。</code></pre></li><li><pre><code>         如果页表不存在page_id（说明该page在磁盘中），则找缓冲池victim page，将其替换为磁盘中读取的page，pin_count置1。</code></pre></li><li>@return {Page*} 若获得了需要的页则将其返回，否则返回nullptr</li><li>@param {PageId} page_id 需要获取的页的PageId</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Page* <span class="title">BufferPoolManager::fetch_page</span><span class="params">(PageId page_id)</span> </span>&#123;</span><br><span class="line">    latch_.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="type">frame_id_t</span> frame_id;</span><br><span class="line">    <span class="comment">// 1.     从page_table_中搜寻目标页</span></span><br><span class="line">    <span class="comment">// 1.1    若目标页有被page_table_记录，则将其所在frame固定(pin)，并返回目标页。</span></span><br><span class="line">    <span class="keyword">if</span> (page_table_.<span class="built_in">find</span>(page_id) != page_table_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        frame_id = page_table_.<span class="built_in">at</span>(page_id);</span><br><span class="line">        Page* page = &amp;pages_[frame_id];</span><br><span class="line">        <span class="keyword">if</span> (++page-&gt;pin_count_ == <span class="number">1</span>) &#123;</span><br><span class="line">            replacer_-&gt;<span class="built_in">pin</span>(frame_id);</span><br><span class="line">        &#125;</span><br><span class="line">        latch_.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 1.2    否则，尝试调用find_victim_page获得一个可用的frame，若失败则返回nullptr</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">find_victim_page</span>(&amp;frame_id)) &#123;</span><br><span class="line">        latch_.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Page* page = &amp;pages_[frame_id];</span><br><span class="line">    <span class="comment">// 2.     若获得的可用frame存储的为dirty page，则须调用updata_page将page写回到磁盘</span></span><br><span class="line">    <span class="built_in">update_page</span>(page, page_id, frame_id);</span><br><span class="line">    <span class="comment">// 3.     调用disk_manager_的read_page读取目标页到frame</span></span><br><span class="line">    disk_manager_-&gt;<span class="built_in">read_page</span>(page_id.fd, page_id.page_no, page-&gt;<span class="built_in">get_data</span>(), PAGE_SIZE);</span><br><span class="line">    <span class="comment">// 4.     固定目标页，更新pin_count_</span></span><br><span class="line">    <span class="keyword">if</span> (++page-&gt;pin_count_ == <span class="number">1</span>) &#123;</span><br><span class="line">        replacer_-&gt;<span class="built_in">pin</span>(frame_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.     返回目标页</span></span><br><span class="line">    latch_.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flush_page：</p><blockquote><p> * @description: 将目标页写回磁盘，不考虑当前页面是否正在被使用</p><p> * @return {bool} 成功则返回true，否则返回false(只有page_table_中没有目标页时)</p><p> * @param {PageId} page_id 目标页的page_id，不能为INVALID_PAGE_ID</p></blockquote><p>delete_page：</p><blockquote><p> * @description: 从buffer_pool删除目标页</p><p> * @return {bool} 如果目标页不存在于buffer_pool或者成功被删除则返回true，若其存在于buffer_pool但无法删除则返回false</p><p> * @param {PageId} page_id 目标页</p></blockquote><p>flush_all_pages：</p><blockquote><p> * @description: 将buffer_pool中的所有页写回到磁盘</p><p> * @param {int} fd 文件句柄</p></blockquote><h3 id="记录操作-rm-file-handle"><a href="#记录操作-rm-file-handle" class="headerlink" title="记录操作(rm_file_handle):"></a>记录操作(rm_file_handle):</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 判断指定位置上是否已经存在一条记录，通过Bitmap来判断 */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_record</span><span class="params">(<span class="type">const</span> Rid &amp;rid)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    RmPageHandle page_handle = <span class="built_in">fetch_page_handle</span>(rid.page_no);</span><br><span class="line">    <span class="keyword">return</span> Bitmap::<span class="built_in">is_set</span>(page_handle.bitmap, rid.slot_no);  <span class="comment">// page的slot_no位置上是否有record</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::unique_ptr&lt;RmRecord&gt; <span class="title">get_record</span><span class="params">(<span class="type">const</span> Rid &amp;rid, Context *context)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Rid <span class="title">insert_record</span><span class="params">(<span class="type">char</span> *buf, Context *context)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_record</span><span class="params">(<span class="type">const</span> Rid &amp;rid, <span class="type">char</span> *buf)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_record</span><span class="params">(<span class="type">const</span> Rid &amp;rid, Context *context)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_record</span><span class="params">(<span class="type">const</span> Rid &amp;rid, <span class="type">char</span> *buf, Context *context)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>get_record:</p><ul><li>@description: 获取当前表中记录号为rid的记录</li><li>@param {Rid&amp;} rid 记录号，指定记录的位置</li><li>@param {Context*} context</li><li>@return {unique_ptr<RmRecord>} rid对应的记录对象指针</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::unique_ptr&lt;RmRecord&gt; <span class="title">RmFileHandle::get_record</span><span class="params">(<span class="type">const</span> Rid&amp; rid, Context* context)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取指定记录所在的page handle</span></span><br><span class="line">    <span class="comment">// 2. 初始化一个指向RmRecord的指针（赋值其内部的data和size）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    <span class="keyword">if</span>(context!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        context-&gt;lock_mgr_-&gt;<span class="built_in">lock_shared_on_record</span>(context-&gt;txn_,rid,fd_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 6/29 补充可能出现的异常抛出</span></span><br><span class="line">    <span class="keyword">if</span>(rid.page_no &gt; handle.file_hdr-&gt;num_pages || rid.slot_no &gt; handle.file_hdr-&gt;num_records_per_page)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">RecordNotFoundError</span>(rid.page_no,rid.slot_no);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (!Bitmap::<span class="built_in">is_set</span>(handle.bitmap, rid.slot_no)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">RecordNotFoundError</span>(rid.page_no, rid.slot_no);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以上</span></span><br><span class="line">    RmPageHandle  handle = <span class="built_in">fetch_page_handle</span>(rid.page_no);</span><br><span class="line">    <span class="function">std::unique_ptr&lt;RmRecord&gt; <span class="title">record</span><span class="params">(<span class="keyword">new</span> RmRecord())</span></span>;</span><br><span class="line">    record-&gt;size = file_hdr_.record_size;</span><br><span class="line">    record-&gt;data = handle.<span class="built_in">get_slot</span>(rid.slot_no);</span><br><span class="line"></span><br><span class="line">    buffer_pool_manager_-&gt;<span class="built_in">unpin_page</span>(handle.page-&gt;<span class="built_in">get_page_id</span>(),<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> record;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LRU替换器-lru-replacer"><a href="#LRU替换器-lru-replacer" class="headerlink" title="LRU替换器(lru_replacer):"></a>LRU替换器(lru_replacer):</h3><p>因为缓冲中只是在内存开辟出的一小块空间，用于快速访问，它本身大小肯定要远小于磁盘储存大小，所以缓冲池中不可能永远存在你想要的页面，如果出现要用的页面在缓冲池中不存在的情况，那就需要缓冲池替换策略来替换掉近期用的最少的页面，这样整个缓冲池就动态起来了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUReplacer</span> : <span class="keyword">public</span> Replacer &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @description: 创建一个新的LRUReplacer</span></span><br><span class="line"><span class="comment">     * @param &#123;size_t&#125; num_pages LRUReplacer最多需要存储的page数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">LRUReplacer</span><span class="params">(<span class="type">size_t</span> num_pages)</span></span>;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">LRUReplacer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">victim</span><span class="params">(<span class="type">frame_id_t</span> *frame_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pin</span><span class="params">(<span class="type">frame_id_t</span> frame_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unpin</span><span class="params">(<span class="type">frame_id_t</span> frame_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">Size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">   <span class="comment">// LRUhash_ :页面id和页面在LRUlist_中的位置 LRUlist_：头最近访问，尾长时间未访问</span></span><br><span class="line">    std::mutex latch_;                  <span class="comment">// 互斥锁</span></span><br><span class="line">    std::list&lt;<span class="type">frame_id_t</span>&gt; LRUlist_;     <span class="comment">// 按加入的时间顺序存放unpinned pages的frame id，首部表示最近被访问</span></span><br><span class="line">    std::unordered_map&lt;<span class="type">frame_id_t</span>, std::list&lt;<span class="type">frame_id_t</span>&gt;::iterator&gt; LRUhash_;   <span class="comment">// frame_id_t -&gt;unpinned pages的frame id</span></span><br><span class="line">    <span class="type">size_t</span> max_size_;   <span class="comment">// 最大容量（与缓冲池的容量相同）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>victim:</p><blockquote><p> * @description: 使用LRU策略删除一个victim frame，并返回该frame的id</p><p> * @param {frame_id_t*} frame_id 被移除的frame的id，如果没有frame被移除返回nullptr</p><p> * @return {bool} 如果成功淘汰了一个页面则返回true，否则返回false</p></blockquote><p>对于pin和unpin，他们的主要作用是固定住某一页面，这些页面往往是正在使用的，如果该页面处于pin状态，则不会被淘汰，unpin就是解除该状态。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>DiskManager，BufferPoolManager和RMFileHandle是实现存储管理的关键组件，他们之间的关系和调用流程如下：</p><ol><li><p>DiskManager：负责管理磁盘存储，包括读写磁盘上的页面，创建和删除磁盘文件等。</p></li><li><p>BufferPoolManager：负责管理内存中的缓冲池，包括从磁盘中读取页面到缓冲池，将缓冲池中的页面写回磁盘，页面的替换策略等。</p></li><li><p>RMFileHandle：负责管理一个特定的关系，包括读写该关系的记录，插入和删除记录等。</p></li></ol><p>一个页面从磁盘中取出到使用的流程如下：</p><ol><li><p>当需要访问一个页面时，首先在BufferPoolManager的缓冲池中查找该页面。</p></li><li><p>如果在缓冲池中找到了该页面，就直接使用该页面。</p></li><li><p>如果在缓冲池中没有找到该页面，就需要从磁盘中读取该页面。BufferPoolManager会调用DiskManager的read_page方法，将该页面从磁盘读取到缓冲池中。</p></li><li><p>如果缓冲池已满，需要选择一个页面进行替换。BufferPoolManager会根据其页面替换策略，选择一个页面，如果该页面被修改过，就调用DiskManager的write_page方法，将该页面写回磁盘，然后将新的页面读取到这个位置。</p></li><li><p>RMFileHandle通过BufferPoolManager获取到页面后，就可以对该页面进行操作，例如读取记录，修改记录等。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库内核开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库内核开发 </tag>
            
            <tag> 手搓数据库系列 </tag>
            
            <tag> 数据库大赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>verilog入门学习</title>
      <link href="/2023/06/16/verilog%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/06/16/verilog%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="驴——verilog入门笔记"><a href="#驴——verilog入门笔记" class="headerlink" title="驴——verilog入门笔记"></a>驴——verilog入门笔记</h1><blockquote><p>部分截图来自b站</p></blockquote><h2 id="1模块结构"><a href="#1模块结构" class="headerlink" title="1模块结构"></a>1模块结构</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306161001803.png" alt="屏幕截图(4)"></p><blockquote><p>记住这个结构，学习verilog的前提是先看懂</p></blockquote><p>举例</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Full_adder(</span><br><span class="line">    <span class="keyword">output</span> Fi,</span><br><span class="line">    <span class="keyword">output</span> Cout,</span><br><span class="line"> <span class="keyword">input</span> Ai,</span><br><span class="line">    <span class="keyword">input</span> Bi,</span><br><span class="line">    <span class="keyword">input</span> Cin </span><br><span class="line">    );</span><br><span class="line"><span class="keyword">assign</span> &#123;Cout,Fi&#125;=Ai+Bi+Cin;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306161011439.png" alt="屏幕截图(5)"></p><h2 id="2assign赋值语句"><a href="#2assign赋值语句" class="headerlink" title="2assign赋值语句"></a>2assign赋值语句</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306161036736.png" alt="屏幕截图(6)"></p><h2 id="3always语句"><a href="#3always语句" class="headerlink" title="3always语句"></a>3always语句</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306161709025.png" alt="image-20230616170908710"></p><blockquote><p>类似于If，后面的条件满足时才执行下面的语句</p><p>always后的条件有两种：边沿敏感，电平敏感</p></blockquote><p>写法：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306161712349.png" alt="image-20230616171228130"></p><blockquote><p>另外如果always后有多条赋值语句，则需要用begin end围起来</p></blockquote><p>例如</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> @(a,b,cin)</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line">     s...</span><br><span class="line">     count...</span><br><span class="line"> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="4模块调用"><a href="#4模块调用" class="headerlink" title="4模块调用"></a>4模块调用</h2><blockquote><p>在其他模块里调用已经写好的模块，类似于方法调用，需要对象名和方法参数</p></blockquote><p>举例</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//已存在方法A(CLK,I,O)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用A</span></span><br><span class="line">A a1(<span class="variable">.CLK</span>(clk),<span class="variable">.I</span>(i),<span class="variable">.O</span>(o))<span class="comment">//这样写参数比较规范</span></span><br><span class="line">A a2(clk,i,o)<span class="comment">//这样也行，按顺序</span></span><br></pre></td></tr></table></figure><h2 id="5门原语调用"><a href="#5门原语调用" class="headerlink" title="5门原语调用"></a>5门原语调用</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306161747958.png" alt="image-20230616174731732"></p><blockquote><p>输出在前，输入在后</p></blockquote><h1 id="6If语句"><a href="#6If语句" class="headerlink" title="6If语句"></a>6If语句</h1><blockquote><p>if +（条件）+ 执行语句 ；</p><p>else</p></blockquote><h2 id="7case语句"><a href="#7case语句" class="headerlink" title="7case语句"></a>7case语句</h2><blockquote><p>case（表达式）</p><p>取值1：语句1；</p><p>取值2：语句2；</p><p>…</p><p>default： 默认；</p><p>endcase</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库内核开发</title>
      <link href="/2023/06/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91/"/>
      <url>/2023/06/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库内核开发"><a href="#数据库内核开发" class="headerlink" title="数据库内核开发"></a>数据库内核开发</h1><h2 id="数据库基本架构"><a href="#数据库基本架构" class="headerlink" title="数据库基本架构"></a>数据库基本架构</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306151747696.png" alt="屏幕截图 2023-06-15 173746"></p><h2 id="关系数据库结构"><a href="#关系数据库结构" class="headerlink" title="关系数据库结构"></a>关系数据库结构</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306151748578.png" alt="屏幕截图(1)"></p><h2 id="Buffer-POOL缓存机制"><a href="#Buffer-POOL缓存机制" class="headerlink" title="Buffer POOL缓存机制"></a>Buffer POOL缓存机制</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306202054690.png" alt="屏幕截图(8)"></p><p>因为我们的数据库中的数据是放在磁盘里的，但我们每次读取都去读磁盘，显然这样效率就大寄特寄了，所以类似于cup与主存之间，我们也需要一个缓冲区来加快读写速率。</p><h2 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+Tree"></a>B+Tree</h2><blockquote><p>1.叶结点大小和存储单元大小一致，能起到预读数据效果</p><p>2.叶节点有链接关系，可以遍历</p><p>3.只有叶结点放数据</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306221905892.png" alt="屏幕截图 2023-06-22 185507"></p><p>B+tree搜索过程：</p><p>比如搜索29，在磁盘块1中可以看出，29在p2所指区域</p><p>在p2区域，可以看出29小于36在p1区域</p><p>最后找到磁盘块7，搜索到29</p><p>B+树的删除过程</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306230119096.png" alt="屏幕截图(14)"></p><p>删除7</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306230122781.png" alt="屏幕截图(16)"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306230123531.png" alt="屏幕截图(17)"></p><p>删除11</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306230123390.png" alt="屏幕截图(18)"></p><p>B+树插入过程</p><p>插入40</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306230123645.png" alt="屏幕截图(15)"></p><h2 id="LSM-Tree架构"><a href="#LSM-Tree架构" class="headerlink" title="LSM-Tree架构"></a>LSM-Tree架构</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306222256466.png" alt="屏幕截图(9)"></p><blockquote><p>用户输入的数据会先存放在memorytable中，当memorytable中的数据达到一定阈值，memorytable就会变成一个Frozen~(只读)，然后生成一个新的memorytable,把Forzen写入磁盘</p></blockquote><h2 id="Compaction"><a href="#Compaction" class="headerlink" title="Compaction"></a>Compaction</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306222305784.png" alt="屏幕截图(10)"></p><blockquote><p>Compaction操作是将多个SSTable合成一个，能提高查询效率，但提高了能耗</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306222306198.png" alt="屏幕截图(11)"></p><blockquote><p>Compaction三个概念：1.对写放大2.空间放大3.读放大</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306222317586.png" alt="屏幕截图(12)"></p><p>比较常用的策略</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306222319045.png" alt="屏幕截图(13)"></p><blockquote><p>三种策略对比</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库内核开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2023/05/31/MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/05/31/MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-amp-JavaWebの驴"><a href="#MySQL-amp-JavaWebの驴" class="headerlink" title="MySQL&amp;JavaWebの驴"></a>MySQL&amp;JavaWebの驴</h1><h2 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312200700.png" alt="屏幕截图 2023-03-06 203314"></p><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><blockquote><p>DDL:针对数据库和表的增删改</p><p>DML：对单个表的数据进行增删改</p><p>DQL：查询表中数据</p><p>DCL：对数据库进行权限控制</p></blockquote><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE db1(##创建表</span><br><span class="line">id int,##注意名在前，变量类型在后</span><br><span class="line">name varchar(10),</span><br><span class="line">age int,</span><br><span class="line">birth DATE);</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM db1;</span><br><span class="line">##SELECT `name` FROM db1;也可以单独查询一列</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE db1;</span><br><span class="line">##因为无法确定要删除的表是否存在，所以有更规范的写法：</span><br><span class="line">DROP TABLE if EXISTS db1；</span><br></pre></td></tr></table></figure><h3 id="表，列操作"><a href="#表，列操作" class="headerlink" title="表，列操作"></a>表，列操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE db1 RENAME TO stu;##表重命名</span><br><span class="line">ALTER TABLE stu ADD gender char(1);##添加列</span><br><span class="line">ALTER TABLE stu CHANGE gender sex char(1);##改列名</span><br><span class="line">ALTER TABLE stu DROP sex;##删除列</span><br></pre></td></tr></table></figure><h3 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu;</span><br></pre></td></tr></table></figure><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT into stu VALUES(1,&#x27;林峰&#x27;,20,&#x27;2002-12-17&#x27;);##全添加不用标</span><br><span class="line">INSERT INTO stu(id,name,age) VALUES (1,&#x27;小明&#x27;,20);##指明添加位置</span><br></pre></td></tr></table></figure><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE stu set birth = &#x27;1999-10-15&#x27; WHERE name = &#x27;小明&#x27;;</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from db1 where name = &#x27;小明&#x27;;</span><br></pre></td></tr></table></figure><h2 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h2><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--基础查询</span><br><span class="line">SELECT name FROM stu;</span><br></pre></td></tr></table></figure><h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--去重</span><br><span class="line">SELECT DISTINCT name FROM stu;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312201120.png" alt="屏幕截图 2023-03-07 195316"></p><h3 id="输出结果时起别名"><a href="#输出结果时起别名" class="headerlink" title="输出结果时起别名"></a>输出结果时起别名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--别名，as可省略</span><br><span class="line">SELECT id,name,age as 年龄,birth 生日 FROM stu;</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>条件：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312202759.png" alt="屏幕截图 2023-03-07 200024-1678190500305"></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--输出年龄大于等于20的人</span><br><span class="line">SELECT name FROM stu where age &gt;= 20;</span><br></pre></td></tr></table></figure><h3 id="x3D-x3D-模糊查询-x3D-x3D"><a href="#x3D-x3D-模糊查询-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;模糊查询&#x3D;&#x3D;"></a>&#x3D;&#x3D;模糊查询&#x3D;&#x3D;</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--模糊查询</span><br><span class="line">--_:代表任意一个字符</span><br><span class="line">--%:代表任意多个字符</span><br><span class="line">SELECT * FROM stu WHERE name like &#x27;%小%&#x27;;</span><br></pre></td></tr></table></figure><h3 id="排序查找"><a href="#排序查找" class="headerlink" title="排序查找"></a>排序查找</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--排序查找</span><br><span class="line">SELECT * FROM stu ORDER BY age ASC;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312203834.png" alt="屏幕截图 2023-03-07 201909"></p><h3 id="聚合函数和查找"><a href="#聚合函数和查找" class="headerlink" title="聚合函数和查找"></a>聚合函数和查找</h3><p>聚合函数：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312204496.png" alt="屏幕截图 2023-03-07 203958"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--统计数量,最好是用 *</span><br><span class="line">SELECT count(*) FROM stu;</span><br><span class="line">--最大值</span><br><span class="line">SELECT max(age) FROM stu;</span><br><span class="line">--最小值</span><br><span class="line">SELECT min(age) FROM stu;</span><br><span class="line">--平均值</span><br><span class="line">SELECT avg(age) FROM stu;</span><br><span class="line">--总和</span><br><span class="line">SELECT sum(age) FROM stu;</span><br></pre></td></tr></table></figure><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312205772.png" alt="屏幕截图 2023-03-07 205749"></p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><blockquote><p>格式：select 字段列表 from 表名 LIMIT 起始索引 ，查询条目数</p><p>计算公式：起始索引 &#x3D; （当前页码-1）* 每页条目数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu LIMIT 3,3;</span><br></pre></td></tr></table></figure><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312206756.png" alt="69337116782767212.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">##建表时：</span><br><span class="line">create table db1(</span><br><span class="line">    id int 约束名称</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line">##建表后</span><br><span class="line">alter table db1 modify</span><br></pre></td></tr></table></figure><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##创建表时</span><br><span class="line">constraint 键名 foreign key(作为从键的列)</span><br><span class="line">##创建表后</span><br><span class="line">alter table emp add constraint 键名 foreign key(作为从键的列)  referances 主键</span><br></pre></td></tr></table></figure><h3 id="内外链接"><a href="#内外链接" class="headerlink" title="内外链接"></a>内外链接</h3><p>隐式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 要查询的东西 from 表1，表2... where 条件</span><br></pre></td></tr></table></figure><p>显式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 要查询的东西 from  表1 join 表2 on 条件</span><br></pre></td></tr></table></figure><blockquote><p>内连接相当于几个表的交集</p></blockquote><p>外连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">左/右：</span><br><span class="line">select 字段 from 表1 left/right join 表2 on 条件</span><br></pre></td></tr></table></figure><blockquote><p>外连接相当于表1或表2全部加交集</p></blockquote><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312206866.png" alt="9A1C63D3EC824C450120034C619A175A"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312207013.png" alt="屏幕截图 2023-03-09 175024"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot实战——瑞吉外卖</title>
      <link href="/2023/05/20/SpringBoot%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/"/>
      <url>/2023/05/20/SpringBoot%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot实战——瑞吉外卖"><a href="#SpringBoot实战——瑞吉外卖" class="headerlink" title="SpringBoot实战——瑞吉外卖"></a>SpringBoot实战——瑞吉外卖</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305212218088.png" alt="屏幕截图 2023-05-21 221758"></p><h3 id="数据库创建："><a href="#数据库创建：" class="headerlink" title="数据库创建："></a>数据库创建：</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305212036703.png" alt="屏幕截图 2023-05-21 203358"></p><blockquote><p>表功能：</p><p>address_book：地址表</p><p>category：菜品和套餐表</p><p>dish: 菜品表</p><p>dish_flavor: 菜品口味关系表</p><p>employee: 员工表</p><p>order_detail: 订单明细</p><p>orders：订单表</p><p>setmeal：套餐表</p><p>setmeal_dish：套餐菜品关系表</p><p>shopping_cart：购物车</p><p>user：用户表</p></blockquote><h3 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3><p>不必多言</p><h3 id="pom配置："><a href="#pom配置：" class="headerlink" title="pom配置："></a>pom配置：</h3><p>这里其实版本号不一定是我的这个，各位可以自行在maven里导入适合自己的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    springboot组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.Lf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reggie_take_out<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    jdk版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web组件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MP--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Lombook--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库连接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line"><span class="comment">#    应用名称，不是必须</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">reggie_take_out</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line"><span class="comment">#      数据库连接信息</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#你自己的数据库链接信息，别写我的</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure><h3 id="创建启动类："><a href="#创建启动类：" class="headerlink" title="创建启动类："></a>创建启动类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lf.reggie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReggieApplication.class,args);</span><br><span class="line">        log.info(<span class="string">&quot;原神，启动！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导入静态页面："><a href="#导入静态页面：" class="headerlink" title="导入静态页面："></a>导入静态页面：</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305212312778.png" alt="image-20230521231237689"></p><blockquote><p>本次实战不要求前端页面编写，所以直接导入，资料来源与黑马程序员</p></blockquote><h2 id="功能开发"><a href="#功能开发" class="headerlink" title="功能开发"></a>功能开发</h2><h3 id="登录功能："><a href="#登录功能：" class="headerlink" title="登录功能："></a>登录功能：</h3><p>登录页面：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305212321998.png" alt="image-20230521232141953"></p><blockquote><p>前端发送数据 -&gt; controller接收 -&gt; 调用service -&gt;Mapper -&gt; 数据库</p></blockquote><p>流程还是老样子，不了解的可以看本网站springboot入门笔记</p><h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lf.reggie.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">//员工实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.lf.reggie.domain.Employee;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Employee&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.lf.reggie.domain.Employee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Employee&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service实现类"><a href="#service实现类" class="headerlink" title="service实现类"></a>service实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.lf.reggie.domain.Employee;</span><br><span class="line"><span class="keyword">import</span> com.lf.reggie.mapper.EmployeeMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;EmployeeMapper, Employee&gt; <span class="keyword">implements</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通用返回类型R"><a href="#通用返回类型R" class="headerlink" title="通用返回类型R"></a>通用返回类型R</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用返回类型，</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//快速返回一个成功R对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//快速返回一个错误R对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="登录功能controller"><a href="#登录功能controller" class="headerlink" title="登录功能controller"></a>登录功能controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lf.reggie.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//登录controller</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="comment">//因为前端发过来是Json数据，所以需要加 @RequestBody接收数据</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Params</span>: [request, employee]</span></span><br><span class="line"><span class="comment">         * request 之后用来获取session</span></span><br><span class="line"><span class="comment">         * employee 前端传入的账号密码</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Return</span> com.lf.reggie.domain.R&lt;com.lf.reggie.domain.Employee&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        1.前端提交的passowrd进行加密处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line"><span class="comment">//        2.根据用户名查询数据库</span></span><br><span class="line"><span class="comment">//        首先需要创建条件构造器，详情见SpringBoot学习笔记（一），条件查询</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//        构造条件,列名 + 值</span></span><br><span class="line">        queryWrapper.eq(Employee::getUsername, employee.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3.如果值为空，说明用户名不存在</span></span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        4.值不为空，则比对密码</span></span><br><span class="line">        <span class="keyword">if</span> (!emp.getPassword().equals(password)) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        5.判断用户是否被禁用</span></span><br><span class="line">        <span class="keyword">if</span> (emp.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;该用户已被禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        6.上面都通过了，说明可以登录,把emp对象放入session，方便其他调用</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;employee&quot;</span>, emp.getId());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="comment">//员工退出</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [request]</span></span><br><span class="line"><span class="comment">         * request 用于获取sesssion</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> com.lf.reggie.domain.R&lt;java.lang.String&gt;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">//        从session里面移除之前存的登录信息</span></span><br><span class="line">        request.removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="员工操作"><a href="#员工操作" class="headerlink" title="员工操作"></a>员工操作</h2><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><blockquote><p>过滤器是为了防止用户不登录而是通过网页url直接访问页面，有安全风险</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lf.reggie.filter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 过滤器，检查是否登录</span></span><br><span class="line"><span class="comment"> * 关于过滤器详情请见本网站学习笔记</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    路径匹配器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1.获取访问url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        System.out.println(<span class="string">&quot;访问路径&quot;</span> + requestURI);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2.设置放行路径,其中的路径不需要处理</span></span><br><span class="line">        String[] urls = &#123;<span class="string">&quot;/employee/login&quot;</span>, <span class="string">&quot;/employee/logout&quot;</span>, <span class="string">&quot;/backend/**&quot;</span>, <span class="string">&quot;/front/**&quot;</span>,<span class="string">&quot;/favicon.ico&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//        3.判断是否放行</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> checkUrl(urls, requestURI);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (b) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        4.判断用户是否登录</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">employee</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"><span class="comment">//        5.成功则放行</span></span><br><span class="line">        <span class="keyword">if</span> (employee != <span class="literal">null</span>) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//        6.用户未登录，给前端返回错误信息           </span></span><br><span class="line">       </span><br><span class="line">            response.getWriter().write((JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>))));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">checkUrl</span><span class="params">(String[] urls, String requestUrl)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Params</span>: [urls, requestUrl]</span></span><br><span class="line"><span class="comment">         * urls:放行路径</span></span><br><span class="line"><span class="comment">         * requestUrl： 请求路径</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Return</span> boolean</span></span><br><span class="line"><span class="comment">         * 判断是否放行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (String url :</span><br><span class="line">                urls) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestUrl);</span><br><span class="line">            <span class="keyword">if</span> (match) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加员工操作"><a href="#添加员工操作" class="headerlink" title="添加员工操作"></a>添加员工操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="comment">//    新增员工代码</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [request, employee]</span></span><br><span class="line"><span class="comment">         * request 获取session得到操作人信息，</span></span><br><span class="line"><span class="comment">         * employee 前端传的员工信息</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> com.lf.reggie.domain.R&lt;java.lang.String&gt;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        log.info(<span class="string">&quot;新增员工信息&#123;&#125;&quot;</span>,employee);</span><br><span class="line"><span class="comment">//        md5加密密码，初始密码为123456</span></span><br><span class="line">        employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//       给我们新增的信息加点料： 创建时间，更新时间，创建人，更新人</span></span><br><span class="line">        employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> (Long) session.getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">        employee.setCreateUser(id);</span><br><span class="line">        employee.setUpdateUser(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        调用方法保存数据库</span></span><br><span class="line">        employeeService.save(employee);</span><br><span class="line"><span class="comment">//        System.out.println(employee);</span></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增员工成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>关于controller的访问url你得看前端html页面访问的url，根据它写我们后端的@Post&#x2F;Getmapping </p><h3 id="全局异常捕获"><a href="#全局异常捕获" class="headerlink" title="全局异常捕获"></a>全局异常捕获</h3><p>当我们重复添加员工信息，数据库就会给我们报错，因为我们的username字段是唯一的</p><p>这种情况我们可以选择利用try - catch结构来捕获异常，但这样我们要在每一个可能抛出异常的代码上写一遍，未免太过麻烦，我们就可以选择全局异常捕获</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 全局异常捕获</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//这个异常捕获类可以捕获加了哪些注解的异常</span></span><br><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        捕获异常后的异常处理方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line">        <span class="keyword">if</span>(ex.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;员工已存在，添加失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分页查询操作"><a href="#分页查询操作" class="headerlink" title="分页查询操作"></a>分页查询操作</h3><p>要想实现分页查询，首先需要创建一个MP配置类，用来配置分页查询拦截器，具体实现如下，在我之前的学习笔记中也有相关介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * MP配置分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拦截器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//配置分页拦截器</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//    分页查询</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        分页构造器：</span></span><br><span class="line">        <span class="type">Page</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(page, pageSize);</span><br><span class="line"><span class="comment">//        条件构造器：</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//        加条件：</span></span><br><span class="line">        queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);</span><br><span class="line"><span class="comment">//        排序条件：</span></span><br><span class="line">        queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        调用service执行查询,自动封装到pageInfo</span></span><br><span class="line">        employeeService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305262243130.png" alt="屏幕截图 2023-05-26 224332"></p><h3 id="用户禁用启用"><a href="#用户禁用启用" class="headerlink" title="用户禁用启用"></a>用户禁用启用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    修改员工信息</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">updata</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">empID</span> <span class="operator">=</span> (Long)session.getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"><span class="comment">//        更新时间，和操作人</span></span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        employee.setUpdateUser(empID);</span><br><span class="line"><span class="comment">//        调用service</span></span><br><span class="line">        employeeService.updateById(employee);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样写会有点小问题，因为我们修改是按照前端传来的id来定位对哪一行修改的，但是前端传来的id如果本身太长，会造成失真，也就是id会显示不正确，不正确的id自然也不能正确找到要修改的数据，所以如果只写上面的controller是不够的，还需要配置新的json转换器</p><p>转换器（JacksonObjectMapper）代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lf.reggie.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们需要设置配置类，将我们自定义的数据转换器加到mvc默认的数据转换器集合中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lf.reggie.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lf.reggie.common.JacksonObjectMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: 扩展消息转换器</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      创建消息转换器对象</span></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">mjhmc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//      设置对象转换器，把我们自定义好的转换器传进去</span></span><br><span class="line">        mjhmc.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line"><span class="comment">//       将设置好的对象转换器加入到我们mvc框架的转换器集合中</span></span><br><span class="line">        converters.add(<span class="number">0</span>,mjhmc);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样才算大功告成</p><blockquote><p>注意，这里你如果跟着课程走，他的配置类可能是继承了 WebMvcConfigurationSupport 这个类，然后你可能出现404错误，因为WebMvcConfigurationSupport存在时会自动无效化mvc的默认静态资源路径（我用的是implements WebMvcConfigurer 不覆盖默认），但实际上只要你把静态路径放到&#x2F;resources&#x2F;static下，这里是默认静态访问路径，根本就不需要自己用WebMvcConfigurationSupport配置，我不太理解为什么课程要自己配置，多了很多麻烦</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305291955089.png" alt="屏幕截图 2023-05-29 195515"></p><h3 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Long updateUser;</span><br></pre></td></tr></table></figure><p>在我们的employee实体类上，可以看到有这么几条属性，上面的注解@TableField(fill &#x3D; FieldFill.INSERT)&amp;</p><p>@TableField(fill &#x3D; FieldFill.INSERT_UPDATE) 是MP包为我们提供的可以对公共字段插入或更新时，统一进行操作，而不用我们单独设置每个对象的公共属性，例如更新时间，我们可以利用这个注解在进行数据库更新时，自动为更新后的数据加入更新时间</p><p>写我们自定义的字段补全类，实现接口：implements MetaObjectHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 自定义元对象数据处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjecthandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        System.out.println(BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里注意，我们在写controller时可以利用request获得session进而获得共享的数据，但在普通java类中没法这么操作，但我们可以利用线程共享，且数据只能在同一线程中使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 线程内共享数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    设置数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    取数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Long <span class="title function_">getCurrentId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再在filter中加入已登录用户的id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        5.成功则放行</span></span><br><span class="line">        <span class="keyword">if</span> (employee != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//            将用户登录id存入线程</span></span><br><span class="line">            BaseContext.setCurrentId(employee);</span><br><span class="line">            filterChain.doFilter(request, response);</span><br></pre></td></tr></table></figure><p>成功，现在我们不需要手动设置时间，操作人等，他会自动设置</p><h2 id="菜品操作"><a href="#菜品操作" class="headerlink" title="菜品操作"></a>菜品操作</h2><h3 id="实体类-amp-mapper-amp-服务接口-amp-接口实现"><a href="#实体类-amp-mapper-amp-服务接口-amp-接口实现" class="headerlink" title="实体类&amp;mapper&amp;服务接口&amp;接口实现"></a>实体类&amp;mapper&amp;服务接口&amp;接口实现</h3><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//类型 1 菜品分类 2 套餐分类</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    新增分类</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;category:&#123;&#125;&quot;</span>,category);</span><br><span class="line"></span><br><span class="line">        categoryService.save(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305302256590.png" alt="image-20230530225627454"></p><p>成功</p><h3 id="分页操作"><a href="#分页操作" class="headerlink" title="分页操作"></a>分页操作</h3><p>可以类比着之前的写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//    分页查询</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line"></span><br><span class="line">        Page&lt;Category&gt; p = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line"><span class="comment">//        条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Category&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        lambdaQueryWrapper.orderByDesc(Category::getSort);</span><br><span class="line">        categoryService.page(p,lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(p);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305302253744.png" alt="image-20230530225337619"></p><p>完成</p><h3 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h3><blockquote><p>这个删除肯定不能直接remove这么简单了，按照业务需求，如果该分类下有东西，那我们就不能直接将其删除，所以在删除之前，我们应该查询该分类下有没有菜品（套餐）</p></blockquote><p>service自定义删除方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line"><span class="comment">//    按分类查询</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetMealService setMealService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Params</span>: [id]</span></span><br><span class="line"><span class="comment"> * 查询传进来的id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment"> * 自定义一个查询，因为业务要求我们如果删除项和其他项有关联，就不能删除</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//      查询条件：看是否有关联菜品</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        dishLambdaQueryWrapper.eq(Dish::getCategoryId,id);</span><br><span class="line"><span class="comment">//      如果数量大于0则说明有关联</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(count1 &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//            抛异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;删除失败，分类包含菜品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        查询条件，看是否关联套餐</span></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId,id);</span><br><span class="line"><span class="comment">//      数量大于0说明有关联</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> setMealService.count(setmealLambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(count2 &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//            抛异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;删除失败，分类包含套餐&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//     如果分类下为空，则正常删除</span></span><br><span class="line">        <span class="built_in">super</span>.removeById(id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>自定义删除异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 自定义删除异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还需要用到我们之前为了捕获用户重复加入写的全局异常捕捉（加一个新的捕捉方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    捕获关联删除异常</span></span><br><span class="line"><span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException ex)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        捕获异常后的异常处理方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    log.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305302253203.png" alt="屏幕截图 2023-05-30 225252"></p><p>完成</p><h3 id="修改分类"><a href="#修改分类" class="headerlink" title="修改分类"></a>修改分类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    修改分类信息</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [category]</span></span><br><span class="line"><span class="comment">         * 前端传入的分类信息，包括id</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> com.lf.reggie.domain.R&lt;java.lang.String&gt;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        log.info(<span class="string">&quot;修改分类信息：&#123;&#125;&quot;</span>,category);</span><br><span class="line"></span><br><span class="line">        categoryService.updateById(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;修改分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个比较简单，不做太多说明</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306012214880.png" alt="image-20230601221451747"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306012215791.png" alt="image-20230601221513715"></p><p>OK</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>文件上传的后端处理其实在springboot中得到了极大简化，只需要用到MultipartFile</p><p>具体代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line"><span class="comment">//       此处接收到的file是临时文件，需要将其转存</span></span><br><span class="line">        log.info(file.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        利用UUID重新生成文件名,防止文件名重复</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            上传的文件转存</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basepath + filename));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            R.error(<span class="string">&quot;上传失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(filename);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>配置文件中的基础路径：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reggie:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\java\reggie_take_out\src\main\img\</span></span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306012322871.png" alt="image-20230601232242744"></p><h3 id="文件下载（上传回显）"><a href="#文件下载（上传回显）" class="headerlink" title="文件下载（上传回显）"></a>文件下载（上传回显）</h3><p>实现了文件上传功能后，一般还会追加一个上传回显功能，能够让用户直接看到自己上传的图片出现在上传框内，还能让其他用户也看到上传的图片。</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [name, response]</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment">         * 文件下载</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            输入流，获取图片</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basepath + name));</span><br><span class="line"><span class="comment">//            输出流，回显图片</span></span><br><span class="line">            <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">            response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((len = fileInputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//                回显</span></span><br><span class="line">                outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            outputStream.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里传入的name其实是我们上传后返回给页面的文件名，然后利用fileInputStream将文件下载到本地并回显，最后关闭流。</p><h3 id="新增菜品-1"><a href="#新增菜品-1" class="headerlink" title="新增菜品"></a>新增菜品</h3><p>由于新增菜品涉及到对两张表（菜品，口味）进行修改，因此我们常规的菜品和口味实体类无法同时封装新增的菜品信息，因此我们需要用的一个数据传输对象（dto）来支持前端到后端的数据传输，类似于这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这个整合了dish和dishflavor两个类的数据传输对象，我们能够将前端传入的数据完全封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Params</span>: [dishDto]</span></span><br><span class="line"><span class="comment">      * 新的dto，可以封装菜品信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span> com.lf.reggie.domain.R&lt;java.lang.String&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     log.info(dishDto.toString());</span><br><span class="line">     dishService.saveWithFlavor(dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>记得加@RequestBody</p></blockquote><p>然后我们需要新增一条新的业务方法，能够支持同时修改dish和flavor两张表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    这里涉及了多张表，需要添加事务</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>: 实现同时添加菜品和口味</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [dishDto]</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">//        保存菜品</span></span><br><span class="line">        <span class="built_in">this</span>.save(dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> dishDto.getId();</span><br><span class="line"></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line"><span class="comment">//      添加菜品id</span></span><br><span class="line">        <span class="keyword">for</span> (DishFlavor item:flavors</span><br><span class="line">             ) &#123;</span><br><span class="line">            item.setDishId(id);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        保存口味</span></span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="补充PO、VO、DAO、BO、DTO、POJO解释"><a href="#补充PO、VO、DAO、BO、DTO、POJO解释" class="headerlink" title="补充PO、VO、DAO、BO、DTO、POJO解释"></a>补充PO、VO、DAO、BO、DTO、POJO解释</h3><h4 id="PO"><a href="#PO" class="headerlink" title="PO"></a>PO</h4><p>PO是“Persistent Object”的缩写，意为“持久化对象”。它通常用于表示数据库中的一条记录，即一组相关的数据。PO是由ORM（对象关系映射）框架生成或手动创建的Java对象，它们通常具有与数据库中的表相同的字段和数据类型。在Java开发中，PO常常被用作DAO（数据访问对象）层的数据模型，以及和数据库交互的对象。PO对象中的字段与数据库中的列相对应，每一行数据对应一个PO对象，PO对象中的字段值就是对应列的值。</p><h4 id="VO"><a href="#VO" class="headerlink" title="VO"></a>VO</h4><p>VO是“Value Object”的缩写，意为“值对象”。VO通常用于表示程序中的某个值或者一组相关的值，例如用户的姓名、年龄、地址等等。VO通常是一个不可变对象，也就是说，它的值在创建之后就不能再修改。在Java开发中，VO对象通常用于在不同层之间传递数据，例如在Controller层和Service层之间传递数据。VO对象和PO对象类似，但是它们的作用不同。VO通常是从PO对象中提取出来的一部分数据，用于展示和传递给前端界面。</p><h4 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h4><p>DAO是“Data Access Object”的缩写，意为“数据访问对象”。DAO层是整个应用程序中与数据库交互的核心部分。DAO层负责将数据库中的数据转换成Java对象，并将Java对象的数据保存到数据库中。DAO层的主要作用是隔离上层业务逻辑和下层数据访问细节。在Java开发中，通常使用Hibernate等ORM框架来实现DAO层。DAO层的主要任务是实现数据的增删改查等基本操作，同时提供一些高级查询功能。</p><h4 id="BO"><a href="#BO" class="headerlink" title="BO"></a>BO</h4><p>BO是“Business Object”的缩写，意为“业务对象”。BO通常用于表示某个业务逻辑的实体或者模型。BO通常包含一些业务逻辑和方法，例如计算某些值、验证数据、调用其他服务等等。在Java开发中，BO对象通常由Service层或者Facade层来创建，并且它们通常包含一些业务逻辑的实现，以及对数据的操作。BO通常是针对具体的业务场景而设计的，它们是具有业务含义的实体。</p><h4 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h4><p>DTO是“Data Transfer Object”的缩写，意为“数据传输对象”。DTO通常用于在不同层之间传输数据，例如在Controller层和Service层之间传输数据。DTO对象通常包含一些简单的数据结构，例如字符串、整数、布尔值等等。在Java开发中，DTO对象通常由Controller层或者Service层来创建，并且它们通常是不可变的。</p><h4 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h4><p>POJO是“Plain Old Java Object”的缩写，意为“简单的Java对象”。POJO通常指的是一个没有任何限制、继承或实现特定接口的普通Java对象。POJO对象通常是一种轻量级的Java对象，没有任何框架或者注解的依赖。在Java开发中，POJO对象通常用于表示简单的数据模型或者数据传输对象。</p><h3 id="修改菜品"><a href="#修改菜品" class="headerlink" title="修改菜品"></a>修改菜品</h3><p>首先页面信息的修改一定离不开的就是回显数据</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309142208417.png" alt="image-20230914220847306"></p><p>只有回显数据，才能看到我们即将修改的信息</p><p>回显的实现并不困难，从前端角度来说，只需要在页面加载完毕后自动向后端发送一次请求，调用后端的get方法获得商品数据，然后通过json发回前端进行显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        拦截器</span></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId,id);</span><br><span class="line"></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishFlavorService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        BeanUtils.copyProperties(dish,dishDto);</span><br><span class="line">        dishDto.setFlavors(flavors);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码实现也都是之前学过的内容</p><p>修改的代码也没什么好说的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  更新菜品信息</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishdto)</span> &#123;</span><br><span class="line"><span class="comment">//        更新dish表</span></span><br><span class="line">        dishService.updateById(dishdto);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        删除原先口味表里存在的口味数据</span></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId,dishdto.getId());</span><br><span class="line"></span><br><span class="line">        dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        重新添加口味信息</span></span><br><span class="line">        dishFlavorService.saveBatch(dishdto.getFlavors());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以上方法均新增在service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Dish&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    新增方法，同时保存菜品和口味</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   新增方法，查询菜品信息和口味</span></span><br><span class="line">    <span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    新增方法，更新菜品信息和口味</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishdto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="套餐"><a href="#套餐" class="headerlink" title="套餐"></a>套餐</h2><h3 id="新增套餐"><a href="#新增套餐" class="headerlink" title="新增套餐"></a>新增套餐</h3><p>由于新增套餐设计到多表操作，所以先在接口中定义新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    保存菜品和套餐</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithMeal</span><span class="params">(SetmealDto setmealDto)</span>;</span><br></pre></td></tr></table></figure><p>并在接口实现类中手动实现该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithMeal</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line"><span class="comment">//        保存套餐基本信息</span></span><br><span class="line">        <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line"><span class="comment">//        保存菜品和套餐关系</span></span><br><span class="line">        List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">        <span class="keyword">for</span>(SetmealDish i:setmealDishes)&#123;</span><br><span class="line">            i.setSetmealId(setmealDto.getId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setMealDishService.saveBatch(setmealDishes);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样在controller中直接调用该方法，就能实现新增套餐并将套餐和餐品联系起来。</p><h3 id="分页展示套餐"><a href="#分页展示套餐" class="headerlink" title="分页展示套餐"></a>分页展示套餐</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Params</span>: [page, pageSize] 页码和页大小</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Return</span> com.lf.reggie.domain.R&lt;com.baomidou.mybatisplus.extension.plugins.pagination.Page&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    Page&lt;SetmealDto&gt; dtopage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    lambdaQueryWrapper.like(name != <span class="literal">null</span>,Setmeal::getName,name);</span><br><span class="line">    lambdaQueryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    setMealService.page(pageInfo,lambdaQueryWrapper);</span><br><span class="line">    BeanUtils.copyProperties(pageInfo,dtopage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; pageInfoRecords = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;SetmealDto&gt; records = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Setmeal item :</span><br><span class="line">            pageInfoRecords) &#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">sd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item,sd);</span><br><span class="line"></span><br><span class="line">        sd.setCategoryName( categoryService.getById(item.getCategoryId()).getName());</span><br><span class="line">        records.add(sd);</span><br><span class="line">    &#125;</span><br><span class="line">    dtopage.setRecords(records);</span><br><span class="line">    <span class="keyword">return</span> R.success(dtopage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分页操作我们之前已经进行过很多次了，具体操作不再赘述，但此处有一个细节，因为前端页面要求显示套餐分类，而普通的</p><p>Setmeal类中没有套餐分类属性，所以我们需要setmealdto。</p><p>效果展示：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310010156613.png" alt="image-20231001015601525"></p><h2 id="用户手机端操作"><a href="#用户手机端操作" class="headerlink" title="用户手机端操作"></a>用户手机端操作</h2><h3 id="验证码登录功能"><a href="#验证码登录功能" class="headerlink" title="验证码登录功能"></a>验证码登录功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span>&#123;</span><br><span class="line"><span class="comment">//      获取手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line"></span><br><span class="line"><span class="comment">//       生成随机验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> ValidateCodeUtils.generateValidateCode(<span class="number">4</span>).toString();</span><br><span class="line"><span class="comment">//        发送短信(由于发送短信需要额外申请互联网服务，需要花钱，此处仅作演示)</span></span><br><span class="line">        log.info(<span class="string">&quot;验证码&#123;&#125;&quot;</span>,code);</span><br><span class="line"><span class="comment">//       session 保存验证码</span></span><br><span class="line">        session.setAttribute(phone,code);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;短信发送成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map,HttpSession session)</span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(map.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line"><span class="comment">//        获取验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line"><span class="comment">//        取session验证码</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">session_code</span> <span class="operator">=</span> session.getAttribute(phone);</span><br><span class="line">        <span class="keyword">if</span>(session_code != <span class="literal">null</span> &amp;&amp; session_code.equals(code))&#123;</span><br><span class="line">            LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            lambdaQueryWrapper.eq(User::getPhone,phone);</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(lambdaQueryWrapper);</span><br><span class="line">            <span class="keyword">if</span>(user != <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//                虚晃</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">                user.setPhone(phone);</span><br><span class="line">                user.setStatus(<span class="number">1</span>);</span><br><span class="line">                userService.save(user);</span><br><span class="line">            &#125;</span><br><span class="line">            session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">            <span class="keyword">return</span> R.success(user);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        比对</span></span><br><span class="line"><span class="comment">//        另外判断是否新用户（自动注册）</span></span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;错误！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成随机码函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lf.reggie.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机生成验证码工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidateCodeUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 长度为4位或者6位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">generateValidateCode</span><span class="params">(<span class="type">int</span> length)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">4</span>)&#123;</span><br><span class="line">            code = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">9999</span>);<span class="comment">//生成随机数，最大为9999</span></span><br><span class="line">            <span class="keyword">if</span>(code &lt; <span class="number">1000</span>)&#123;</span><br><span class="line">                code = code + <span class="number">1000</span>;<span class="comment">//保证随机数为4位数字</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(length == <span class="number">6</span>)&#123;</span><br><span class="line">            code = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">999999</span>);<span class="comment">//生成随机数，最大为999999</span></span><br><span class="line">            <span class="keyword">if</span>(code &lt; <span class="number">100000</span>)&#123;</span><br><span class="line">                code = code + <span class="number">100000</span>;<span class="comment">//保证随机数为6位数字</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;只能生成4位或6位数字验证码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成指定长度字符串验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateValidateCode4String</span><span class="params">(<span class="type">int</span> length)</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rdm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">hash1</span> <span class="operator">=</span> Integer.toHexString(rdm.nextInt());</span><br><span class="line">        <span class="type">String</span> <span class="variable">capstr</span> <span class="operator">=</span> hash1.substring(<span class="number">0</span>, length);</span><br><span class="line">        <span class="keyword">return</span> capstr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单说就是：前端收到发送验证码请求后，后端调用专门的api接通网络服务给前端传入的手机号发短信验证码（此处用log代替了）,用户收到后，将验证码填入前端的验证码窗并点击登录，后端的登录方法接收到phone和code后先是根据phone从session（事先存入的）中取得对应code，然后进行对比，一致的话在进行之后的操作（判断是否新用户等）</p><h1 id="说明：后面的功能基本上和之前的套路一致，笔记先不做了，之后看看有时间复习的时候做。"><a href="#说明：后面的功能基本上和之前的套路一致，笔记先不做了，之后看看有时间复习的时候做。" class="headerlink" title="说明：后面的功能基本上和之前的套路一致，笔记先不做了，之后看看有时间复习的时候做。"></a>说明：后面的功能基本上和之前的套路一致，笔记先不做了，之后看看有时间复习的时候做。</h1><h2 id="项目优化（redis）"><a href="#项目优化（redis）" class="headerlink" title="项目优化（redis）"></a>项目优化（redis）</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application（redis连接信息）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">*</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">*</span></span><br><span class="line">  <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="缓存验证码"><a href="#缓存验证码" class="headerlink" title="缓存验证码"></a>缓存验证码</h2><p>之前的验证码是保存在session中的</p><p>优化一下，将其保存在redis中</p><ol><li>获取验证码后，通过set存入redis</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        使用redis存储验证码，并设置有效期为5分钟</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(phone,code,<span class="number">5</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><ol><li>登录时get获取验证码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////        取session验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">session_code</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(phone);</span><br></pre></td></tr></table></figure><ol><li>登陆成功删除</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.delete(phone);</span><br></pre></td></tr></table></figure><h2 id="缓存菜品"><a href="#缓存菜品" class="headerlink" title="缓存菜品"></a>缓存菜品</h2><p>当高并发模式下，每次调用菜品的list方法都要查询数据库，这样无疑增加了资源消耗，如果将</p><p>查出的菜品放到缓存中，在查找前先找缓存，如果缓存中存在需要的，则直接调用，另外缓存中的数据在修改或增加的时候需要删除，为的是在下次查找时放入新数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        构造一个key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;key&quot;</span> + dish.getCategoryId() + <span class="string">&quot;_&quot;</span> + dish.getStatus();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        先从redis中查询数据</span></span><br><span class="line">        dishDtos = (List&lt;DishDto&gt;) redisTemplate.opsForValue().get(key);</span><br></pre></td></tr></table></figure><h2 id="SpringCache"><a href="#SpringCache" class="headerlink" title="SpringCache"></a>SpringCache</h2><p>这是一个靠注解就能实现缓存的框架（不用自己手动存入redis）</p><p>常用注解：<br><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202312062017391.png" alt="image-20231206201708239"></p><p>@EnableCaching 放在启动类上，代表开启缓存注释功能</p><p>@Cacheable 有缓存直接返回，不调用方法（查找） 它还有个condition &#x3D; “”，里面可以塞判断条件，比如在查找数据时在数据库找不到，这样缓存里面就会留下一个查询条件的key还有个为null的value，所以可以condition&#x3D;’’#result !&#x3D; null’</p><p>@CachePut 放在方法上（一般是保存数据，把新增的数据加到缓存中）</p><p>使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut(value = &quot;&quot;,key = &quot;&quot;)</span></span><br></pre></td></tr></table></figure><p>value: 缓存名称（相当于一个分类，每个分类下可以有多个key，比如用户缓存，下面可以有多个用户）</p><p>key：就是key值，用来查找value</p><blockquote><p>这个key值可以通过一些特殊方法来取比如：#result 代表当前方法的返回值（比如返回一个user对象，你可以#result.id）#root通过这个你可以取到当前的方法名，比如（#root.methodName）还可以</p><p>#+参数名，然后用参数名里面的属性值 比如参数里面有个user（需要添加的新数据）,你就可以这样写：key &#x3D; #user.id，把用户id作为key</p></blockquote><p>@CacheEvict 同理删除哪个，先指定name，再指定key（#user.id）（更新数据）</p><h2 id="切换缓存产品"><a href="#切换缓存产品" class="headerlink" title="切换缓存产品"></a>切换缓存产品</h2><p>上一个说的springcache是spring自带的，他不需要引入除spring原始jar包之外的包，而我们如果想用redis作为我们的缓存服务产品(springCache如果项目重启，则缓存清空，redis可以保存本地一段时间)，就需要引入专门的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后可以在配置中设置过期时间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cache:</span><br><span class="line">redis:</span><br><span class="line">time-to-live: ***(单位ms)</span><br></pre></td></tr></table></figure><p>注意：<br>用到cacheable将方法返回值缓存时，方法返回值需要能被序列化（一般返回的是自拟类的话就不可以，需要在类上继承 implements Serializable ）</p>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot入门 </tag>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客</title>
      <link href="/2023/05/08/helloworld/"/>
      <url>/2023/05/08/helloworld/</url>
      
        <content type="html"><![CDATA[<h1 id="此间奥秘都在博客里了"><a href="#此间奥秘都在博客里了" class="headerlink" title="此间奥秘都在博客里了"></a>此间奥秘都在博客里了</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>驴のSpringBoot学习笔记（二）</title>
      <link href="/2023/03/30/SpringBoot%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/03/30/SpringBoot%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="驴のSpringBoot学习笔记（二）"><a href="#驴のSpringBoot学习笔记（二）" class="headerlink" title="驴のSpringBoot学习笔记（二）"></a>驴のSpringBoot学习笔记（二）</h1><blockquote><p>部分笔记来自于黑马教育</p></blockquote><h1 id="1-NoSQL"><a href="#1-NoSQL" class="headerlink" title="1.NoSQL"></a>1.NoSQL</h1><h2 id="1-1Redis数据库"><a href="#1-1Redis数据库" class="headerlink" title="1.1Redis数据库"></a>1.1Redis数据库</h2><blockquote><p>Redis和MySQL一样，也是一种数据库类型，但和MySQL相比有着一些不同：</p><ol><li>MySQL是关系型数据库，而Redis是非关系型数据库（NoSQL）。</li><li>MySQL用于持久化存储数据到硬盘，功能强大，但是速度缓慢；而Redis用于存储使用较为频繁的数据到缓存中，读取速度快。</li><li>MySQL的数据存放在磁盘中；而Redis的数据存放在内存中。</li></ol></blockquote><p>下载地址：<a href="https://github.com/tporadowski/redis/releases">https://github.com/tporadowski/redis/releases</a> （科学上网）</p><h3 id="1-1-1Redis数据库简单使用"><a href="#1-1-1Redis数据库简单使用" class="headerlink" title="1.1.1Redis数据库简单使用"></a>1.1.1Redis数据库简单使用</h3><p>下载完成后文件目录：</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305092210779.png"/><p>在该目录下启动cmd，并输入  redis-cli.exe ，你会看到这玩意</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305092212119.png"/><p>这里先不要操作，先输入shutdown，再exit</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305092214533.png"/><p>执行完上述操作后，再输入 redis-server.exe redis.windows.conf，就可以运行我们的redis了</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305092216621.png"/><p>再重新打开 redis-cli.exe，尝试一次简单的存取</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305092219511.png"/><p>ok，现在你已经会了redis了👍</p><h2 id="1-2Mongodb数据库"><a href="#1-2Mongodb数据库" class="headerlink" title="1.2Mongodb数据库"></a>1.2Mongodb数据库</h2><blockquote><p>Mongodb是一个开源文档型数据库，是NoSQL数据库产品的一种，是最像关系型数据库的非关系型数据库</p><p>特点：</p><p>临时性存储相结合，且修改频率高（类似于游戏道具，直播间在线人数），应用场景数据变化较快</p></blockquote><h1 id="2-SpringBoot整合Redis"><a href="#2-SpringBoot整合Redis" class="headerlink" title="2.SpringBoot整合Redis"></a>2.SpringBoot整合Redis</h1><h2 id="2-1创建整合Redis的新项目"><a href="#2-1创建整合Redis的新项目" class="headerlink" title="2.1创建整合Redis的新项目"></a>2.1创建整合Redis的新项目</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305092254632.png" alt="屏幕截图 2023-05-09 222955"></p><h2 id="2-2简单编写一个测试类"><a href="#2-2简单编写一个测试类" class="headerlink" title="2.2简单编写一个测试类"></a>2.2简单编写一个测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootRedisDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是redis的操作接口对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate;<span class="comment">//这个玩意儿是面向对象的，但我们在本地cmd执行的是面向字符串，</span></span><br><span class="line">    <span class="comment">//StringRedisTemplate redisTemplate;这玩意就是面向字符串的</span></span><br><span class="line"><span class="comment">//这样就可以保证我们idea和cmd操作一致了</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">ops</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        ops.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">ops</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> ops.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305092257992.png" alt="屏幕截图 2023-05-09 225708"></p><p>成功get到了</p><h1 id="3-常用第三方技术整合"><a href="#3-常用第三方技术整合" class="headerlink" title="3.常用第三方技术整合"></a>3.常用第三方技术整合</h1><h2 id="3-1关于缓存"><a href="#3-1关于缓存" class="headerlink" title="3.1关于缓存"></a>3.1关于缓存</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305101750772.png" alt="屏幕截图 2023-05-10 174952"></p><h2 id="3-2使用缓存"><a href="#3-2使用缓存" class="headerlink" title="3.2使用缓存"></a>3.2使用缓存</h2><p>1.导入缓存依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        缓存--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.启用缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span><span class="comment">//加入这个注解，启用缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.使用缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 在需要缓存的方法上加入注解，将方法得到的数据存入缓存</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Params</span>: </span></span><br><span class="line"><span class="comment"> * value = &quot;cacheSpace&quot; cacheSpace给缓存空间起个名</span></span><br><span class="line"><span class="comment"> * key = &quot;All&quot;  All给缓存的数据起名，方便取（唯一）</span></span><br><span class="line"><span class="comment"> * 另外例如以id取数据，就需要以id命名，方便，这种key就可以这样写key=“#id”</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Return</span> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;cacheSpace&quot;,key = &quot;All&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.getAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3关于缓存的实例：手机验证码模拟"><a href="#3-3关于缓存的实例：手机验证码模拟" class="headerlink" title="3.3关于缓存的实例：手机验证码模拟"></a>3.3关于缓存的实例：手机验证码模拟</h2><p>关于在pom里整合cache，还有启动类的注解在上面讲过了，这里就省略</p><p>包装类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String tele;<span class="comment">//电话</span></span><br><span class="line">    <span class="keyword">private</span> String code;<span class="comment">//验证码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SMSCodeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接受手机号，生成验证码，底层再以手机号为key缓存验证码</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendCodeToSMS</span><span class="params">(String tele)</span>;</span><br><span class="line"><span class="comment">//检查输入验证码和缓存里的验证码是否一致</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkCode</span><span class="params">(SMSCode smsCode)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSCodeServviceImpl</span> <span class="keyword">implements</span> <span class="title class_">SMSCodeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CodeUtil codeUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//电话号码作为key存储缓存</span></span><br><span class="line">    <span class="comment">//CachePut只管向缓存里放，如果缓存里有key相同的，则会覆盖</span></span><br><span class="line">    <span class="comment">//@Cacheable 如果缓存里有，就不会更新了</span></span><br><span class="line">    <span class="meta">@CachePut(value = &quot;smsCode&quot;,key = &quot;#tele&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendCodeToSMS</span><span class="params">(String tele)</span> &#123;</span><br><span class="line">        <span class="comment">//调用工具类，生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">generator</span> <span class="operator">=</span> codeUtil.generator(tele);</span><br><span class="line">        <span class="keyword">return</span> generator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkCode</span><span class="params">(SMSCode smsCode)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tele</span> <span class="operator">=</span> smsCode.getTele();</span><br><span class="line">        <span class="comment">//调用工具类，获取缓存里的验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> codeUtil.get(tele);</span><br><span class="line"><span class="comment">//比较</span></span><br><span class="line">        <span class="keyword">return</span> smsCode.getCode().equals(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] patch = &#123;<span class="string">&quot;000000&quot;</span>, <span class="string">&quot;00000&quot;</span>, <span class="string">&quot;0000&quot;</span>, <span class="string">&quot;000&quot;</span>, <span class="string">&quot;00&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法用来随机生成验证码，不多做解释</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generator</span><span class="params">(String tele)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> tele.hashCode();</span><br><span class="line">        <span class="type">int</span> <span class="variable">encryption</span> <span class="operator">=</span> <span class="number">2023510</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> code ^ encryption;</span><br><span class="line">        <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        result = result ^ now;</span><br><span class="line">        <span class="type">long</span> <span class="variable">pwcode</span> <span class="operator">=</span> result % <span class="number">1000000</span>;</span><br><span class="line">        <span class="comment">//负变正</span></span><br><span class="line">        pwcode = pwcode &lt; <span class="number">0</span> ? -pwcode : pwcode;</span><br><span class="line">        <span class="comment">//验证码补齐</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">codestr</span> <span class="operator">=</span> pwcode + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> codestr.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  patch[length] + codestr;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//该方法用来根据key获取缓存里的验证码</span></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;smsCode&quot;,key = &quot;#tele&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String tele)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>control类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sms&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSCodeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SMSCodeService smsCodeService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">(String tel)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> smsCodeService.sendCodeToSMS(tel);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkCode</span><span class="params">(SMSCode smsCode)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> smsCodeService.checkCode(smsCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果实现：</p><p>启动咱们的apifox，嘿，发送个get请求，嘿：</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305102202711.png"/><p>嘿，咱再发送个post请求，验证验证我们的手机号和验证码</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305102204522.png" alt="屏幕截图 2023-05-10 220322"></p><p>true了😆</p><h1 id="4-Quartz触发器"><a href="#4-Quartz触发器" class="headerlink" title="4.Quartz触发器"></a>4.Quartz触发器</h1><blockquote><p>Quartz是一个触发器框架，主要功能就是配置程序的一个触发器，比如（零点秒杀，就需要一个在零点自动启动的程序）</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305102258375.png" alt="屏幕截图 2023-05-10 225648"></p><p>步骤：</p><p>1.在pom里整合Quartz</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Quartz定时触发器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.创建quartz类，注意，该类必须继承 QuartzJobBean才能生效(乌龟的屁股——龟腚)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyQuartz</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line">    <span class="comment">//继承之后重写其中的抽象方法</span></span><br><span class="line">    <span class="comment">//该方法就定义了你的工作，上图第一步</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;quartz is running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建配置类来配置工作明细，触发器</p><p>这里面门道有点多，建议各位自己找资料深入了解了解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">jobDetail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//工作明细,绑定具体工作</span></span><br><span class="line">        <span class="comment">//创建该类对应的具体工作</span></span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(MyQuartz.class).storeDurably().build();</span><br><span class="line">        <span class="comment">//.storeDurably是用来持久化处理的，因为如果你用不到，java会把他当垃圾处理了，记得加</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Trigger <span class="title function_">jobTrigger</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这玩意比较深奥，我不懂</span></span><br><span class="line">        <span class="type">CronScheduleBuilder</span> <span class="variable">schedule</span> <span class="operator">=</span> CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/5 * * * * ?&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定对应工作明细</span></span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(jobDetail()).withSchedule(schedule).build();</span><br><span class="line">        <span class="comment">//forJob:绑定工作明细</span></span><br><span class="line">        <span class="comment">//withSchedule:绑定触发时间</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>简而言之：工作明细，肯定需要你把具体工作传进来，所以它的作用就是将工作传入Quartz，触发器肯定要知道你的工作明细才知道你做什么，所以它需要你传入工作明细，再把它传入Quartz，触发器肯定也需要一个触发时间，那么就还需要一个CronScheduleBuilder对象来设置时间</p><p>工作，工作明细，触发器一环扣一环，也体现出Quartz结构比较严谨</p></blockquote><h1 id="5-spring简化定时任务"><a href="#5-spring简化定时任务" class="headerlink" title="5.spring简化定时任务"></a>5.spring简化定时任务</h1><p>上面的步骤比较繁琐，还有更简单的方法</p><p>1.首先在启动类上加上开启定时任务功能的注解</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br></pre></td></tr></table></figure></blockquote><p>2.另外编写一个类，专门写定时任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个注解就代替了我们原来的配置类</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/1 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个要注意加@Component</p><h1 id="6-监控"><a href="#6-监控" class="headerlink" title="6.监控"></a>6.监控</h1><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305192140412.png" alt="屏幕截图 2023-05-19 214013"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> SpringBoot入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>驴のSpringBoot学习笔记</title>
      <link href="/2023/03/30/SpringBoot%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/03/30/SpringBoot%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="驴のSpringBoot学习笔记"><a href="#驴のSpringBoot学习笔记" class="headerlink" title="驴のSpringBoot学习笔记"></a>驴のSpringBoot学习笔记</h1><blockquote><p>部分资料来自于黑马程序员</p></blockquote><h2 id="1-SpringBoot入门"><a href="#1-SpringBoot入门" class="headerlink" title="1.SpringBoot入门"></a>1.SpringBoot入门</h2><h3 id="1-1在idea创建SpringBoot"><a href="#1-1在idea创建SpringBoot" class="headerlink" title="1.1在idea创建SpringBoot"></a>1.1在idea创建SpringBoot</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/image-20211116125259385.png"></p><blockquote><p>如图所示在项目中创建新的模块，模块选择Spring Init ,特别提醒注意自己的SDK版本号（我是jdk8），然后正常的起名字，type选择maven，java版本选择你的版本（我是8）然后next</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/image-20211116125615728.png"></p><p>这里勾选Web，上方的springboot默认就好</p><h3 id="1-2尝试创建一个开发控制器"><a href="#1-2尝试创建一个开发控制器" class="headerlink" title="1.2尝试创建一个开发控制器"></a>1.2尝试创建一个开发控制器</h3><p>创建java文件（SB是springBoot缩写）</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-03-30%20175742.png"></p><p>尝试写一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SB</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3运行"><a href="#1-3运行" class="headerlink" title="1.3运行"></a>1.3运行</h3><h4 id="可能出现的错误："><a href="#可能出现的错误：" class="headerlink" title="可能出现的错误："></a>可能出现的错误：</h4><p>无效的发行版：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021100900.png"></p><p>[^此图来自csdn：<a href="https://blog.csdn.net/booker009/article/details/129648180]">https://blog.csdn.net/booker009/article/details/129648180]</a>: </p><p>意味着你idea中的java版本设置与springboot不一致，需要做两步：</p><p>1.Project Structure Modules&#x2F;Project选择你的项目（以及父级项目，如果有的话）-&gt;选择8（你的jdk版本），如图</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021101792.png"></p><p>2.Setting： 2.查找java compiler-&gt;Target bytecode version</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-03-30%20180532.png"></p><p>再次运行就好了</p><p>另外如果报错说你的8080接口被占用，可以在application.properties中重新配置TomCat端口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入以下代码</span></span><br><span class="line">server.port:你想要的端口号</span><br></pre></td></tr></table></figure><p>成功：</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-03-30%20181438.png"></p><p>然后在浏览器的地址栏里输入：</p><blockquote><p>localhost&#x2F;books</p></blockquote><p>即可访问刚刚编写的控制器</p><h2 id="2-入门案例"><a href="#2-入门案例" class="headerlink" title="2.入门案例"></a>2.入门案例</h2><blockquote><p>注意，此案例是建立在已经学习过javaweb等相关知识的案例</p></blockquote><h3 id="1-创建新模组并初步创建项目相关目录"><a href="#1-创建新模组并初步创建项目相关目录" class="headerlink" title="1.创建新模组并初步创建项目相关目录"></a>1.创建新模组并初步创建项目相关目录</h3><p>如下</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021104075.png" alt="屏幕截图 2023-04-02 110419"></p><blockquote><p>其中：</p><p>config：用于放置一些项目中自己配制的MP配置</p><p>dao：Mapper文件（javaweb知识）</p><p>domain： 实体类</p><p>resources&amp;test：均为自动生成，test中我自建了一个test类用来初步测试代码功能</p></blockquote><h3 id="2-pom-xml手动配置"><a href="#2-pom-xml手动配置" class="headerlink" title="2.pom.xml手动配置"></a>2.pom.xml手动配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--由于mybatis-plus（国人开发，功能强大！）， druid ，lombook在springboot中并没有默认配置，所以需要手动导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jar包功能用到时会讲</p><h3 id="3-application-yml配置"><a href="#3-application-yml配置" class="headerlink" title="3.application.yml配置"></a>3.application.yml配置</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021227711.png" alt="屏幕截图 2023-04-02 122706"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据库链接基本配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///db2</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment">#主要配置链接数据库名还有自增属性</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span>   <span class="comment">#因为MP是根据你的实体类名寻找数据库表，不设置的话名称不一致会找不到</span></span><br><span class="line">      <span class="comment">#例如：数据库表名：tb_stu 实体类：stu 这样就会不识别，可以在这里写 db-config: tb_</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment">#此处设置id为自增，不然会和MP冲突</span></span><br><span class="line"><span class="comment">#开启MP日志</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h3 id="4-domain目录"><a href="#4-domain目录" class="headerlink" title="4.domain目录"></a>4.domain目录</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021110482.png" alt="屏幕截图 2023-04-02 110930"></p><blockquote><p>本案例调用的是本地的账号密码数据库</p><p>实体类用来作为数据库内容的封装，其中的属性名要和数据库的列名一致，不一致可以通过注解单独绑定名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column(name = &quot;release_status&quot;)</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>@Data:来自lombok包，可以自动给导入的类中添加getter，setter等方法，简化开发</p></blockquote><blockquote><p>@TableName:用于指定链接哪个数据库,如果实体类名和数据库表名一致可以不写（存疑）</p></blockquote><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span><span class="comment">//来自lombok  自动为实体类添加getter,setter,toString等方法</span></span><br><span class="line"><span class="meta">@TableName(&quot;users&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-dao目录"><a href="#5-dao目录" class="headerlink" title="5.dao目录"></a>5.dao目录</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021126263.png" alt="屏幕截图 2023-04-02 112646"></p><blockquote><p>该目录中的mapper接口用于实现代码与数据库之间的交互，底层是sql语句的掉调用</p></blockquote><blockquote><p>@Repository: Repository它用于将数据访问层 (DAO 层 ) 的类标识为 Spring Bean,使之能够被扫描</p></blockquote><blockquote><p>@Mapper：用来标识这是Mapper类</p></blockquote><blockquote><p>extends BaseMapper<Users>：BaseMapper来自MP，里面定义了很多现成的方法，可以不用自己写sql语句了（国产就是牛逼）</p><p>&lt;&gt;中放实体类，这样从数据库读到的数据会默认封装成实体类</p></blockquote><h3 id="6-Application自带的启动器"><a href="#6-Application自带的启动器" class="headerlink" title="6.Application自带的启动器"></a>6.Application自带的启动器</h3><blockquote><p>注解：@SpringBootApplication</p></blockquote><h3 id="7-test目录"><a href="#7-test目录" class="headerlink" title="7.test目录"></a>7.test目录</h3><p>系统自带的我先不讲，说一说自己配的（其实都一样，只不过是照着葫芦画瓢）</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021211877.png" alt="屏幕截图 2023-04-02 121048" style="zoom:67%;" /><blockquote><p>@SpringBootTest：用来表示这是springboot测试类，这样才能被扫描到</p></blockquote><blockquote><p>@Autowired：自动导入，如果这地方报错，就说明前面Mapper没加注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br></pre></td></tr></table></figure><blockquote><p>这个userMapper对象可以调用很多数据库操作方法</p></blockquote><blockquote><p>讲一下test的规则，只要加上@Test就说明这是测试方法，测试方法只是单纯测试方法中的代码逻辑和输出是否报错，是否符合我们所期待的输出，所以测试方法是不需要返回值和参数的</p></blockquote><p>额外说一下分页操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getPage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接这样写是不对的,因为MP中的拦截器没有配置</span></span><br><span class="line">        userMapper.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>拦截器在config中配置</p><h3 id="8-config配置"><a href="#8-config配置" class="headerlink" title="8.config配置"></a>8.config配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//用来放MP的某些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//注释成配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//配置Bean才能被扫描到</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//两件事：1.把拦截器配置出来 2.return出去</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();<span class="comment">//拦截器的壳</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们的分页操作就可以用了</p><h3 id="9-关于条件查询操作"><a href="#9-关于条件查询操作" class="headerlink" title="9.关于条件查询操作"></a>9.关于条件查询操作</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304031654519.png"></p><blockquote><p>MP下的条件查询需要配置条件构造器，然后把构造器放在查询语句中，在后台sql语句上会自动加上构造器中的条件</p></blockquote><p>一些构造器条件：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304031656245.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.eq(Employee::getUsername,employee.getUsername());</span><br></pre></td></tr></table></figure><p>两个参数，第一个参数是数据库的列名，第二个参数是查询条件（两个参数合起来，就是sql语句中的where）</p><p><strong>需要特别注意的是</strong>：如果查询条件的值设置为null，则null会被识别为字符串，要避免这种情况发生，需要要在设置查询条件时就加入判断例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lqw1.like(tiaojian != <span class="literal">null</span>,Users::getUsername,tiaojian);</span><br></pre></td></tr></table></figure><p>若为true则拼接条件，false则不拼接</p><h3 id="10-一般开发流程"><a href="#10-一般开发流程" class="headerlink" title="10.一般开发流程"></a>10.一般开发流程</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304031830849.png" alt="屏幕截图 2023-04-03 183026"></p><ol><li>首先编写实体类，方便后面封装</li><li>写实现类（mapper），在javaweb中该类要映射.xml文档来编写sql语句操作数据库，SpringBoot简化了这一过程，可以直接继承现有的类</li><li>写服务端接口，也就是上图的UserService，里面定义了很多业务方法</li><li>写impl接口实现类，实现定义的服务端接口，并实现其中的方法，javaweb中需要获得mapper来调用方法，SpringBoot中同样也需要</li><li>表现层（前端）</li></ol><h3 id="11-MP快速开发"><a href="#11-MP快速开发" class="headerlink" title="11.MP快速开发"></a>11.MP快速开发</h3><blockquote><p>上文中提到的3,4步在MP中得到了简化开发</p></blockquote><p>首先是服务端接口，现在不需要自己手动写一些基础操作的方法（增删改查）</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304031905363.png" alt="屏幕截图 2023-04-03 190530"></p><p>直接继承官方提供的接口类，里面有很多基础的方法，传入泛型为实体类</p><p>其次是接口实现类</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304031906252.png"></p><p>也是继承官方提供的ServiceImpl类，传入的两个泛型，一个是实现类Mapper，另一个是实体类，虽然简化开发了，但是仍然需要mapper（只是把我们一般开发的过程给封装成类，在后台执行，具体流程其实不变）</p><p><strong>注意不要忘了继承接口</strong></p><p>另外MP只是提供了某些基础方法，如果需要自定义或重写，还是得按老流程，现在接口中定义，然后在实现类中实现</p><h3 id="12-完成Controller"><a href="#12-完成Controller" class="headerlink" title="12.完成Controller"></a>12.完成Controller</h3><p>在完成上面的一系列服务端代码并测试完之后，就可以写controller了</p><p>例如：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041711846.png" alt="屏幕截图 2023-04-04 171055"></p><blockquote><p>@RequestMapping()：这里定义的是访问路径，如果要访问你的springboot，则需要在浏览器中输入”<a href="http://localhost/">http://localhost/</a>  + 你在RequestMapping()写的路径”</p></blockquote><p>下面的注解都是spring定义好的，例如GetMapping就是以get方式发送请求，PostMapping是Post请求</p><p>在这里引用一篇知乎文章，我认为讲得很全面，可以给之前没了解过的同学补补课：<a href="https://zhuanlan.zhihu.com/p/137507309">https://zhuanlan.zhihu.com/p/137507309</a></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041717729.png" alt="屏幕截图 2023-04-03 211123"></p><h3 id="13-启动我们的Spring"><a href="#13-启动我们的Spring" class="headerlink" title="13.启动我们的Spring"></a>13.启动我们的Spring</h3><p>springboot项目在创建时自带启动器，就是根目录下的XXXApplication，右键启动它</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-03-30%20181438.png"></p><p>启动成功</p><h3 id="14-利用API接口调试工具来检测我们的代码"><a href="#14-利用API接口调试工具来检测我们的代码" class="headerlink" title="14.利用API接口调试工具来检测我们的代码"></a>14.利用API接口调试工具来检测我们的代码</h3><p>很多老师推荐postman，但这玩意儿收费，我在网上找到了个叫Apifox的网站，可以实现在线调试，我用了一下，感jio还不错（建议使用edge浏览器，他自带插件）<img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041724161.png" alt="屏幕截图 2023-04-04 172359"></p><p>调试窗口，还是比较方便的，具体操作可以到apifox主页，里面有教程。</p><h3 id="15-前后端数据一致性处理（小优化）"><a href="#15-前后端数据一致性处理（小优化）" class="headerlink" title="15.前后端数据一致性处理（小优化）"></a>15.前后端数据一致性处理（小优化）</h3><blockquote><p>我们在完成了上面的所有步骤，并能在调试工具中看到返回值时，就说明我们的开发已经完成一大部分了，但这里有一个小问题，我们后端的返回值类型不一致，例如getAll返回的是list列表，getById返回的是单个实体类，增删改查返回的是boolean，这些返回类型会对前端开发造成一定麻烦，所以我们需要统一返回类型</p></blockquote><p>list：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041731578.png" alt="屏幕截图 2023-04-04 173019"></p><p>boolean：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041731850.png" alt="屏幕截图 2023-04-04 173046"></p><p>实体类：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041731850.png" alt="屏幕截图 2023-04-04 173059"></p><blockquote><p>返回类型很多</p></blockquote><p>统一返回类型：</p><p>新建返回类型的封装类：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041733872.png" alt="屏幕截图 2023-04-04 173344"></p><blockquote><p>flag：后端代码是否正常执行（为了区分是找不到返回null还是出错返回null）</p><p>data：数据内容</p></blockquote><p>把之前写好的controller中的方法，返回值都改成R</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041740430.png" alt="屏幕截图 2023-04-04 174024"></p><p>这样返回的就是统一的R类型了</p><h2 id="！（补充）常用注解-一般我在学习过程中遇到不理解的都会在这里更新-："><a href="#！（补充）常用注解-一般我在学习过程中遇到不理解的都会在这里更新-：" class="headerlink" title="！（补充）常用注解(一般我在学习过程中遇到不理解的都会在这里更新)："></a>！（补充）常用注解(一般我在学习过程中遇到不理解的都会在这里更新)：</h2><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><blockquote><p>这是一个组合注解</p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>@SpringBootConfiguration,这个注解可以标注配置文件，在其中可以声明Bean对象</p><p>@EnableAutoConfiguration 自动配置</p><p>@ComponentScan 组件扫描，通过它能找到注解@Component</p></blockquote><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><blockquote><p>注解控制类，可以在里面写业务方法</p></blockquote><h3 id="Value-“-”"><a href="#Value-“-”" class="headerlink" title="@Value(“${}”)"></a>@Value(“${}”)</h3><blockquote><p>可以获取配置文件里的值</p></blockquote><blockquote><p>另外如果我们想将配置文件里的数据拿出来单独封装成一个类，我们需要用到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;&quot;)</span></span><br></pre></td></tr></table></figure></blockquote><p>这个注解可以从配置文件里取值给类中的属性赋值，prefix这玩意儿后面可以给定一个名称前缀，比如我配置文件中有属性：user.username，user.password…,我想要取值，给我封装类里的属性username，password赋值，我就需要写prefix &#x3D; “user”,这样就可以实现，注意属性名称要一致</p><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><blockquote><p>倘若前端传的数据为json格式，那就再参数前加这个注解</p></blockquote><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h3><p>一般路径中传键值对时，我们是不需要写这条注解的，但如果是路径中直接带值</p><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><blockquote><p>一般写在服务方法上，将方法返回的东西转换为json字符串供前端接受</p></blockquote><h3 id="Mapper"><a href="#Mapper" class="headerlink" title="@Mapper"></a>@Mapper</h3><blockquote><p>放在dao接口上面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Mapper</span>: 告诉Mybatis这是dao接口，创建此接口的代理对象  位置：类的上面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>另外如果将来dao太多，一个一个加@Mapper太累，可以选择在Application上加@MapperScan</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.lf.dao&quot;)</span></span><br><span class="line"><span class="comment">//这样就可以把dao包下的所有的dao扫描进去</span></span><br></pre></td></tr></table></figure><h3 id="Rest风格"><a href="#Rest风格" class="headerlink" title="Rest风格"></a>Rest风格</h3><h4 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping()"></a>@GetMapping()</h4><blockquote><p>获取前端参数，首先需要在GetMapping加占位符，比如@GetMapping(&#x2F;user&#x2F;{id})</p><p>然后就是获取路径中的数据</p><p>假如有如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Interger id)</span></span><br></pre></td></tr></table></figure><p>这样访问路径里的参数就赋值给了方法参数id</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="3-配置文件4级分类"><a href="#3-配置文件4级分类" class="headerlink" title="3.配置文件4级分类"></a>3.配置文件4级分类</h2><blockquote><p>我们开发过程中用的配置文件都是我们程序员方便开发测试的，等开发结束项目经理会有自己的配置，甲方也有别的要求，还有涉及到保密的行业（例如：银行），是不会告诉你配置的，所以boot就提供了配置覆盖的操作，一共有四个等级，高等级的配置可以覆盖低等级的</p></blockquote><p>如图：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304102236486.png" alt="屏幕截图 2023-04-10 222707"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304102236181.png" alt="屏幕截图 2023-04-10 222808"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304102236256.png" alt="屏幕截图 2023-04-10 222527"></p><h2 id="4-多环境开发"><a href="#4-多环境开发" class="headerlink" title="4.多环境开发"></a>4.多环境开发</h2><p>yaml版</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112025532.png" alt="屏幕截图 2023-04-11 202140"></p><p>也可以将多个环境写成文件</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112026772.png" alt="屏幕截图 2023-04-11 202346"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112026765.png" alt="屏幕截图 2023-04-11 202333"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112030977.png" alt="屏幕截图 2023-04-11 203047"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112032784.png" alt="屏幕截图 2023-04-11 203149"></p><p>maven配置boot环境：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112038457.png" alt="屏幕截图 2023-04-11 203846"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112039895.png" alt="屏幕截图 2023-04-11 203914"></p><p>会自动读取maven配置</p><h2 id="5-日志"><a href="#5-日志" class="headerlink" title="5.日志"></a>5.日志</h2><h3 id="1-日志对象创建"><a href="#1-日志对象创建" class="headerlink" title="1.日志对象创建"></a>1.日志对象创建</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112040169.png" alt="屏幕截图 2023-04-11 201956"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112040281.png" alt="屏幕截图 2023-04-11 202045"></p><h3 id="3-lombok简化日志开发"><a href="#3-lombok简化日志开发" class="headerlink" title="3.lombok简化日志开发"></a>3.lombok简化日志开发</h3><p>当我们导入了lombok包后，就不用麻烦在每一个类中都加一个log的声明了。只需要在类上加注释@Slf4j,然后就可以正常使用注释了</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112219768.png" alt="屏幕截图 2023-04-11 221942"></p><h3 id="4-日志输出格式控制"><a href="#4-日志输出格式控制" class="headerlink" title="4.日志输出格式控制"></a>4.日志输出格式控制</h3><p>一条日志：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112223057.png" alt="屏幕截图 2023-04-11 222307"></p><p>解读</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112225446.png" alt="屏幕截图 2023-04-11 222457"></p><blockquote><p>时间：这个不用多讲</p><p>级别：这个日志的级别，也没什么好说的</p><p>PID：进程ID，表示当前操作所处的进程，当多服务同时记录时，方便调试</p><p>所属类：发出日志的类名，长的类名boot会自动简化</p><p>日志信息：自定义</p></blockquote><h3 id="5-日志输出为文件（很常用）"><a href="#5-日志输出为文件（很常用）" class="headerlink" title="5.日志输出为文件（很常用）"></a>5.日志输出为文件（很常用）</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112259741.png" alt="屏幕截图 2023-04-11 225916"></p><h2 id="6-第三方Bean属性绑定"><a href="#6-第三方Bean属性绑定" class="headerlink" title="6.第三方Bean属性绑定"></a>6.第三方Bean属性绑定</h2><h3 id="1-注解"><a href="#1-注解" class="headerlink" title="1.注解"></a>1.注解</h3><blockquote><p>@ConfigurationProperties</p><p>@EnableConfigurationProperties</p></blockquote><p>@EnableConfigurationProperties注解可以将使用@ConfigurationProperties注解的类加入Spring容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(ServerConfig.class)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;第三方bean名&quot;)</span></span><br></pre></td></tr></table></figure><p>需要注意的是@EnableConfigurationProperties有两个功能，一是开启引用类的第三方bean数据绑定，二是将引用类加入Spring容器（和@Component作用相同），所以两者不能共存，切记！</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><blockquote><p>yml文件里int的解析类型支持二进制，八进制，十六进制</p><p>现有一情景：一位同学在yml中配置数据库连接信息时，将password设置为：0127，然后连接数据库时一直报错密码错误（正确密码就是0127），原因是什么</p></blockquote><p>因为yml中对int解析支持八进制，而八进制是以0开头，所以yml中将0127识别为八进制，最终读取的密码为87（0127八进制转十进制），故出错，解决方法其实只要将yml配置文件里的int属性变成字符串，即password: “0127”，即可解决。</p><h2 id="7-测试类测试web（前端）"><a href="#7-测试类测试web（前端）" class="headerlink" title="7.测试类测试web（前端）"></a>7.测试类测试web（前端）</h2><p>1.虚拟一个web环境</p><blockquote><p>测试类注解@SpringBootTest()</p><p>如果直接启动测试类，这样只是启动了一个普通的java类，而不是web类，这样无法做到测试表现层（前端）</p></blockquote><blockquote><p>解决：@SpringBootTest(webEnviroment &#x3D; SpringBootTest.webEnvironment.RANDOM_PORT)</p></blockquote><p>2.开启虚拟MVC调用</p><blockquote><p>@AutoconfigureMockMvc注解，用来开启虚拟MVC</p><p>然后我们需要一个虚拟Mvc对象：</p><p>@Autowired MockMvc mvc;</p><p>然后我们需要创建一个虚拟请求buider：</p><p>MockHttpServletRequestBuilder builder &#x3D; MockRequestBuilders.get&#x2F;put&#x2F;post&#x2F;delete等（”&#x2F;访问路径”）</p><p>用mvc对象调用perform方法，放入我们的builder</p><p>mvc.perform(buider)即可</p></blockquote><h2 id="8-从容器中手动获取对象"><a href="#8-从容器中手动获取对象" class="headerlink" title="8.从容器中手动获取对象"></a>8.从容器中手动获取对象</h2><p>假如现在我们有一个服务类：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304261738177.png" alt="屏幕截图 2023-04-26 173816"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们怎样才能在类中通过手动方法获得该服务类的一个对象，从而调用我们的服务方法</p><p>即利用我们SpringBoot主方法里的run方法，它会返回一个容器对象，之后可以用getBean获得我们需要的对象了</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304261739227.png" alt="屏幕截图 2023-04-26 173947"></p><h2 id="Web："><a href="#Web：" class="headerlink" title="Web："></a>Web：</h2><h2 id="1-拦截器"><a href="#1-拦截器" class="headerlink" title="1.拦截器"></a>1.拦截器</h2><blockquote><p>拦截器是SpringMvc中的一种对象，他可以拦截对后端的请求，可以自定义拦截器</p></blockquote><h3 id="1-自定义拦截器："><a href="#1-自定义拦截器：" class="headerlink" title="1.自定义拦截器："></a>1.自定义拦截器：</h3><blockquote><p>1.创建类实现SpringMVC框架的HandlerInterceptor接口</p></blockquote><p>你可以在拦截器里写验证或者是对数据筛选过滤，此处只做测试，所以就输出了一句话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 这里配置了一个自定义拦截器类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInter</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                             HttpServletResponse response,</span></span><br><span class="line"><span class="params">                             Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [request, response, handler]</span></span><br><span class="line"><span class="comment">         * handler:被拦截的控制器对象</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> boolean</span></span><br><span class="line"><span class="comment">         * true:放行</span></span><br><span class="line"><span class="comment">         * false：截断</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行了拦截器&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.创建配置类，将我们自定义的拦截器注册到容器里</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 这里用来配置拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">//添加拦截器对象，注入容器中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [registry]</span></span><br><span class="line"><span class="comment">         * InterceptorRegistry registry: 这玩意是个注册器，把你自定义的拦截器塞里面就</span></span><br><span class="line"><span class="comment">         * 可以注册了（相当于之前在xml注册，spring简化咯）</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//创建拦截器对象</span></span><br><span class="line">        <span class="type">LoginInter</span> <span class="variable">loginInter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginInter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这种路径一般都指定一个字符串数组，比较方便</span></span><br><span class="line">        <span class="comment">//拦截</span></span><br><span class="line">        String[] path = &#123;<span class="string">&quot;/user/**&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//不拦截</span></span><br><span class="line">        String[] excludepath = &#123;<span class="string">&quot;/user/Login&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//addPathPatterns() 配置拦截路径</span></span><br><span class="line">        <span class="comment">//excludePathPatterns() 配置放行路径</span></span><br><span class="line">        registry.addInterceptor(loginInter)</span><br><span class="line">                .addPathPatterns(path)</span><br><span class="line">                .excludePathPatterns(excludepath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看结果：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304261901992.png" alt="屏幕截图 2023-04-26 190115"></p><p>先访问了user&#x2F;Login</p><p>因为没有拦截这个url，所以直接访问了我们的controller</p><p>然后访问&#x2F;user&#x2F;a</p><p>可以看到，先进入了我们的拦截器，触发了拦截器的输出，只不过拦截器放行了，所以依旧可以正常访问controller</p><h2 id="2-使用Servlet"><a href="#2-使用Servlet" class="headerlink" title="2.使用Servlet"></a>2.使用Servlet</h2><blockquote><p>1.创建Servlet类。继承HttpServlet</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Servlet类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line"></span><br><span class="line">        out.println(<span class="string">&quot;Servlet执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.注册Servlet，放入SpringBoot框架里</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myconfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public ServletRegistrationBean(T servlet, String... urlMappings)</span></span><br><span class="line">    <span class="comment">//第一个参数是 Servlet对象 ，第二个是url地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法，注册Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">servletRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ServletRegistrationBean</span> <span class="variable">bean</span></span><br><span class="line">                <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(<span class="keyword">new</span> <span class="title class_">MyServlet</span>(),<span class="string">&quot;/myservlet&quot;</span>);</span><br><span class="line">        <span class="comment">//        也可以这样设置</span></span><br><span class="line"><span class="comment">//        bean.setServlet();</span></span><br><span class="line"><span class="comment">//        bean.setUrlMappings();</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意一定要加@Bean</p><h2 id="3-Filter过滤器"><a href="#3-Filter过滤器" class="headerlink" title="3.Filter过滤器"></a>3.Filter过滤器</h2><p>Filter是Servlet规范的过滤器，一般用来处理字符编码</p><blockquote><p>1.创建自定义过滤器类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 自定义过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myfilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行过滤器&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.注册Filter对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册Filter拦截器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"></span><br><span class="line">    bean.setFilter(<span class="keyword">new</span> <span class="title class_">Myfilter</span>());</span><br><span class="line">    bean.addUrlPatterns(<span class="string">&quot;/user/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里顺便提一个Filter的最常用应用方式：字符集过滤器</strong>（框架自带）</p><p>作用：解决post请求乱码问题</p><blockquote><p>由于是框架自带的，所以只需要自己注册，将系统自带的过滤器放到注册Bean中</p></blockquote><blockquote><p>1.在容器中注册过滤器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是用自带的过滤器对象</span></span><br><span class="line">    <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定使用的编码方式</span></span><br><span class="line">    filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定req，resp都使用设定的编码</span></span><br><span class="line">    filter.setForceEncoding(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    bean.setFilter(filter);</span><br><span class="line">    bean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.设置过滤器使用编码等</p></blockquote><p>因为这是专用的字符过滤器，所以可以直接设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定使用的编码方式</span></span><br><span class="line">filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定req，resp都使用设定的编码</span></span><br><span class="line">filter.setForceEncoding(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><blockquote><p>3.在配置文件中设置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">  <span class="comment">#    将boot默认配置的过滤器关闭</span></span><br><span class="line">    <span class="attr">encoding:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>其实上面的方法略有脱裤放p之意😆</p><p>既然系统有自带的过滤器，我们可以直接修改默认过滤器的编码，以此来实现我们自己想要的效果</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">encoding:</span></span><br><span class="line">      <span class="attr">charset:</span> <span class="string">utf-8</span></span><br><span class="line"><span class="comment">#      把res，req都配置成我们的编码</span></span><br><span class="line">      <span class="attr">force:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="9-ORM操作数据库（Mysql）"><a href="#9-ORM操作数据库（Mysql）" class="headerlink" title="9.ORM操作数据库（Mysql）"></a>9.ORM操作数据库（Mysql）</h2><p>大体步骤：</p><ol><li>mybatis起步依赖：完成mybatis对象自动配置</li><li>创建实体类（对应数据库属性）</li><li>创建Dao接口，在接口中写方法名</li><li>写Dao接口对应的mapper文件，在mapper中写sql语句操作数据库</li><li>配置pom文件，将mapper.xml包含到类路径中</li><li>创建Service接口和实现类，调用dao方法</li><li>创建Controller，访问service</li><li>写配置类文件，在文件里配置数据库连接信息</li></ol><p>具体实现：</p><ol><li><p>起步依赖：</p><blockquote><p>SpringBoot里整合了mybatis,只需要在创建项目时选择就可以</p></blockquote></li></ol><p>​<img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305072154180.png"/></p><p>2.实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Mapper</span>: 告诉Mybatis这是dao接口，创建此接口的代理对象  位置：类的上面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得加@Mapper，@Mapper在上面专门讲注解的章节里有</p><p>4.mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lf.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lf.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from users</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意dao和mapper的分离，符合规范</strong></p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305072159329.png"/><p>这样需要配置两处地方：</p><p>一是：配置文件中</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="comment">#Mapper文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>二是：在pom文件中设置,把mapper放入资源中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--resource插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.Service接口和实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个没什么好说的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类，@Service用来标识服务类</p><p>7.Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mycontroller</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">AllUser</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userService.getAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        <span class="keyword">return</span> users.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///db2?useSSL=false&amp;useServerPrepStmts=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">*****</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="comment">#Mapper文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment">#日志</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>如果想在控制台看到sql语句，就需要配置日志</p><h2 id="10-事务开启"><a href="#10-事务开启" class="headerlink" title="10.事务开启"></a>10.事务开启</h2><blockquote><p>什么是事务：简单说事务就是把多条语句绑在一起，要执行成功就一起成功，如果其中有一条失败（出错）就会回滚</p></blockquote><p>Springboot中使用事务：</p><p>1）在业务方法上面加@Transactional,加上后就有事务功能了</p><p>2）明确在主启动类上面加@EnableTransactionManager</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> SpringBoot入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java入门笔记</title>
      <link href="/2023/03/27/java/"/>
      <url>/2023/03/27/java/</url>
      
        <content type="html"><![CDATA[<h1 id="驴のJAVA——奇妙之旅"><a href="#驴のJAVA——奇妙之旅" class="headerlink" title="驴のJAVA——奇妙之旅"></a>驴のJAVA——奇妙之旅</h1><blockquote><p>部分笔记来自韩顺平教育</p></blockquote><h3 id="Markdown快捷键"><a href="#Markdown快捷键" class="headerlink" title="Markdown快捷键"></a>Markdown快捷键</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-16%20194630.png"></p><h3 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h3><p>1.删除行：Ctrl + D</p><p>2.复制行：Ctrl + Alt + 向下箭头</p><p>3.补全代码：Alt + &#x2F;</p><p>4.导入该行需要的类：Alt + Enter</p><p>5.生成构造器快捷键：Alt + insert</p><p>6.快速定位方法Ctrl + B</p><p>7.自动分配变量名：.var</p><h2 id="1-类与对象"><a href="#1-类与对象" class="headerlink" title="1.类与对象"></a>1.类与对象</h2><h3 id="1-对象的内存布局"><a href="#1-对象的内存布局" class="headerlink" title="1.对象的内存布局"></a>1.对象的内存布局</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-16%20200010-16686960745503.png" style="zoom:50%;" />)</p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><p>​cat1是一个引用类型，他指向一块内存地址，那块内存地址里有类的&#x3D;&#x3D;属性信息&#x3D;&#x3D;</p><p>但要注意的是，如果是字符串型的属性信息，会放在&#x3D;&#x3D;方法区&#x3D;&#x3D;中的&#x3D;&#x3D;常量池&#x3D;&#x3D;里，只在类的内存地址中保存一个字符串的地址（如图）。</p><p>​当Cat类被new时，同时会在方法区对类的信息进行一个加载，加载内容是&#x3D;&#x3D;属性信息&#x3D;&#x3D;和&#x3D;&#x3D;方法&#x3D;&#x3D;。</p><h3 id="2-类与对象的内存分配机制"><a href="#2-类与对象的内存分配机制" class="headerlink" title="2.类与对象的内存分配机制"></a>2.类与对象的内存分配机制</h3><p>先看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.age = <span class="number">10</span>;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> p1;</span><br><span class="line"><span class="comment">//p1.age = 20;</span></span><br><span class="line">System.out.println(<span class="string">&quot;p2.age = &quot;</span> + p2.age);</span><br></pre></td></tr></table></figure><p>当我们先new了一个对象p1，并给p1的属性赋了值，如果这时再将p1赋值给p2，并输出p2的属性，会出现什么：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p2.age = 10</span><br></pre></td></tr></table></figure><p>和p1的值一致，那如果我们在输出之前修改p1的属性，结果这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p2.age = 20</span><br></pre></td></tr></table></figure><p>这说明p1，p2指向了同一块内存地址，相当于p1,p2是一个人的两个名字，但都是指向该人。</p><h3 id="（补充）JAVA的内存结构"><a href="#（补充）JAVA的内存结构" class="headerlink" title="（补充）JAVA的内存结构"></a>（补充）JAVA的内存结构</h3><h5 id="Java内存结构分析："><a href="#Java内存结构分析：" class="headerlink" title="Java内存结构分析："></a>Java内存结构分析：</h5><ul><li>1.栈：存放基本数据类型（局部变量）</li><li>2.堆：存放对象</li><li>3.方法区：常量池（常量，比如字符串），类加载信息</li></ul><h5 id="Java创建对象流程的简单分析："><a href="#Java创建对象流程的简单分析：" class="headerlink" title="Java创建对象流程的简单分析："></a>Java创建对象流程的简单分析：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = new Person();</span><br></pre></td></tr></table></figure><ul><li>1.先加载类信息（属性，方法）&#x3D;&#x3D;一个类只加载一次&#x3D;&#x3D;</li><li>2.在堆中分配空间，并默认初始化</li><li>3.把空间的地址分配给p1,p1指向该地址</li><li>4.进行指定初始化</li></ul><h2 id="2-JAVA方法调用机制"><a href="#2-JAVA方法调用机制" class="headerlink" title="2.JAVA方法调用机制"></a>2.JAVA方法调用机制</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-16%20211200.png"  />)</p><h2 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h2><p>步骤：</p><p>1）属性私有化</p><p>2）公共的get set方法，get用于获取，set用于赋值并判断其合理性</p><p>封装与构造器：可以在构造器内调用get，set，同样可以判断其合理性，如图</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-18%20010355.png"></p><h2 id="4-多态"><a href="#4-多态" class="headerlink" title="4.多态"></a>4.多态</h2><h4 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h4><p>父类的引用指向子类的对象，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="comment">//Dog是Animal类的子类</span></span><br></pre></td></tr></table></figure><p>同时满足：**&#x3D;&#x3D;编译类型看左边，运行类型看右边&#x3D;&#x3D;**（可以调用父类所有成员（看权限），不能调用子类特有成员，因为调用是由编译类型决定的，调用方法时，先从子类开始找，如果有则运行子类的方法，特别是有方法重写的时候）</p><h4 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h4><p>如果用向上转型定义了一个对象，那就会出现无法调用子类特有对象的情况，如果要调用，则需要进行向下转型，我习惯于看做强制类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal;</span><br><span class="line"><span class="comment">//animal.pop();这样是错误的，因为pop方法是Dog类特有</span></span><br><span class="line">dog.pop();</span><br></pre></td></tr></table></figure><h4 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h4><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-19%20021737.png"></p><p>简单说，只要调用了某个类的方法，那就会动态绑定到该类（用该类的属性）</p><h4 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h4><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-19%20022812.png"></p><p>instanceof用于判断运行类型，然后就可以根据运行类型通过向下转型来调用特有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(persons[i] <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">    ((Student)person[i]).study();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><p>即如果方法内的参数类型为父类，调用时可以传入子类对象作为参数。</p><h2 id="5-类变量类方法"><a href="#5-类变量类方法" class="headerlink" title="5.类变量类方法"></a>5.类变量类方法</h2><p>类变量是指属于这个类的变量，被所有该类的对象所共有，所以是静态的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> n;</span><br></pre></td></tr></table></figure><p>类方法是指一个被所有该类的对象共有的方法，它只能访问静态参数，另外静态方法可以实现类名.方法名（）直接调用，不需要对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">A</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h2 id="6-代码块"><a href="#6-代码块" class="headerlink" title="6.代码块"></a>6.代码块</h2><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>代码块又称初始化块，属于类中的成员，类似与方法，将逻辑语句封装在方法体重，用{}包围，可以用做对象初始化</p><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><p><strong>[修饰符]{</strong>&#x2F;&#x2F;修饰符可写可不写，但要写只能写static</p><p><strong>代码</strong></p><p><strong>}；</strong></p><h4 id="使用细节："><a href="#使用细节：" class="headerlink" title="使用细节："></a>使用细节：</h4><p>1.静态代码块只执行一次，普通代码块一个对象一次</p><p>2.类何时被加载 <strong>&#x3D;&#x3D;重要&#x3D;&#x3D;</strong></p><p> 1）创建对象</p><p> 2）创建子类对象</p><p> 3）使用静态成员</p><p>3.<img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-20%20010025.png"></p><p>先调用静态，在调用普通</p><p>4.<img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-20%20010350.png"></p><h2 id="7-单例设计模式"><a href="#7-单例设计模式" class="headerlink" title="7.单例设计模式"></a>7.单例设计模式</h2><p>解释：这个模式的类只允许有一个对象，称为单例，要符合这个要求，必须要把构造器&#x3D;&#x3D;私有化&#x3D;&#x3D;，这样用户就不能自己new对象了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子(饿汉式)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GirlFriend</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GirlFriend</span> <span class="variable">gf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;xiaohong&quot;</span>);<span class="comment">//在类的内部实例化对象//这个对象一定是私有且静态的，不是静态的话我们的静态方法返回不了。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GirlFriend <span class="title function_">getGirlF</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉式和饿汉式的区别在于，饿汉式是不管你用没用，他都创建一个对象等你，懒汉式是你不调用不创建。代码上的区别就在于，懒汉式把对象的创建放在了Get函数里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span>&#123;<span class="comment">//懒汉式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Girl girl;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Girl</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> Girl <span class="title function_">getGirl</span><span class="params">(String name)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(girl == <span class="literal">null</span>)&#123;</span><br><span class="line">girl = <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;某某某&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> girl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-final关键字"><a href="#8-final关键字" class="headerlink" title="8.final关键字"></a>8.final关键字</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20195759.png"></p><h2 id="9-抽象类"><a href="#9-抽象类" class="headerlink" title="9.抽象类"></a>9.抽象类</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20201134.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20202300.png"></p><h2 id="10-内部类"><a href="#10-内部类" class="headerlink" title="10.内部类"></a>10.内部类</h2><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20204456.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20204441.png"></p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>目的：简化开发，当某个类继承某个类，或者说一个接口，你只会使用它们一次，如果专门为他们写一个新的类或者接口，太过繁琐，我们就可以用匿名内部类实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子：</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>()&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;<span class="comment">//分号别忘了</span></span><br><span class="line">a.say();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类不能实例化，但可以通过匿名内部类</span></span><br><span class="line"><span class="keyword">abstract</span> A&#123;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>()&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;你甚至可以：&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;.say();<span class="comment">//直接调用方法</span></span><br></pre></td></tr></table></figure><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">AA</span>&#123;<span class="comment">//成员内部类</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="comment">//输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部类调用成员内部类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line">A.a 对象名 = A.<span class="keyword">new</span> <span class="title class_">a</span>();</span><br></pre></td></tr></table></figure><p>法二：在外部类里提供返回内部类对象的方法，接受类型仍然是A.a</p><h2 id="11-枚举类"><a href="#11-枚举类" class="headerlink" title="11.枚举类"></a>11.枚举类</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-24%20144955.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    XM(<span class="string">&quot;小明&quot;</span>，<span class="string">&quot;18&quot;</span>),XH(<span class="string">&quot;小红&quot;</span>，<span class="number">18</span>)；<span class="comment">//一定放在第一排，多个用逗号间隔</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//构造器，get，set省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举类常用方法"><a href="#枚举类常用方法" class="headerlink" title="枚举类常用方法"></a>枚举类常用方法</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-24%20152339.png"></p><h3 id="增强-x3D-x3D-for循环-x3D-x3D"><a href="#增强-x3D-x3D-for循环-x3D-x3D" class="headerlink" title="增强&#x3D;&#x3D;for循环&#x3D;&#x3D;"></a>增强&#x3D;&#x3D;for循环&#x3D;&#x3D;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i : A)&#123;</span><br><span class="line">    <span class="comment">//输出i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意！只能遍历不能赋值，因为i是个临时变量，不改变原来的值。</p><h2 id="12-集合"><a href="#12-集合" class="headerlink" title="12.集合"></a>12.集合</h2><h3 id="集合体系图"><a href="#集合体系图" class="headerlink" title="集合体系图"></a><em>集合体系图</em></h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-25%20113243.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-25%20113621.png"></p><h3 id="List常用方法"><a href="#List常用方法" class="headerlink" title="List常用方法"></a>List常用方法</h3><p>首先实现List接口的类，里面的元素是有序的，可重复的</p><h3 id="遍历collection类的方法"><a href="#遍历collection类的方法" class="headerlink" title="遍历collection类的方法"></a>遍历collection类的方法</h3><p>法一：迭代器（**&#x3D;&#x3D;快捷键：itit + 回车&#x3D;&#x3D;**）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设有集合，名字为col</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> col.iterator();<span class="comment">//获取该集合的迭代器</span></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;<span class="comment">//括号里的用来判断下一个地址有无元素</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();<span class="comment">//Object接受</span></span><br><span class="line">    <span class="comment">//输出next</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：增强for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Object obj:col)&#123;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList常用方法"><a href="#ArrayList常用方法" class="headerlink" title="ArrayList常用方法"></a>ArrayList常用方法</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-25%20112951.png"></p><h3 id="set接口：无序，不能有重复的，可以存放null"><a href="#set接口：无序，不能有重复的，可以存放null" class="headerlink" title="set接口：无序，不能有重复的，可以存放null"></a>set接口：无序，不能有重复的，可以存放null</h3><h2 id="13-应用过程如何选择集合类"><a href="#13-应用过程如何选择集合类" class="headerlink" title="13.应用过程如何选择集合类"></a>13.应用过程如何选择集合类</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-26%20222402.png"></p><h3 id="collection类的一些工具"><a href="#collection类的一些工具" class="headerlink" title="collection类的一些工具"></a>collection类的一些工具</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-26%20222606.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-26%20222752.png"></p><h2 id="14-使用JUnit快捷测试代码"><a href="#14-使用JUnit快捷测试代码" class="headerlink" title="14.使用JUnit快捷测试代码"></a>14.使用JUnit快捷测试代码</h2><p>JUnit可以用来快速测试类方法，不用搞对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//在需要测试的方法前加这个，然后Alt + enter 导入包之类的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-java作图"><a href="#15-java作图" class="headerlink" title="15.java作图"></a>15.java作图</h2><h3 id="java坐标图"><a href="#java坐标图" class="headerlink" title="java坐标图"></a>java坐标图</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-28%20164246.png"></p><h3 id="画板具体创建过程"><a href="#画板具体创建过程" class="headerlink" title="画板具体创建过程"></a>画板具体创建过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myPaint</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;<span class="comment">//继承了一个窗口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">myP</span> <span class="variable">mp</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//画板类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">myPaint</span>();<span class="comment">//画板对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">myPaint</span><span class="params">()</span>&#123;</span><br><span class="line">        mp = <span class="keyword">new</span> <span class="title class_">myP</span>();<span class="comment">//在构造器里对画板初始化</span></span><br><span class="line">        <span class="built_in">this</span>.add(mp);<span class="comment">//将画板加入窗口</span></span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">300</span>,<span class="number">300</span>);<span class="comment">//设置窗口大小</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);<span class="comment">//窗口可视化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myP</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span>&#123;<span class="comment">//相当于一个画板类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.paint(g);<span class="comment">//g相当于一个画笔，提供了很多方法，可以作图</span></span><br><span class="line">        g.drawOval(<span class="number">20</span>,<span class="number">20</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-线程"><a href="#16-线程" class="headerlink" title="16.线程"></a>16.线程</h2><h3 id="实现线程的方法"><a href="#实现线程的方法" class="headerlink" title="实现线程的方法"></a>实现线程的方法</h3><p>1.继承Thread 重写run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AoLG</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AoLG</span>();</span><br><span class="line">        a.start();<span class="comment">//不是run</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AoLG</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;加油，奥利给！&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//快捷try-catch：ctrl + alt + t</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.实现Runable接口 重写run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main&#123;</span><br><span class="line">    <span class="type">AOlg</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AOlg</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(a);<span class="comment">//这个调用很重要</span></span><br><span class="line">    t.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AOlg</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程插队"><a href="#线程插队" class="headerlink" title="线程插队"></a>线程插队</h3><blockquote><p>线程名 . join();</p></blockquote><p>注：插队本质是让调用插队函数的线程休眠，例如在main线程中调用子线程插队，则会休眠main让子线程先执行完。</p><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><blockquote><p>线程名 . setDaemon(true);</p><p>本线程结束，调用的子线程（守护进程）也结束</p></blockquote><h3 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h3><blockquote><p>同一时间内只能有一个线程对内存进行操作</p></blockquote><p>实现方法：</p><blockquote><p>synchronized关键字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Java网络部分"><a href="#Java网络部分" class="headerlink" title="Java网络部分"></a>Java网络部分</h2><h3 id="1-IP地址"><a href="#1-IP地址" class="headerlink" title="1.IP地址"></a>1.IP地址</h3><blockquote><p>1.IPV4一共有32位，四个字节，每个字节8位，每个都能显示0~255之间的数</p><p>2.IP地址：唯一标识主机</p></blockquote><h3 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20001611.png"></p><h3 id="2-Socket介绍"><a href="#2-Socket介绍" class="headerlink" title="2.Socket介绍"></a>2.Socket介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20225717.png"></p><p>简单讲就是一个桥梁，可以在两个网络之间进行IO流传递</p><h2 id="3-TCP编程"><a href="#3-TCP编程" class="headerlink" title="3.TCP编程"></a>3.<strong>TCP编程</strong></h2><h3 id="字节型"><a href="#字节型" class="headerlink" title="字节型"></a>字节型</h3><p>思路：</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230020.png"></p><p>&#x3D;&#x3D;服务器端&#x3D;&#x3D;代码：</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230606.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230656.png"></p><p>&#x3D;&#x3D;主机端&#x3D;&#x3D;代码：</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230812.png"></p><h3 id="结束标志"><a href="#结束标志" class="headerlink" title="结束标志"></a>结束标志</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20234110.png"></p><p>用于表示写入结束，不加会导致程序不知道是否写入结束，会一直卡在那里</p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>输出</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/QQ%E6%88%AA%E5%9B%BE20230105211644.jpg"></p><p>读入</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/QQ%E6%88%AA%E5%9B%BE20230105212901jpg"></p><h3 id="4-利用TCP实现文件上传"><a href="#4-利用TCP实现文件上传" class="headerlink" title="4.利用TCP实现文件上传"></a>4.利用TCP实现文件上传</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/QQ%E6%88%AA%E5%9B%BE20230105230612.jpg"></p><h3 id="5-实现多线程文件上传"><a href="#5-实现多线程文件上传" class="headerlink" title="5.实现多线程文件上传"></a>5.实现多线程文件上传</h3><blockquote><p>倘若要提高效率，可以调用线程，实现每访问一次就开一个线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runable</span>)&#123;</span><br><span class="line">    重写run方法</span><br><span class="line">&#125;).start;</span><br></pre></td></tr></table></figure><p>注意：1.服务端应该提前用死循环括起来，让他一直监听</p><p>2.文件名应该自定义一个生成模式，防止文件名重复</p><h2 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h2><h3 id="1-获取类的class方法"><a href="#1-获取类的class方法" class="headerlink" title="1.获取类的class方法"></a>1.获取类的class方法</h3><p>1.类名 + class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Student&gt; s = Student.class;</span><br></pre></td></tr></table></figure><p>2.调用对象的class方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Student</span>&gt; studentClass = student.getClass();</span><br></pre></td></tr></table></figure><p>3.使用class类静态方法Class.forName(某个类的全路径)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.Lfs_code.Student&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-通过反射获取class类的构造方法"><a href="#2-通过反射获取class类的构造方法" class="headerlink" title="2.通过反射获取class类的构造方法"></a>2.通过反射获取class类的构造方法</h3><p>1.获取单个构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;Student&gt; constructor = s.getConstructor();<span class="comment">//无参</span></span><br><span class="line">Constructor&lt;?&gt; constructor = aClass.getConstructor(<span class="type">int</span>.class,String.class);<span class="comment">//有参</span></span><br></pre></td></tr></table></figure><p><strong>注获取有参构造方法时，需要用到数据类型的“.class”形式</strong></p><p>2.另外如果需要访问私有构造方法需要使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="type">int</span>.class,String.class);<span class="comment">//私有公有都能访问</span></span><br><span class="line"><span class="comment">//调用是必须提前设置访问权</span></span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h3 id="3-访问成员变量"><a href="#3-访问成员变量" class="headerlink" title="3.访问成员变量"></a>3.访问成员变量</h3><p>1.获取全部成员变量，顺便遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Field[] declaredFields = aClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f:declaredFields</span><br><span class="line">             ) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>2.获取单个成员变量，并修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);<span class="comment">//如果该变量是私有的，就设置它的访问权</span></span><br><span class="line">        name.set(o,<span class="string">&quot;林峰&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-反射获取成员方法"><a href="#4-反射获取成员方法" class="headerlink" title="4.反射获取成员方法"></a>4.反射获取成员方法</h3><p>1.获取全部方法（和上面大差不差，基本不用）</p><p>2.获取单个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">study</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;study&quot;</span>);</span><br></pre></td></tr></table></figure><p>3.<strong>方法的调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">study.invoke(o);<span class="comment">//方法类型 + invoke + (调用方法的对象)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
