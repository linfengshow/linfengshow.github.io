<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>力扣每日一题Day22</title>
      <link href="/2023/10/23/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day22/"/>
      <url>/2023/10/23/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day22/</url>
      
        <content type="html"><![CDATA[<p><u><em>但你必须不断尝试，每天表现你最好的一面。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/zigzag-conversion/">N 字形变换</a></p><p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 <code>&quot;PAYPALISHIRING&quot;</code> 行数为 <code>3</code> 时，排列如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;PAHNAPLSIIGYIR&quot;</code>。</p><p>请你实现这个将字符串进行指定行数变换的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="type">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numRows &lt; <span class="number">2</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">-1</span>;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">rows</span><span class="params">(numRows)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> || i == numRows - <span class="number">1</span>)&#123;</span><br><span class="line">                flag = -flag;  </span><br><span class="line">            &#125;</span><br><span class="line">            rows[i] += c;</span><br><span class="line">            i += flag;</span><br><span class="line">        &#125;</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span>(string row : rows)&#123;</span><br><span class="line">            ans += row;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310231630185.png" alt="image-20231023163046137"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>本题算法模拟了题目中的”Z“形成的过程，设置下标i和标志位flag，从头遍历字符串s，期间往字符串数组rows中填充字符，其中i下标模拟了Z的每一层，如果i等于0或是层数-1，说明到了转折点，此时改变flag为-flag，i的值便会往相反方向增长，这就实现了类似于反复扫描的过程，”扫描“结束后，字符串数组每一个元素对应的就是Z的每一层。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day21</title>
      <link href="/2023/10/22/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day21/"/>
      <url>/2023/10/22/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day21/</url>
      
        <content type="html"><![CDATA[<p><u><em>你得先跨越恐惧才能获得你所想要的一切。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">反转字符串中的单词</a></p><p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。</p><p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p><p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。</p><p><strong>注意：</strong>输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string word = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> tag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tag)&#123;</span><br><span class="line">                    ans == <span class="string">&quot;&quot;</span> ? ans = word : ans = word + <span class="string">&quot; &quot;</span> + ans;</span><br><span class="line">                    word = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    tag = <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">continue</span>; </span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tag = <span class="number">1</span>;</span><br><span class="line">                word += s[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(word != <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            ans == <span class="string">&quot;&quot;</span> ? ans = word : ans = word + <span class="string">&quot; &quot;</span> + ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310221723511.png" alt="image-20231022172336457"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>用了一个笨但有效的方法：先设置一个标志位tag，从头遍历字符串，遇到空格且标志位为0时，则跳过空格继续遍历，遇到非空格则将标志位置1，并加到word中，这样当再次遇到空格时，标志位为1代表word中已经有了一个完整的单词，然后将word和ans结合，注意此处word要在ans前。这里有几个值得注意的地方，如果此时ans为空，则不能使用ans &#x3D; word + “ “ + ans这种形式（会导致结尾多空格），必须区分出此情况。另外结束遍历时，word可能不为空（因为还没有来得及加入到ans，遍历就到结束条件了），此时应该用同样的方法将word与ans结合。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day20</title>
      <link href="/2023/10/21/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day20/"/>
      <url>/2023/10/21/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day20/</url>
      
        <content type="html"><![CDATA[<p><u><em>别害怕失败，只要做对一次就够了。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/longest-common-prefix/">最长公共前缀</a></p><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        string ans_str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> min_len = <span class="number">1000000</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; strs.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(strs[i].<span class="built_in">length</span>() &lt; min_len)&#123;</span><br><span class="line">                min_len = strs[i].<span class="built_in">length</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; min_len)&#123;</span><br><span class="line">            <span class="type">char</span> c = strs[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; strs.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(strs[j][i] != c)&#123;</span><br><span class="line">                    <span class="keyword">return</span> ans_str;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            ans_str += c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans_str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310211654074.png" alt="image-20231021165435032"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>简单题，首先统计出最短字符串，然后同时比较字符串的i下标对应的字符是否一致，相同则加到结果中，不同则直接返回当前结果。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day19</title>
      <link href="/2023/10/21/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day19/"/>
      <url>/2023/10/21/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day19/</url>
      
        <content type="html"><![CDATA[<p><u><em>若想得到你从未拥有的东西，你得愿意做你从未做过的事。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/length-of-last-word/">最后一个单词的长度</a></p><p>给你一个字符串 <code>s</code>，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 <strong>最后一个</strong> 单词的长度。</p><p><strong>单词</strong> 是指仅由字母组成、不包含任何空格字符的最大子字符串。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLastWord</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i;i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310211626322.png" alt="image-20231021162646271"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>简单题，过于简单了。通过观察给出的测试用例，发现存在以空格结尾的字符串，所以单纯从后往前遍历字符串，碰到空格就停止是无法实现的，所以先用了一个循环，记录第一个字母的位置，从此位置开始再进行依次循环，碰到空格就停止。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day18</title>
      <link href="/2023/10/18/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day18/"/>
      <url>/2023/10/18/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day18/</url>
      
        <content type="html"><![CDATA[<p><u><em>怪罪别人绝不会让你获得成功。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/integer-to-roman/">整数转罗马数字</a></p><p>罗马数字包含以下七种字符： <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给你一个整数，将其转为罗马数字。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        string result;</span><br><span class="line">        <span class="type">int</span> values[] = &#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        string reps[] = &#123;<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span>(num)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(num &gt;= values[i])&#123;</span><br><span class="line">                    result += reps[i];</span><br><span class="line">                    num -= values[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310182055103.png" alt="image-20231018205534054"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>此题是上一道题目的变种，上一道题目是给出罗马数字转阿拉伯数字，本题给出阿拉伯数字转罗马数字。先说一下我遇到的问题，开始我还是打算利用hash表存放对应关系，即键是int值是string。但后面遇到了问题。此题解法为贪心算法，贪心思路是遍历存放数和罗马数字数组，每次取其中能表示的最大的数，（因为数组中的对应关系刻意采用从大到小的方式排列，只要从头遍历，一旦满足条件就break），表示出来然后将原数减掉表示完的数，将得到的罗马数字加到ans里，循环结束后即可得到正确ans。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day17</title>
      <link href="/2023/10/17/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day17/"/>
      <url>/2023/10/17/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day17/</url>
      
        <content type="html"><![CDATA[<p><em><u>努力成为那位能获得你追寻目标的人物。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/roman-to-integer/">罗马数字转整数</a></p><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; m;</span><br><span class="line">        m[<span class="string">&#x27;I&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">        m[<span class="string">&#x27;V&#x27;</span>]=<span class="number">5</span>;</span><br><span class="line">        m[<span class="string">&#x27;X&#x27;</span>]=<span class="number">10</span>;</span><br><span class="line">        m[<span class="string">&#x27;L&#x27;</span>]=<span class="number">50</span>;</span><br><span class="line">        m[<span class="string">&#x27;C&#x27;</span>]=<span class="number">100</span>;</span><br><span class="line">        m[<span class="string">&#x27;D&#x27;</span>]=<span class="number">500</span>;</span><br><span class="line">        m[<span class="string">&#x27;M&#x27;</span>]=<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> per = <span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m[s[i]] &lt;= per)&#123;</span><br><span class="line">                ans += m[s[i]];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans -= per;</span><br><span class="line">                ans += m[s[i]] - per;</span><br><span class="line">            &#125;</span><br><span class="line">            per = m[s[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310172149174.png" alt="image-20231017214958127"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>重回简单题的感觉非常好，首先选择用hash表存储char字符和数字的一一对应关系，然后逐一解析字符，在解析过程中保存前一个字符对应的数字记为per，per初始值设为1001（比最大的M大1），然后进行判断，如果当前字符对应的值要小于等于per，则正常累加到ans中，如果大于这说明是特殊表示，就把per从ans中删除再重新加入当前数-per即可得到正确值。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day16</title>
      <link href="/2023/10/16/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day16/"/>
      <url>/2023/10/16/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day16/</url>
      
        <content type="html"><![CDATA[<p><em><u>大人物都是从小人物时不断地尝试而造就。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/trapping-rain-water/">接雨水</a></p><p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> h = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> max_height = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> hole = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> wall = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; height.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            max_height = <span class="built_in">max</span>(max_height,height[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(max_height &gt; h)&#123;</span><br><span class="line">            <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> right = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; height.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(height[i] &gt; h)&#123;</span><br><span class="line">                    left = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = height.<span class="built_in">size</span>() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(height[i] &gt; h)&#123;</span><br><span class="line">                    right = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            wall = <span class="built_in">min</span>(height[left],height[right]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = left + <span class="number">1</span>;i &lt; right;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(height[i] &lt; wall)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(height[i] &gt; h)&#123;</span><br><span class="line">                        sum += wall - height[i];</span><br><span class="line">                    &#125;<span class="keyword">else</span> </span><br><span class="line">                        sum += wall - h;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            h = wall;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310161842687.png" alt="image-20231016184207642"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>我本人的想法是，首先对整个数组进行一次遍历，找到数组中的最大值作为循环的限制条件。设置变量h为当前层数，然后进入while循环，在while循环中首先从左到右遍历，找到第一个值大于h的下标，记为left，同理从右到左遍历，记为right。接下来在left和right中的较小者（记为wall）围成的区域中进行操作，遍历此区域，从中减去无法存储雨水的区域，这里分两种情况，如果值大于h，则wall与当前height[i]的差值就是储水区域，如果值小于h，则wall和h的差值是储水区域，第二种这样处理的原因是防止已经计算过的区域重复计算，遍历完当前层后，更新h的值为当前wall的高度。</p><p>但这样时间复杂度十分滴高，大概率因为进行了太多次的循环，下面是官方题解代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> leftMax = <span class="number">0</span>, rightMax = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            leftMax = <span class="built_in">max</span>(leftMax, height[left]);</span><br><span class="line">            rightMax = <span class="built_in">max</span>(rightMax, height[right]);</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                ans += leftMax - height[left];</span><br><span class="line">                ++left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += rightMax - height[right];</span><br><span class="line">                --right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另外我单独写了一份可以可视化样例的程序，能方便调试吧。</p><p>(比较丑)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;head.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; n = &#123;<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">while</span>(max &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n[i] &gt;= max)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> </span><br><span class="line">                cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        max--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310161933908.png" alt="image-20231016193349868"></p><p>根据给的样例生成柱状图↑</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day15</title>
      <link href="/2023/10/12/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day15/"/>
      <url>/2023/10/12/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day15/</url>
      
        <content type="html"><![CDATA[<p><u><em>过分谨慎的人难有成就。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/candy/">分发糖果</a></p><p><code>n</code> 个孩子站成一排。给你一个整数数组 <code>ratings</code> 表示每个孩子的评分。</p><p>你需要按照以下要求，给这些孩子分发糖果：</p><ul><li>每个孩子至少分配到 <code>1</code> 个糖果。</li><li>相邻两个孩子评分更高的孩子会获得更多的糖果。</li></ul><p>请你给每个孩子分发糖果，计算并返回需要准备的 <strong>最少糖果数目</strong> 。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">candy</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; ratings)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = ratings.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">right</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span> &amp;&amp; ratings[i] &gt; ratings[i - <span class="number">1</span>])&#123;</span><br><span class="line">                left[i] = left[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i != n - <span class="number">1</span> &amp;&amp; ratings[i] &gt; ratings[i + <span class="number">1</span>])&#123;</span><br><span class="line">                right[i] = right[i + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += <span class="built_in">max</span>(left[i], right[i]);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310122122022.png" alt="image-20231012212252979"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>此题最终满足两个规则，从左到右遍历，每次比较两个孩子，保证如果右边的孩子比左边孩子分高，糖果也要多。从右到左遍历，保证左边的孩子分高，糖果比右边多。简称左规则和右规则。进行两次遍历，第一次遍历从左到右，将满足左规则的糖果分配存放在left数组中。再进行一遍右便利，满足将满足右规则的糖果分配存放到right。同时对比left[i]和right[i]，取其中最大的数，这个数一定同时满足左右规则，累加到sum，最终得到糖果总数。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day14</title>
      <link href="/2023/10/11/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day14/"/>
      <url>/2023/10/11/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day14/</url>
      
        <content type="html"><![CDATA[<p><u><em>时代和环境变化非常快速，因此我们必须持续将目光聚焦在未来。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/gas-station/">加油站</a></p><p>在一条环路上有 <code>n</code> 个加油站，其中第 <code>i</code> 个加油站有汽油 <code>gas[i]</code> 升。</p><p>你有一辆油箱容量无限的的汽车，从第 <code>i</code> 个加油站开往第 <code>i+1</code> 个加油站需要消耗汽油 <code>cost[i]</code> 升。你从其中的一个加油站出发，开始时油箱为空。</p><p>给定两个整数数组 <code>gas</code> 和 <code>cost</code> ，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 <code>-1</code> 。如果存在解，则 <strong>保证</strong> 它是 <strong>唯一</strong> 的。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">canCompleteCircuit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; gas, vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; gas.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            now += gas[i] - cost[i];</span><br><span class="line">            sum += gas[i] - cost[i];</span><br><span class="line">            <span class="keyword">if</span>(now &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                start = i+<span class="number">1</span>;</span><br><span class="line">                now = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="总结与收获："><a href="#总结与收获：" class="headerlink" title="总结与收获："></a>总结与收获：</h1><p>此题首先确立两步，一是总油量减总消耗如果大于0，那必定有解；二是遍历所有加油站，只要当前的消耗大于油量，则说明这个出发点不行，直接定义下一个加油站为起点。这样遍历一遍加油站后，就能得出有没有解。（怎么确保这是唯一解？）</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day13</title>
      <link href="/2023/10/10/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day13/"/>
      <url>/2023/10/10/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day13/</url>
      
        <content type="html"><![CDATA[<p><em><u>失败是抵达卓越的另一个踏脚石。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/product-of-array-except-self/"> 除自身以外数组的乘积</a></p><p>给你一个整数数组 <code>nums</code>，返回 <em>数组 <code>answer</code> ，其中 <code>answer[i]</code> 等于 <code>nums</code> 中除 <code>nums[i]</code> 之外其余各元素的乘积</em> 。</p><p>题目数据 <strong>保证</strong> 数组 <code>nums</code>之中任意元素的全部前缀元素和后缀的乘积都在 <strong>32 位</strong> 整数范围内。</p><p>请 <strong>不要使用除法，</strong>且在 <code>O(*n*)</code> 时间复杂度内完成此题。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">productExceptSelf</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(len,<span class="number">1</span>)</span></span>;</span><br><span class="line">        ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            ans[i] = ans[i - <span class="number">1</span>] * nums[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> tmp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            tmp *= nums[i + <span class="number">1</span>];</span><br><span class="line">            ans[i] *= tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310101901689.png" alt="image-20231010190145639"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>刚拿到题目，我还在窃喜，此题只要提前算出所有元素的乘积，再利用除法即可轻松解决，无奈发现题目要求不能用除法，遂作罢。其实要想求一个数除了自己本身，其他数的乘积无非就是三个步骤，第一步，求该数左边部分的乘积，第二步求右边部分的乘积，第三步两边乘积相乘，即可得到结果，于是在代码中，我用了两个循环，第一个循环是计算每个元素左边所有元素的乘积，第二个循环是用第一步的计算结果，乘右边部分，最终得到ans数组即是结果，题中还运用了动态规划，ans数组中的每一个元素，都可以看做是前一个元素乘nums数组上一个元素所得，没有重复计算，下面附几张大佬的解读图：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310101904116.png" alt="image-20231010190452079"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310101905326.png" alt="image-20231010190502289"></p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day12</title>
      <link href="/2023/10/09/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day12/"/>
      <url>/2023/10/09/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day12/</url>
      
        <content type="html"><![CDATA[<p><em><u>事情会改变，朋友会离去。 生命不会为了任何人而停歇。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/insert-delete-getrandom-o1/">O(1) 时间插入、删除和获取随机元素</a></p><p>实现<code>RandomizedSet</code> 类：</p><ul><li><code>RandomizedSet()</code> 初始化 <code>RandomizedSet</code> 对象</li><li><code>bool insert(int val)</code> 当元素 <code>val</code> 不存在时，向集合中插入该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li><li><code>bool remove(int val)</code> 当元素 <code>val</code> 存在时，从集合中移除该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li><li><code>int getRandom()</code> 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 <strong>相同的概率</strong> 被返回。</li></ul><p>你必须实现类的所有函数，并满足每个函数的 <strong>平均</strong> 时间复杂度为 <code>O(1)</code> 。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedSet</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">RandomizedSet</span>() &#123;</span><br><span class="line"></span><br><span class="line">        data.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="built_in">find</span>(val) != data.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data[val] = data.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="built_in">find</span>(val) == data.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data.<span class="built_in">erase</span>(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = data.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">rand</span>() % n;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = data.<span class="built_in">begin</span>(); it != data.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == index) &#123;</span><br><span class="line">                <span class="keyword">return</span> it-&gt;first;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310092308196.png" alt="image-20231009230830147"></p><h1 id="总结收获："><a href="#总结收获：" class="headerlink" title="总结收获："></a>总结收获：</h1><p>题目要求在o(1)复杂度内实现集合的增，删，和随机获取，o（1）复杂的首选哈希表，在题目给的类中加入新的元素：哈希表data，用来存放数据，之后再调用哈希表本身自带的方法即可实现o(1)复杂度增删，但取随机元素会比较复杂，最坏情况需要o（n）的复杂度，因此这并不是最优解。</p><h1 id="优化："><a href="#优化：" class="headerlink" title="优化："></a>优化：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedSet</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">RandomizedSet</span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">srand</span>((<span class="type">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="built_in">count</span>(val) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data[val] = data.<span class="built_in">size</span>();</span><br><span class="line">        nums.<span class="built_in">emplace_back</span>(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="built_in">count</span>(val) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> index = data[val];</span><br><span class="line">        <span class="type">int</span> last = nums.<span class="built_in">back</span>();</span><br><span class="line">        nums[index] = last;</span><br><span class="line">        data[last] = index;</span><br><span class="line">        nums.<span class="built_in">pop_back</span>();</span><br><span class="line">        data.<span class="built_in">erase</span>(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">rand</span>() % nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> nums[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>具体优化就是新增了一个数组用来存放集合里的元素，与之前的代码相比，除了空间复杂度略有提高之外，代码体积上也有增加，因为需要同步维护该数组，该数组最重要的作用是在取随机值时可以直接作为索引，取得随机数，时间复杂度是o(1)。</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310092316276.png" alt="image-20231009231602231"></p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day11</title>
      <link href="/2023/10/08/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day11/"/>
      <url>/2023/10/08/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day11/</url>
      
        <content type="html"><![CDATA[<p><em><u>原谅是人际关系的润滑油。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/h-index/">H 指数</a></p><p>给你一个整数数组 <code>citations</code> ，其中 <code>citations[i]</code> 表示研究者的第 <code>i</code> 篇论文被引用的次数。计算并返回该研究者的 <strong><code>h</code> 指数</strong>。</p><p>根据维基百科上 <a href="https://baike.baidu.com/item/h-index/3991452?fr=aladdin">h 指数的定义</a>：<code>h</code> 代表“高引用次数” ，一名科研人员的 <code>h</code> <strong>指数</strong> 是指他（她）至少发表了 <code>h</code> 篇论文，并且每篇论文 <strong>至少</strong> 被引用 <code>h</code> 次。如果 <code>h</code> 有多种可能的值，**<code>h</code> 指数** 是其中最大的那个。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(citations.<span class="built_in">begin</span>(), citations.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> len = citations.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(citations[i] &gt;= len - i)&#123;</span><br><span class="line">                <span class="keyword">return</span> len - i;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310082137008.png" alt="image-20231008213659929"></p><h1 id="总结收获："><a href="#总结收获：" class="headerlink" title="总结收获："></a>总结收获：</h1><p>题目看起来比较唬人，但实际就是下标和数组值之间的关系，当我们把数组升序排序后，此时数组中是论文引用次数递增，再从头遍历数组，当数组中的最小值大于数组剩余元素个数，这个值就是题目要求的h指数。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day10</title>
      <link href="/2023/10/07/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day10/"/>
      <url>/2023/10/07/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day10/</url>
      
        <content type="html"><![CDATA[<p><em><u>善用你的优势。 多做你擅长的事情而不是那些你不擅长的事。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/jump-game-ii/">跳跃游戏 II</a></p><p>给定一个长度为 <code>n</code> 的 <strong>0 索引</strong>整数数组 <code>nums</code>。初始位置为 <code>nums[0]</code>。</p><p>每个元素 <code>nums[i]</code> 表示从索引 <code>i</code> 向前跳转的最大长度。换句话说，如果你在 <code>nums[i]</code> 处，你可以跳转到任意 <code>nums[i + j]</code> 处:</p><ul><li><code>0 &lt;= j &lt;= nums[i]</code> </li><li><code>i + j &lt; n</code></li></ul><p>返回到达 <code>nums[n - 1]</code> 的最小跳跃次数。生成的测试用例可以到达 <code>nums[n - 1]</code>。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> maxPos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        maxPos = <span class="built_in">max</span>(nums[i] + i, maxPos);</span><br><span class="line">        <span class="keyword">if</span> (i == end)</span><br><span class="line">        &#123;</span><br><span class="line">            end = maxPos;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> step;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310072326239.png" alt="image-20231007232643158"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day09</title>
      <link href="/2023/10/04/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day09/"/>
      <url>/2023/10/04/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day09/</url>
      
        <content type="html"><![CDATA[<p><em><u>不论今天过得很好还是过得很有趣。 明天都是新的开始。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/jump-game/">跳跃游戏</a></p><p>给你一个非负整数数组 <code>nums</code> ，你最初位于数组的 <strong>第一个下标</strong> 。数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标，如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> most = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; most) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            k = <span class="built_in">max</span>(most, i + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310041949219.png" alt="image-20231004194923166"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>遍历一遍数组，看看能到达的最远距离是否比数组要长，如果是就能到达。开始想麻烦了，把所有之后能跳到的点都遍历一遍，找最远的，然后不停重复这个过程，实际上只需要记录一个最远距离，如果。另外如果i &gt; most说明i的值已经超过了最远距离，说明most一定在某处停止更新，永远不会到达终点。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day08</title>
      <link href="/2023/10/03/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day08/"/>
      <url>/2023/10/03/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day08/</url>
      
        <content type="html"><![CDATA[<p><u><em>千秋为卷，山河作答。</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">买卖股票的最佳时机 II</a></p><p>给你一个整数数组 <code>prices</code> ，其中 <code>prices[i]</code> 表示某支股票第 <code>i</code> 天的价格。</p><p>在每一天，你可以决定是否购买和&#x2F;或出售股票。你在任何时候 <strong>最多</strong> 只能持有 <strong>一股</strong> 股票。你也可以先购买，然后在 <strong>同一天</strong> 出售。</p><p>返回 <em>你能获得的 <strong>最大</strong> 利润</em> 。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> profit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; prices.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            temp = prices[i] - prices[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(temp &gt; <span class="number">0</span>) profit += temp;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310032015200.png" alt="image-20231003201555152"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>本题运用了贪心算法，其实是一种取巧方法，贪心算法的要点是每次都取最优解，运用到本题中，其实就是只要今天比昨天的股票有涨值，就出手获得利润，贪心的过程不是最终的购买过程，但可以利用贪心算法计算最大利润。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day07</title>
      <link href="/2023/10/01/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day07/"/>
      <url>/2023/10/01/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day07/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">买卖股票的最佳时机</a></p><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p><p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> min = prices[<span class="number">0</span>];    </span><br><span class="line">        <span class="type">int</span> max_profit = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> day: prices)&#123;</span><br><span class="line">            max_profit = max_profit&gt;(day-min)?max_profit:(day-min);</span><br><span class="line">            min = min&lt;(day)?min:day;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max_profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310012353713.png" alt="image-20231001235321662"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>拿现实中举个例子，如果我们买彩票想计算如果我们今天卖出，最多能赚多少，那一定是需要我们在之前价格最低的一天买入，所以我们一次遍历该数组，记录下历史最低价格，就假设我们是那天买入的，之后再继续遍历每天的利润（卖出-买入），记录下一个最大值。这样在一次遍历之后，就能得到最优解。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day06</title>
      <link href="/2023/09/30/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day06/"/>
      <url>/2023/09/30/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day06/</url>
      
        <content type="html"><![CDATA[<p><u><em>面对阳光你就不会看到阴影</em></u></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/rotate-array/">轮转数组</a></p><p>给定一个整数数组 <code>nums</code>，将数组中的元素向右轮转 <code>k</code> 个位置，其中 <code>k</code> 是非负数。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        k = k % nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">begin</span>()+ k - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>() + k, nums.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309301820301.png" alt="image-20230930182046224"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>本题还是比较简单的，轮转数组，如果要轮转k个元素，首先将k的数值范围减小成k % nums.size()，这才是有效移动的位数，然后将整个数组进行翻转，再然后以下标k为分界线，分界线左边和右边分别再进行一次翻转，最终得到翻转后的数组。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day05摩尔投票</title>
      <link href="/2023/09/29/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day05%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8/"/>
      <url>/2023/09/29/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day05%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8/</url>
      
        <content type="html"><![CDATA[<p><em><u>我从失败走向成功。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/majority-element/">多数元素</a></p><p>给定一个大小为 <code>n</code> 的数组 <code>nums</code> ，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">ceil</span>(nums.<span class="built_in">size</span>() / <span class="number">2.0</span>);</span><br><span class="line">        <span class="keyword">return</span> nums[len - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309300042563.png" alt="image-20230930004210454"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>这个求解思路其实和求解众数（一组数据中出现次数最多的数）但题目是找出出现次数大于n&#x2F;2的数（多数元素），只能说多数元素一定是众数，而众数不一定是多数元素，但题目说假设一定会有多数元素，所以用这种方法也可以求出题解。</p><p>将一个数组排序，中位数一定是众数。</p><p>在评论区看到了一个很有意思的解法，叫摩尔投票，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>,votes = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(votes == <span class="number">0</span>) n = num;</span><br><span class="line">            votes += num == n?<span class="number">1</span>:<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>n为目前假设的多数元素的值，votes是“票数”，遍历数组，当数组元素等于我们假设的多数元素，那就给票数+1，如果等于则-1，因为多数元素的数量一定大于数组长度的一半，所以其他元素的票数是不可能大于多数元素的，即-1的数量会小于+1，而对于错误的假设，最终votes一定会变成0，然后会假设新的元素为多数元素。</p><ul><li><strong>时间复杂度 O(N)O(N)*O*(*N*) ：</strong> NN<em>N</em> 为数组 <code>nums</code> 长度。</li><li><strong>空间复杂度 O(1)O(1)*O*(1) ：</strong> <code>votes</code> 变量使用常数大小的额外空间。</li></ul><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309300101950.png" alt="image-20230930010124902"></p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day04</title>
      <link href="/2023/09/29/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day04/"/>
      <url>/2023/09/29/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day04/</url>
      
        <content type="html"><![CDATA[<p><em><u>忧虑的度过一天，比起工作一周还令人劳累。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/">删除有序数组中的重复项 II</a></p><p>给你一个有序数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使得出现次数超过两次的元素<strong>只出现两次</strong> ，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() &lt;= <span class="number">2</span>) <span class="keyword">return</span> nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> fast = <span class="number">2</span>,slow = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(fast;fast &lt; nums.<span class="built_in">size</span>();fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] != nums[slow - <span class="number">2</span>])&#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309292227897.png" alt="image-20230929222725858"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>此题可以参考昨天的一题，都是采用了快慢指针的思路，不过本题多了一个条件是可以允许元素最多出现两次，在昨天的题目中，我们是用快指针和慢指针前一个元素比较，发现如果一样则表示重复，慢指针所指的位置作为待替换位。今天的题目，我们需要比较慢指针前两个元素和快指针所指元素，如果一样，说明元素数量超过两个，则慢指针为待替换位。<br>本题提交的时候错了一次，因为没有检测如果数组的元素数量小于等于2（因为两个元素理论上不需要进行操作）。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day03</title>
      <link href="/2023/09/29/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day03/"/>
      <url>/2023/09/29/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day03/</url>
      
        <content type="html"><![CDATA[<p><em><u>海上生明月，天涯共此时。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">删除有序数组中的重复项</a></p><p>给你一个 <strong>非严格递增排列</strong> 的数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。然后返回 <code>nums</code> 中唯一元素的个数。</p><p>考虑 <code>nums</code> 的唯一元素的数量为 <code>k</code> ，你需要做以下事情确保你的题解可以被通过：</p><ul><li>更改数组 <code>nums</code> ，使 <code>nums</code> 的前 <code>k</code> 个元素包含唯一元素，并按照它们最初在 <code>nums</code> 中出现的顺序排列。<code>nums</code> 的其余元素与 <code>nums</code> 的大小不重要。</li><li>返回 <code>k</code> 。</li></ul><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">       <span class="type">int</span> first = <span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> second = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span>(first;first &lt; nums.<span class="built_in">size</span>();first++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[first] != nums[second - <span class="number">1</span>])&#123;</span><br><span class="line">                nums[second] = nums[first];</span><br><span class="line">                second++;</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> second + <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309292145337.png" alt="image-20230929214547282"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>本题运用了快慢指针，代码中first为快指针，second为慢指针，循环开始时，快慢指针同时指向数组中第二个元素，在之后的循环中，若快指针和慢指针后一位不相等，则快慢指针一起后移，若相等，则 慢指针原地不动，作为替换位，快指针继续后移，直到找到不等于慢指针后一位元素的数，这时将慢指针本身指向的数替换为快指针的值，完成去重。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day02</title>
      <link href="/2023/09/27/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day02/"/>
      <url>/2023/09/27/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day02/</url>
      
        <content type="html"><![CDATA[<p><em><u>事情不是足以改变世界才算重要。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/remove-element/">移除元素</a></p><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong>。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">bool</span> is_end = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(nums[i] == val)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i + n == len )&#123;</span><br><span class="line">                    is_end = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nums[i + n] != val)&#123;</span><br><span class="line">                    <span class="built_in">swap</span>(nums[i], nums[i + n]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    n++; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(is_end)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309272241529.png" alt="image-20230927224136448"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>这道题我的思路是如果当前下标指向的元素数值等于val，那就将他和后面一个不为val的数交换，直到所有等于val的数交换到数组尾部，然后再返回实际长度就可以了。其中我设置了一个变量n，初始化为1，代表如果遇到等于val的数，就看他后面1位是不是也等于val，如果不是直接交换，如果是就将n++，代表之后会看后面第2位是否是val，n的值是永久改变的，因为按照该算法如果出现了两个或以上val连在一起的情况，如果不改变n的值，会导致val值之间换来换去，同时我加了一个判断标志，如果当前下标加上n的值超过了数组长度，那就说明下标后所有的值都是val，这时只要返回下标值（因为下标比实际长度少1），就等于数组最终长度。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日一题Day01</title>
      <link href="/2023/09/26/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day01/"/>
      <url>/2023/09/26/%E5%8A%9B%E6%89%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98Day01/</url>
      
        <content type="html"><![CDATA[<p><em><u>最危险情况是当你不再有新进展。</u></em></p><h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p><a href="https://leetcode.cn/problems/merge-sorted-array/">合并两个有序数组</a></p><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p><p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><p><strong>注意：</strong>最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p><h1 id="解题代码："><a href="#解题代码：" class="headerlink" title="解题代码："></a>解题代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nums3</span><span class="params">(m + n)</span></span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> key = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i] &lt; nums2[j])&#123;</span><br><span class="line">                nums3[key++] = nums1[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nums3[key++] = nums2[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; m)&#123;</span><br><span class="line">            nums3[key++] = nums1[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; n)&#123;</span><br><span class="line">            nums3[key++] = nums2[j++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        nums1 = nums3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309262135213.png" alt="image-20230926213549163"></p><h1 id="解读与收获："><a href="#解读与收获：" class="headerlink" title="解读与收获："></a>解读与收获：</h1><p>这是一道很经典的题目，我的解题思路是创建一个vector数组nums3，它的大小是m+n,用来暂时存放合并后的数组，然后从头遍历nums1和nums2,将两者之间的较小者插入nums3中，被选择的元素所在的数组下标和nums3下标同时后移一位，循环结束后将没插入num3的剩余内容循环插入，最后将nums3赋值给nums1。</p><p>收获：</p><p>1.vector数组的创建方法：vector<int> nums(m + n);</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构基础</title>
      <link href="/2023/09/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/09/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="重拾数据结构"><a href="#重拾数据结构" class="headerlink" title="重拾数据结构"></a>重拾数据结构</h1><p>我认为数据结构相关的东西都是同一套模板，只不过是使用了不同的数据存储方式，所以看懂代码思路很重要，看懂思路后面的不论是顺序表，链表还是树，其实性质大差不差。</p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">//若用printf,scanf,getchar,putchar,gets,puts函数需包含该头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span><span class="comment">//用malloc,free,realloc函数需包含该头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100 <span class="comment">//设线性表初始分配空间大小</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  <span class="comment">//先设定数据元素的类型为整型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//0：定义顺序表的结构类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">ElemType* elem;</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line"><span class="type">int</span> listsize;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1：初始化顺序表</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InitList_Sq</span><span class="params">(SqList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">L.elem = (ElemType*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ElemType) * MAXSIZE);</span><br><span class="line"><span class="keyword">if</span> (!L.elem) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">L.length = <span class="number">0</span>;</span><br><span class="line">L.listsize = MAXSIZE;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>malloc :动态内存分配，用法是（数据类型*）malloc(sizeof(要分配的地址块大小) * 块数量)</p><p>补充：realloc 动态修改内存</p><p>用法是 (数据类型* )realloc(原地址指针,新地址大小)</p><p>realloc的使用存在三种情况，一是如果后面的空间足够扩展，则会直接扩展；二是后面的空间不足扩展，realloc会调用malloc重新开辟一块大小为所需大小的内存空间，然后把原内容拷贝进来，并释放原空间；三是内存不足，扩展失败，此时原空间不会发生改变，realloc返回一个空地址。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2：打印顺序表中所有元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(SqList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, L.elem[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*****3：在顺序表中第i个位置(i=1~n)插入元素*****</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListInsert_Sq</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> p = L.length - <span class="number">1</span>; p &gt;= i; p--) &#123;</span><br><span class="line">L.elem[p] = L.elem[p - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">L.elem[i - <span class="number">1</span>] = e;</span><br><span class="line">L.length++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*****4：删除顺序表中第i(i=1~n)个元素，用e返回删除的元素*****</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListDelete_Sq</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, ElemType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">e = L.elem[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> p = i - <span class="number">1</span>; p &lt; L.length - <span class="number">1</span>; p++) &#123;</span><br><span class="line">L.elem[p] = L.elem[p + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">L.length--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里遇到的坑无非就是何为length，插入位置，下标之间的关系，因为下标是从0开始，所以如果要使用下标，就要考虑length和插入位置都要减1，这就要牵扯出一些边界条件，对于拿不准的我比较喜欢简单画一下图，或者举一点数据量小的例子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顺序表合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeList</span><span class="params">(SqList La, SqList Lb, SqList&amp; Lc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> end_La = La.length;</span><br><span class="line"><span class="type">int</span> end_lb = Lb.length;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Lc.elem = (ElemType*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ElemType) * MAXSIZE);</span><br><span class="line">Lc.length = end_La + end_lb;</span><br><span class="line">Lc.listsize = MAXSIZE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; end_La &amp;&amp; j &lt; end_lb) &#123;</span><br><span class="line"><span class="keyword">if</span> (La.elem[i] &lt; Lb.elem[j]) &#123;</span><br><span class="line">Lc.elem[c] = La.elem[i];</span><br><span class="line">c++;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Lc.elem[c] = Lb.elem[j];</span><br><span class="line">c++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt; end_La) &#123;</span><br><span class="line"><span class="keyword">while</span> (La.elem[i]) &#123;</span><br><span class="line">Lc.elem[c] = La.elem[i];</span><br><span class="line">i++;</span><br><span class="line">c++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j &lt; end_lb) &#123;</span><br><span class="line"><span class="keyword">while</span> (Lc.elem[j]) &#123;</span><br><span class="line">Lc.elem[c] = Lb.elem[j];</span><br><span class="line">j++;</span><br><span class="line">c++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>单链表结点结构体:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> &#123;</span><br><span class="line">    <span class="comment">///===============补充代码======================== </span></span><br><span class="line">    ElemType data;</span><br><span class="line">    LNode* next;</span><br><span class="line"></span><br><span class="line">&#125;LNode, * LinkList;      <span class="comment">// 定义节点类型以及链表类型（链表类型实际上是一个节点指针类型）</span></span><br></pre></td></tr></table></figure><p>单链表有两种插入方法，一种头插法，一种尾插法，前者结果是倒序，后者为正序</p><p>头插法(i为1时)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListInsert_L</span><span class="params">(LinkList&amp; L, <span class="type">int</span> i, ElemType e)</span> </span>&#123; <span class="comment">// 算法2.9</span></span><br><span class="line">    <span class="comment">// 在带头结点的单链线性表L的第i个元素之前插入元素e   </span></span><br><span class="line">  <span class="comment">///===============补充代码========================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    LNode* new_node = (LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    new_node-&gt;data = e;</span><br><span class="line">    new_node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    LNode* per_node = L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        per_node = per_node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    new_node-&gt;next = per_node-&gt;next;</span><br><span class="line">    per_node-&gt;next = new_node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="comment">// LinstInsert_L</span></span><br></pre></td></tr></table></figure><p>尾插法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListInsert_N</span><span class="params">(LinkList&amp; L)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    LNode* per_node = L;</span><br><span class="line">    <span class="keyword">while</span> (per_node-&gt;next != <span class="literal">NULL</span> &amp;&amp; per_node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        per_node = per_node-&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        std::cin &gt;&gt; e;</span><br><span class="line">        LNode* new_node = (LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">        new_node-&gt;data = e;</span><br><span class="line">        new_node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        per_node-&gt;next = new_node;</span><br><span class="line">        per_node = per_node-&gt;next;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单链表有一个容易被忽略的点是在new_node分配内存后一定要给其中的data，next赋初值，不然会越界。</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>“先进先出”</p><p>队列结构体：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">ElemType* base;</span><br><span class="line"><span class="type">int</span> front;</span><br><span class="line"><span class="type">int</span> rear;</span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><p>谈及队列一般都是指循环队列，因为普通队列在使用时，如果发生出队操作，那对头所在的空间就无法再返回使用了，导致空间的浪费，而使用循环队列，当队尾到达分配的MAXSIZE上限时，通过取余操作重新利用到已经出队的空间，具体操作在入队，出队，以及计算队长等均有体现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求队列的长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QueueLength</span><span class="params">(SqQueue&amp; Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Q.rear - Q.front + MAXQSIZE) % MAXQSIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素e作为Q的新的队尾元素，队满则返回0，否则返回1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">EnQueue</span><span class="params">(SqQueue&amp; Q, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) % MAXQSIZE == Q.front) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">Q.base[Q.rear] = e;</span><br><span class="line">Q.rear = (Q.rear + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若队列不空，则删除Q的队头元素，用e返回其值，并返回1,否则返回0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">DeQueue</span><span class="params">(SqQueue&amp; Q, ElemType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">QueueEmpty</span>(Q)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">e = Q.base[Q.front];</span><br><span class="line">Q.front = (Q.front + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>“后进先出”</p><p>栈结构体：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">STACK</span></span><br><span class="line">&#123;</span><br><span class="line">ElemType* base;</span><br><span class="line">ElemType* top;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><p>栈所有的操作都只变化top指针，这点不同于队列，因为其后进先出的性质，栈在回溯算法利用的比较多，他可以实现“后退”操作，比如回到树的上一结点。栈的本质我认为就是个只能对末尾操作的数组，同理队列可以理解为可以两边同时操作的数组。</p><p>判空操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判栈空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈中元素个数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求栈中元素个数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StackLength</span><span class="params">(SqStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (StackEmpty) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> S.top - S.base ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里S.top - S.base就能得到栈中元素个数，因为指针值相减的结果是两个指针之间的距离，即它们所指向的内存地址之间的偏移量。这个偏移量的单位取决于指针所指向的数据类型的大小。例如，在C语言中，如果两个指针指向相同类型的数组元素，那么它们之间的距离就是数组元素的个数乘以每个元素的大小。</p><p>入栈：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Push</span><span class="params">(SqStack&amp; s, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">StackLength</span>(s) == MAXSIZE) &#123;</span><br><span class="line">s.base = (ElemType*)<span class="built_in">realloc</span>(s.base, <span class="built_in">sizeof</span>(ElemType) * (s.size + STACKINCREMENT));</span><br><span class="line">s.size = s.size + STACKINCREMENT;</span><br><span class="line">&#125;</span><br><span class="line">*(s.top++) = e;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里加了一个扩容（其实之前都可以加，不过懒得都没加），栈的top一般都停在最近的一个空位，而不是指向栈尾，因此入栈后top要后移。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pop</span><span class="params">(SqStack&amp; s, ElemType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e = *(--s.top);</span><br><span class="line"><span class="keyword">return</span>  <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理出栈top先前移。</p><h3 id="数制转换"><a href="#数制转换" class="headerlink" title="数制转换"></a>数制转换</h3><p>扩展一下栈的一个用法：数制转换</p><p>因为数制转换一般是使用短除法，最后将余数反向组合，反向组合就可以利用栈后进先出的性质，通过取整取余操作，就能实现简单的进制转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数制转换函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">conversion</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ElemType e;</span><br><span class="line">SqStack S;</span><br><span class="line"><span class="built_in">InitStack</span>(S);</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">int</span> jinzhi;</span><br><span class="line">std::cin &gt;&gt; num;</span><br><span class="line">std::cin &gt;&gt; jinzhi;</span><br><span class="line"><span class="keyword">while</span> (num) &#123;</span><br><span class="line"><span class="built_in">Push</span>(S, num % jinzhi);</span><br><span class="line">num = num / jinzhi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(S)) &#123;</span><br><span class="line"><span class="built_in">Pop</span>(S,num);</span><br><span class="line"><span class="keyword">if</span> (num &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">std::cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">std::cout &lt;&lt; (<span class="type">char</span>)(num - <span class="number">10</span> + <span class="number">65</span>) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为16进制比较特殊，他会出现大于等于10的情况，这种情况要输出“ABC。。。”，所以在输出时加了一个判断，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">std::cout &lt;&lt; (<span class="type">char</span>)(num - <span class="number">10</span> + <span class="number">65</span>) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>二叉树结构体：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BiTNode</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    BiTNode* left;</span><br><span class="line">    BiTNode* right;</span><br><span class="line"></span><br><span class="line">&#125;BiTNode, * BiTree;</span><br></pre></td></tr></table></figure><p>创建树：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree&amp; T)</span><span class="comment">//按先序次序输入，以&quot;#&quot;表示空树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> input;</span><br><span class="line">    std::cin &gt;&gt; input;</span><br><span class="line">    <span class="keyword">if</span> (input != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        T = (BiTree)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BiTNode));</span><br><span class="line">        T-&gt;data = input;</span><br><span class="line">        <span class="built_in">CreateBiTree</span>(T-&gt;left);</span><br><span class="line">        <span class="built_in">CreateBiTree</span>(T-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        T = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注意点就是记得给空结点赋值为NULL（并不是默认为NULL，他会指向0FFFFF。。。）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T)</span><span class="comment">//先序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        cout &lt;&lt; T-&gt;data &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">PreOrderTraverse</span>(T-&gt;left);</span><br><span class="line">        <span class="built_in">PreOrderTraverse</span>(T-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span><span class="comment">//中序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">InOrderTraverse</span>(T-&gt;left);</span><br><span class="line">        cout &lt;&lt; T-&gt;data &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">InOrderTraverse</span>(T-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span><span class="comment">//后序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">PostOrderTraverse</span>(T-&gt;left);</span><br><span class="line">        <span class="built_in">PostOrderTraverse</span>(T-&gt;right);</span><br><span class="line">        cout &lt;&lt; T-&gt;data &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求树深：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">BTDepth</span><span class="params">(BiTree T)</span><span class="comment">//求二叉树的深度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> Lheight;</span><br><span class="line">    <span class="type">int</span> Rheight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        Lheight = <span class="built_in">BTDepth</span>(T-&gt;left);</span><br><span class="line">        Rheight = <span class="built_in">BTDepth</span>(T-&gt;right);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Lheight &gt; Rheight ? Lheight + <span class="number">1</span> : Rheight + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遇到的问题：在树为NULL的时候忘记return 0了，在向上层return的时候忘记在当前深度的基础上加1</p><p>求叶结点个数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Leaf</span><span class="params">(BiTree T)</span><span class="comment">//求二叉树的叶子数, 使用全局变量</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">Leaf</span>(T-&gt;right);</span><br><span class="line">        <span class="built_in">Leaf</span>(T-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (T-&gt;left == <span class="literal">NULL</span> &amp;&amp; T-&gt;right == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            LEAFCOUNT++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前两个递归调用的终点是每个叶节点，只需要判断是否递归到叶节点，条件就是左右子树都是空。</p><p>求总结点个数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">NodeCount</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;BiTree&gt; st;</span><br><span class="line">    <span class="keyword">while</span> (T || !st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (T) &#123;</span><br><span class="line">            NODECOUNT++;</span><br><span class="line">            st.<span class="built_in">push</span>(T);</span><br><span class="line">            T = T-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            T = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            T = T-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈和while循环搭配使用的方法很适合遍历，如果树不为空就入栈继续遍历，如果树为空了那就栈顶出栈，继续走右节点，这种遍历方式或许还可以用到一些迷宫小游戏里。</p><p>非递归的遍历也是使用这种结构：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Traverse_By_Stack</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    stack&lt;BiTree&gt; sta;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (T || !sta.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (T) &#123;</span><br><span class="line">            cout &lt;&lt; T-&gt;data &lt;&lt; endl; <span class="comment">// 先序遍历</span></span><br><span class="line">            sta.<span class="built_in">push</span>(T);</span><br><span class="line">            T = T-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            T = sta.<span class="built_in">top</span>();</span><br><span class="line">            <span class="comment">//cout &lt;&lt; T-&gt;data &lt;&lt; endl; // 后序遍历</span></span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">            T = T-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库内核开发-基础原理</title>
      <link href="/2023/07/31/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91-%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
      <url>/2023/07/31/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91-%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库内核开发-基础原理篇"><a href="#数据库内核开发-基础原理篇" class="headerlink" title="数据库内核开发-基础原理篇"></a>数据库内核开发-基础原理篇</h1><h2 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a>项目框架</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202307311742209.png" alt="image-20230731174232121"></p><p>sql执行流程代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">YY_BUFFER_STATE buf = <span class="built_in">yy_scan_string</span>(data_recv);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">yyparse</span>() == <span class="number">0</span>) &#123;</span><br><span class="line"> <span class="keyword">if</span> (ast::parse_tree != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// analyze and rewrite</span></span><br><span class="line">    std::shared_ptr&lt;Query&gt; query = analyze-&gt;<span class="built_in">do_analyze</span>(ast::parse_tree);</span><br><span class="line">             <span class="built_in">yy_delete_buffer</span>(buf);</span><br><span class="line">             finish_analyze = <span class="literal">true</span>;</span><br><span class="line">             <span class="built_in">pthread_mutex_unlock</span>(buffer_mutex);</span><br><span class="line">                    <span class="comment">// 优化器</span></span><br><span class="line">    std::shared_ptr&lt;Plan&gt; plan = optimizer-&gt;<span class="built_in">plan_query</span>(query, context);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// portal</span></span><br><span class="line">    std::shared_ptr&lt;PortalStmt&gt; portalStmt = portal-&gt;<span class="built_in">start</span>(plan, context);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    portal-&gt;<span class="built_in">run</span>(portalStmt, ql_manager.<span class="built_in">get</span>(), &amp;txn_id, context);</span><br><span class="line">                    </span><br><span class="line">              portal-&gt;<span class="built_in">drop</span>();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>一条sql语句从输入到数据库系统，再到执行一般需要经历四个阶段</p><h3 id="语法解析阶段（parser）"><a href="#语法解析阶段（parser）" class="headerlink" title="语法解析阶段（parser）"></a>语法解析阶段（parser）</h3><p>在这一阶段，程序会利用<strong>flex</strong>（语法分析生成器）和<strong>bison</strong>（语法分析生成器）对我们输入的sql语句进行解析，解释一下flex和bison</p><blockquote><p>Flex和Bison是两个用于处理语言解析的工具，常常被用于编译器和解释器的开发中。</p><ol><li><p><strong>Flex</strong>：Flex是一个词法分析器生成器，也就是说，它可以根据用户定义的模式生成一个词法分析器（或者叫做扫描器）。这个词法分析器可以将输入的字符流转换为一系列的词法单元（tokens）。例如，对于一条SQL语句，词法分析器可以将其分解为一系列的关键字、标识符、运算符等。</p></li><li><p><strong>Bison</strong>：Bison是一个语法分析器生成器，它可以根据用户定义的语法规则生成一个语法分析器。这个语法分析器可以将由词法分析器生成的词法单元序列转换为一个语法结构，通常是一个抽象语法树（AST）。例如，对于一条SQL语句，语法分析器可以将其转换为一个描述了这条SQL语句结构的AST。</p></li></ol></blockquote><p>在流程代码中，</p><blockquote><p>YY_BUFFER_STATE buf &#x3D; yy_scan_string(data_recv);</p></blockquote><p> 这行代码将接收到的SQL语句字符串转换为一个缓冲区，然后</p><blockquote><p> if (yyparse() &#x3D;&#x3D; 0) </p></blockquote><p>这行代码调用解析器对SQL语句进行语法解析。如果解析成功，ast::parse_tree 将包含解析生成的抽象语法树（AST）。</p><p>抽象语法树（AST）是源代码的抽象语法结构的树状表现形式，它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。在数据库中，当我们输入一条SQL语句时，数据库首先需要解析这条语句，解析的结果就是一个抽象语法树。例如，对于SQL语句 SELECT * FROM table WHERE id &#x3D; 1，其对应的抽象语法树可能如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  SELECT</span><br><span class="line">   /   |   \</span><br><span class="line"> *   FROM  WHERE</span><br><span class="line">     /     /   \</span><br><span class="line">table   id   =   1</span><br></pre></td></tr></table></figure><p>在这个树中，每个节点都代表一个操作或者一个值，例如 “SELECT”、”FROM”、”WHERE”、”&#x3D;” 等等。这个树形结构清晰地表示了SQL语句的结构，使得数据库可以更容易地理解和执行这条SQL语句。</p><p>同时在parser能进行基本的sql语法检查。</p><h3 id="语义分析（analyze）"><a href="#语义分析（analyze）" class="headerlink" title="语义分析（analyze）"></a>语义分析（analyze）</h3><blockquote><p>std::shared_ptr<Query> query &#x3D; analyze-&gt;do_analyze(ast::parse_tree);</p></blockquote><p>这行代码进行语义分析，将AST转换为一个查询对象。这个查询对象包含了执行查询所需的所有信息。</p><p>传入analyze的parse_tree会在里面进行分类，通过</p><blockquote><p>auto x &#x3D; std::dynamic_pointer_cast&lt;ast::SelectStmt&gt;(parse)</p></blockquote><p>​<strong>↑</strong></p><blockquote><p>SelectStmt，UpdateStmt，DeleteStmt，InsertStmt分别代表增删改查几种sql语句</p></blockquote><p>在analyze阶段，可以对解析出来的parse进行进一步检查，比如目标表（列）是否存在，以及左操作数和右操作数种类是否匹配等，然后把经过检查后的parse中的信息，封装成query查询对象，里面包含了查询所需的所有信息。</p><h3 id="查询优化（optimizer）"><a href="#查询优化（optimizer）" class="headerlink" title="查询优化（optimizer）:"></a>查询优化（optimizer）:</h3><p>对应执行流程里的</p><blockquote><p>std::shared_ptr<Plan> plan &#x3D; optimizer-&gt;plan_query(query, context);</p></blockquote><p>将查询对象传递给优化器，优化器会生成一个执行计划。执行计划是一个树形结构，经过优化器后的执行计划要做出一定程度的优化，最终生成计划树，举个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1, col2 <span class="keyword">FROM</span> table1, table2 <span class="keyword">WHERE</span> table1.id <span class="operator">=</span> table2.id <span class="keyword">AND</span> table1.id <span class="operator">&gt;</span> <span class="number">5</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> col2 <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><p>这条sql对应的查询计划树可能是下面：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SortPlan (col2 DESC)</span><br><span class="line">|</span><br><span class="line">ProjectionPlan (col1, col2)</span><br><span class="line">|</span><br><span class="line">JoinPlan (table1.id = table2.id)</span><br><span class="line">|   |</span><br><span class="line">|   ScanPlan (table2)</span><br><span class="line">|</span><br><span class="line">ScanPlan (table1, id &gt; 5)</span><br></pre></td></tr></table></figure><ol><li><p>最底层的 ScanPlan 是扫描操作，它们分别扫描 table1 和 table2。对于 table1，还有一个过滤条件 id &gt; 5。</p></li><li><p>JoinPlan 是连接操作，它将 table1 和 table2 连接在一起，连接条件是 table1.id &#x3D; table2.id。</p></li><li><p>ProjectionPlan 是投影操作，它从连接结果中选择 col1 和 col2 两列。</p></li><li><p>最顶层的 SortPlan 是排序操作，它按照 col2 列的值进行降序排序。</p></li></ol><p>这个查询计划树表示了如何执行这条SQL查询语句。数据库会从最底层的扫描操作开始，逐步向上执行，最后得到排序后的结果。 </p><h3 id="执行计划（run）"><a href="#执行计划（run）" class="headerlink" title="执行计划（run）"></a>执行计划（run）</h3><blockquote><p>portal-&gt;run(portalStmt, ql_manager.get(), &amp;txn_id, context);</p></blockquote><p>执行计划也有了，下一步就是按照计划调用执行方法，操作数据库了</p><p>run的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历算子树并执行算子生成执行结果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">(std::shared_ptr&lt;PortalStmt&gt; portal, QlManager* ql, <span class="type">txn_id_t</span> *txn_id, Context *context)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(portal-&gt;tag) &#123;</span><br><span class="line">        <span class="keyword">case</span> PORTAL_ONE_SELECT:</span><br><span class="line">        &#123;</span><br><span class="line">            ql-&gt;<span class="built_in">select_from</span>(std::<span class="built_in">move</span>(portal-&gt;root), std::<span class="built_in">move</span>(portal-&gt;sel_cols), context);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> PORTAL_DML_WITHOUT_SELECT:</span><br><span class="line">        &#123;</span><br><span class="line">            ql-&gt;<span class="built_in">run_dml</span>(std::<span class="built_in">move</span>(portal-&gt;root));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> PORTAL_MULTI_QUERY:</span><br><span class="line">        &#123;</span><br><span class="line">            ql-&gt;<span class="built_in">run_mutli_query</span>(portal-&gt;plan, context);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> PORTAL_CMD_UTILITY:</span><br><span class="line">        &#123;</span><br><span class="line">            ql-&gt;<span class="built_in">run_cmd_utility</span>(portal-&gt;plan, txn_id, context);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">InternalError</span>(<span class="string">&quot;Unexpected field type&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>sql –&gt; parser解析生成抽象语法树 –&gt; analyzer分析器生成query执行计划 –&gt; optimizer优化查询计划 –&gt; run执行查询计划</p><p>以上是一般数据库内核执行一条sql的大体流程。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库内核开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库内核开发 </tag>
            
            <tag> 手搓数据库系列 </tag>
            
            <tag> 数据库大赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库内核开发-存储模块</title>
      <link href="/2023/07/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91-%E5%AD%98%E5%82%A8%E6%A8%A1%E5%9D%97/"/>
      <url>/2023/07/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91-%E5%AD%98%E5%82%A8%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库内核开发-存储模块"><a href="#数据库内核开发-存储模块" class="headerlink" title="数据库内核开发-存储模块"></a>数据库内核开发-存储模块</h1><h2 id="相关目录结构"><a href="#相关目录结构" class="headerlink" title="相关目录结构"></a>相关目录结构</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202307290147743.png" alt="image-20230729014711696"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202307291746977.png" alt="image-20230729174614930"></p><p>disk_manager： 主要用于数据库和磁盘文件之间交流，操作存储在磁盘中的数据</p><p>buffer_pool_manager: 主要用于操作数据库缓冲池</p><p>rm_file_handle：主要用于对记录的增删改查</p><p>他们中封装了很多对数据进行基本操作的方法</p><h2 id="数据的存储原理"><a href="#数据的存储原理" class="headerlink" title="数据的存储原理"></a>数据的存储原理</h2><p>一张最基本的数据库表，它包含两部分，第一部分是表头(元数据)，它存储字段信息，第二部分是数据</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>xiaoming</td></tr><tr><td>2</td><td>xiaohong</td></tr></tbody></table><p>(第一行为表头，2，3行为数据)</p><p>像这样的，数据库中的每一行，在数据库系统中是以二进制形式作为一条<strong>记录</strong>进行存储的，而数据库对磁盘进行操作时并不是以记录为单位，如果每操作一次数据就要回磁盘中操作记录，这样做的效率是极低的，所以数据库中引入了另一种关系模型<strong>页</strong>，以页为单位管理记录。</p><p>因为任何涉及到磁盘的读写的操作，其效率是远不如直接在内存中进行运算的，所以我们要想提高效率，就必须要减少磁盘读写的次数，除了上述说的以页为单位操作数据，在数据库中一般还存在<strong>缓冲池</strong>（bufferpool）,他可以将一次磁盘读取的多个页暂时存储在内存中，每个页占据缓冲池的一块空间，这块空间称为<strong>帧</strong>，这样便能大大减少磁盘操作的次数，将大量内存与磁盘之间的数据操作转为内存与内存之间进行操作，在内存中被修改的数据所在的页将被标识为<strong>脏页</strong>，之后只要对脏页统一写回磁盘，数据就能实现更新。</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202307291645118.png" alt="存储原理"></p><h2 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h2><h3 id="记录："><a href="#记录：" class="headerlink" title="记录："></a>记录：</h3><h4 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h4><p>记录⽂件相关的数据结构，每⼀个数据库中的表可以分为表的元数据和表的记录数据，表的元数据统⼀存 储在.meta文件中，表的记录数据单独存储在同名⽂件中，我们称该⽂件为记录⽂件，在RMDB中， 我们⽤RmFileHandle类来对⼀个记录⽂件进⾏管理，RmFileHandle类中记录了⽂件描述符和⽂件头信息，数据结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 每个RmFileHandle对应一个表的数据文件，里面有多个page，每个page的数据封装在RmPageHandle中 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RmFileHandle</span> &#123;      </span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">RmScan</span>;    </span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">RmManager</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    DiskManager *disk_manager_; </span><br><span class="line">    BufferPoolManager *buffer_pool_manager_;</span><br><span class="line">    <span class="type">int</span> fd_;        <span class="comment">// 打开文件后产生的文件句柄</span></span><br><span class="line">    RmFileHdr file_hdr_;    <span class="comment">// 文件头，维护当前表文件的元数据</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RmFileHdr的数据结构：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">RmFileHdr</span> &#123;</span><br><span class="line"> <span class="type">int</span> record_size; <span class="comment">// 元组⼤⼩（⻓度不固定，由上层进⾏初始化）</span></span><br><span class="line"> <span class="type">int</span> num_pages; <span class="comment">// ⽂件中当前分配的page个数（初始化为1）</span></span><br><span class="line"> <span class="type">int</span> num_records_per_page; <span class="comment">// 每个page最多能存储的元组个数</span></span><br><span class="line"> <span class="type">int</span> first_free_page_no; <span class="comment">// ⽂件中当前第⼀个可⽤的page no（初始化为-1）</span></span><br><span class="line"> <span class="type">int</span> bitmap_size; <span class="comment">// bitmap⼤⼩</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>file_hdr中的num_pages记录此⽂件分配的page个数，page_no范围为[0,file_hdr.num_pages)，page_no从0开始 增加，其中第0⻚存file_hdr，从第1页开始存放真正的记录数据。</p><p>RmPageHandle的数据结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">RmPageHandle</span> &#123;</span><br><span class="line"> <span class="type">const</span> RmFileHdr *file_hdr; <span class="comment">// ⽤到了file_hdr的bitmap_size, record_size</span></span><br><span class="line"> Page *page; <span class="comment">// 指向单个page</span></span><br><span class="line"> RmPageHdr *page_hdr; <span class="comment">// page-&gt;data的第⼀部分，指针指向⾸地址，⻓度为sizeof(RmPageHdr)</span></span><br><span class="line"> <span class="type">char</span> *bitmap; <span class="comment">// page-&gt;data的第⼆部分，指针指向⾸地址，⻓度为file_hdr-&gt;bitmap_size</span></span><br><span class="line"> <span class="type">char</span> *slots; <span class="comment">// page-&gt;data的第三部分，指针指向⾸地址，每个slot的⻓度为file_hdr-&gt;record_size</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于具体的每⼀个记录，使⽤RmRecord来进⾏管理，数据结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">RmRecord</span> &#123;</span><br><span class="line"> <span class="type">char</span> *data; <span class="comment">// 保存记录的二进制数据，data初始化分配size个字节的空间</span></span><br><span class="line"> <span class="type">int</span> size; <span class="comment">// size = RmFileHdr的record_size</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同时，使⽤Rid来对每⼀个记录进⾏唯⼀的标识，数据结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Rid</span> &#123;</span><br><span class="line"> <span class="type">int</span> page_no; <span class="comment">// 该记录所在的数据⻚的page_no</span></span><br><span class="line"> <span class="type">int</span> slot_no; <span class="comment">// 该记录所在数据⻚中的具体slot_no</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="关系解读："><a href="#关系解读：" class="headerlink" title="关系解读："></a>关系解读：</h4><p>- RmFileHandle：这是一个文件句柄类，它维护了一个打开的表文件的信息。它包含一个DiskManager对象和一个BufferPoolManager对象，这两个对象分别用于管理磁盘和缓冲池。它还包含一个文件描述符fd_，用于标识打开的文件。此外，它还包含一个RmFileHdr对象，用于存储文件头信息。</p><p>- RmFileHdr：这是一个文件头结构，它存储了表文件的元数据，如记录大小、页面数量、每页的记录数量、第一个包含空闲空间的页面号和每页的bitmap大小。</p><p>- RmPageHandle：这是一个页面句柄结构，它包含了一个页面的所有信息。它包含一个RmFileHdr对象的指针，指向当前页面所在文件的文件头。它还包含一个Page对象的指针，指向页面的实际数据。此外，它还包含一个RmPageHdr对象的指针，指向页面的页头信息。最后，它还包含两个字符指针，分别指向页面的bitmap和记录槽。</p><p>- RmPageHdr：这是一个页面头结构，它存储了每个页面的元数据，如下一个包含空闲空间的页面号和当前页面中的记录数量。</p><p>- RmRecord：这是一个记录结构，它包含了一条记录的数据和大小。</p><p>- PageId：这是一个页面ID结构，它包含了一个文件描述符和一个页面号，用于唯一标识一个页面。</p><h3 id="表的元数据存储"><a href="#表的元数据存储" class="headerlink" title="表的元数据存储"></a>表的元数据存储</h3><h4 id="数据结构：-1"><a href="#数据结构：-1" class="headerlink" title="数据结构："></a>数据结构：</h4><p>表的元数据主要通过TabMeta数据结构来进⾏管理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TabMeta</span> &#123;</span><br><span class="line"> std::string name; <span class="comment">// 表名称</span></span><br><span class="line"> std::vector&lt;ColMeta&gt; cols; <span class="comment">// 表包含的字段</span></span><br><span class="line"> std::vector&lt;IndexMeta&gt; indexes; <span class="comment">// 表上建⽴的索引</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于每个字段，运用ColMeta数据结构进行管理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ColMeta</span> &#123;</span><br><span class="line"> std::string tab_name; <span class="comment">// 表名称</span></span><br><span class="line"> std::string name; <span class="comment">// 字段名称</span></span><br><span class="line"> ColType type; <span class="comment">// 字段类型</span></span><br><span class="line"> <span class="type">int</span> len; <span class="comment">// 字段⻓度</span></span><br><span class="line"> <span class="type">int</span> offset; <span class="comment">// 字段所在记录中的偏移量，⽤于查询字段的具体存储位置</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于索引结构，通过IndexMeta数据结构来进⾏管理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">IndexMeta</span> &#123;</span><br><span class="line"> std::string tab_name; <span class="comment">// 索引所属表名称</span></span><br><span class="line"> <span class="type">int</span> col_tot_len; <span class="comment">// 索引字段⻓度总和</span></span><br><span class="line"> <span class="type">int</span> col_num; <span class="comment">// 索引字段数量</span></span><br><span class="line"> std::vector&lt;ColMeta&gt; cols; <span class="comment">// 索引包含的字段</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="关系解读：-1"><a href="#关系解读：-1" class="headerlink" title="关系解读："></a>关系解读：</h4><p>TabMeta是表的封装，包括表名，字段名，表上的索引。</p><p>ColMeta是字段的封装，包括字段所在的表名，字段名，字段类型，字段长度，字段所在记录中的偏移量。关于<strong>偏移量</strong>（offset），根据之前说的记录的定义，每一条记录即是表的一行，一行可能存在多个字段，所以要依靠偏移量来定位字段在记录中的位置。</p><p>IndexMeta是对索引的封装，包括索引的基本信息。</p><h2 id="操作方法和部分实现思路"><a href="#操作方法和部分实现思路" class="headerlink" title="操作方法和部分实现思路"></a>操作方法和部分实现思路</h2><h3 id="磁盘管理器（diskmanager）"><a href="#磁盘管理器（diskmanager）" class="headerlink" title="磁盘管理器（diskmanager）:"></a>磁盘管理器（diskmanager）:</h3><p>主要是对磁盘文件开启关闭，写入读入。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页操作</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 将数据写入文件的指定磁盘页面中</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; fd 磁盘文件的文件句柄</span></span><br><span class="line"><span class="comment"> * @param &#123;page_id_t&#125; page_no 写入目标页面的page_id</span></span><br><span class="line"><span class="comment"> * @param &#123;char&#125; *offset 要写入磁盘的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; num_bytes 要写入磁盘的数据大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">write_page</span><span class="params">(<span class="type">int</span> fd, <span class="type">page_id_t</span> page_no, <span class="type">const</span> <span class="type">char</span> *offset, <span class="type">int</span> num_bytes)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 读取文件中指定编号的页面中的部分数据到内存中</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; fd 磁盘文件的文件句柄</span></span><br><span class="line"><span class="comment"> * @param &#123;page_id_t&#125; page_no 指定的页面编号</span></span><br><span class="line"><span class="comment"> * @param &#123;char&#125; *offset 读取的内容写入到offset中</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; num_bytes 读取的数据量大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read_page</span><span class="params">(<span class="type">int</span> fd, <span class="type">page_id_t</span> page_no, <span class="type">char</span> *offset, <span class="type">int</span> num_bytes)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*目录操作*/</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">is_dir</span><span class="params">(<span class="type">const</span> std::string &amp;path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">create_dir</span><span class="params">(<span class="type">const</span> std::string &amp;path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">destroy_dir</span><span class="params">(<span class="type">const</span> std::string &amp;path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*文件操作*/</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">is_file</span><span class="params">(<span class="type">const</span> std::string &amp;path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">create_file</span><span class="params">(<span class="type">const</span> std::string &amp;path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">destroy_file</span><span class="params">(<span class="type">const</span> std::string &amp;path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">open_file</span><span class="params">(<span class="type">const</span> std::string &amp;path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">close_file</span><span class="params">(<span class="type">int</span> fd)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_file_size</span><span class="params">(<span class="type">const</span> std::string &amp;file_name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">get_file_name</span><span class="params">(<span class="type">int</span> fd)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_file_fd</span><span class="params">(<span class="type">const</span> std::string &amp;file_name)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 文件打开列表，用于记录文件是否被打开</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//path2fd_:通过文件路径查找其文件句柄。用于检查文件是否已打开,并获取其句柄。</span></span><br><span class="line">    <span class="comment">//fd2path_:通过文件描述符查找其文件路径。用于通过文件句柄获取对应的文件路径。</span></span><br><span class="line"></span><br><span class="line">    std::unordered_map&lt;std::string, <span class="type">int</span>&gt; path2fd_;  <span class="comment">//&lt;Page文件磁盘路径,Page fd&gt;哈希表</span></span><br><span class="line">    std::unordered_map&lt;<span class="type">int</span>, std::string&gt; fd2path_;  <span class="comment">//&lt;Page fd,Page文件磁盘路径&gt;哈希表</span></span><br></pre></td></tr></table></figure><p>write_page &amp; read_page分别为读页和写页，这两个函数的实现思路是一样的，因为涉及到在文件的某一位置读或者写，所以要先定位，可以直接使用c++自带的io库中的lseek方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lseek</span>(fd,page_no * PAGE_SIZE,SEEK_SET); <span class="comment">//定位到第page_no个文件的文件头，SEEK_SET = 0</span></span><br></pre></td></tr></table></figure><p>读写同样调用自带write，read方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> bw = <span class="built_in">write</span>(fd,offset,num_bytes);</span><br><span class="line"><span class="type">ssize_t</span> br = <span class="built_in">read</span>(fd,offset,num_bytes);</span><br></pre></td></tr></table></figure><p>目录操作和文件操作都是基本的io操作，不做详解了。</p><blockquote><p> &#x2F;&#x2F; 文件打开列表，用于记录文件是否被打开</p><p>std::unordered_map&lt;std::string, int&gt; path2fd_;  &#x2F;&#x2F;&lt;Page文件磁盘路径,Page fd&gt;哈希表<br>std::unordered_map&lt;int, std::string&gt; fd2path_;  &#x2F;&#x2F;&lt;Page fd,Page文件磁盘路径&gt;哈希表</p></blockquote><p>文件打开列表是两个map类型，记录了当前系统下被打开的文件，即使用中的文件，可以利用它防止重复打开，关闭或删除正在使用中的文件，同时我们在打开和关闭文件时都要注意更新文件打开列表。</p><h3 id="缓冲池管理器（buffer-pool-manager）："><a href="#缓冲池管理器（buffer-pool-manager）：" class="headerlink" title="缓冲池管理器（buffer_pool_manager）："></a>缓冲池管理器（buffer_pool_manager）：</h3><p>缓冲池管理器主要是对系统的缓冲池进行管理，包括给页分配空闲帧，对缓冲池更新，将缓冲池中的脏页写回，其中缓冲池的更新需要实现专门的更新算法，比较重要。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @description: 将目标页面标记为脏页</span></span><br><span class="line"><span class="comment">  * @param &#123;Page*&#125; page 脏页</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">mark_dirty</span><span class="params">(Page* page)</span> </span>&#123; page-&gt;is_dirty_ = <span class="literal">true</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"> <span class="function">Page* <span class="title">fetch_page</span><span class="params">(PageId page_id)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">bool</span> <span class="title">unpin_page</span><span class="params">(PageId page_id, <span class="type">bool</span> is_dirty)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">bool</span> <span class="title">flush_page</span><span class="params">(PageId page_id)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function">Page* <span class="title">new_page</span><span class="params">(PageId* page_id)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">bool</span> <span class="title">delete_page</span><span class="params">(PageId page_id)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">flush_all_pages</span><span class="params">(<span class="type">int</span> fd)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">delete_pages_index</span><span class="params">(<span class="type">int</span> fd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"> <span class="function"><span class="type">bool</span> <span class="title">find_victim_page</span><span class="params">(<span class="type">frame_id_t</span>* frame_id)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">update_page</span><span class="params">(Page* page, PageId new_page_id, <span class="type">frame_id_t</span> new_frame_id)</span></span>;</span><br></pre></td></tr></table></figure><p>find_victim_page:</p><blockquote><p> * @description: 从free_list或replacer中得到可淘汰帧页的 *frame_id</p><p> * @return {bool} true: 可替换帧查找成功 , false: 可替换帧查找失败</p><p> * @param {frame_id_t*} frame_id 帧页id指针,返回成功找到的可替换帧id</p></blockquote><p>从空闲帧链表中获取帧id，并return true，同时如果没有空闲帧则需要调用淘汰算法进行淘汰</p><p>update_page:</p><blockquote><p> * @description: 更新页面数据, 如果为脏页则需写入磁盘，再更新为新页面，更新page元数据(data, is_dirty, page_id)和page table</p><p> * @param {Page*} page 写回页指针</p><p> * @param {PageId} new_page_id 新的page_id</p><p> * @param {frame_id_t} new_frame_id 新的帧frame_id</p></blockquote><p>更新缓冲池中的页到磁盘，如果页面未被修改（非脏页），则直接更新该页的数据给新页，删除旧帧号和页面号之间的映射，将新页号和帧号映射，如果是脏页，还需要提前写回磁盘：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BufferPoolManager::update_page</span><span class="params">(Page *page, PageId new_page_id, <span class="type">frame_id_t</span> new_frame_id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1 如果是脏页，写回磁盘，并且把dirty置为false</span></span><br><span class="line">    <span class="keyword">if</span> (page-&gt;<span class="built_in">is_dirty</span>()) &#123;</span><br><span class="line">        disk_manager_-&gt;<span class="built_in">write_page</span>(page-&gt;<span class="built_in">get_page_id</span>().fd, page-&gt;<span class="built_in">get_page_id</span>().page_no, page-&gt;<span class="built_in">get_data</span>(), PAGE_SIZE);</span><br><span class="line">        page-&gt;is_dirty_ = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2 更新page table</span></span><br><span class="line">    page_table_.<span class="built_in">erase</span>(page-&gt;<span class="built_in">get_page_id</span>());</span><br><span class="line">    page_table_[new_page_id] = new_frame_id;</span><br><span class="line">    <span class="comment">// 3 重置page的data，更新page id</span></span><br><span class="line">    page-&gt;<span class="built_in">reset_memory</span>();</span><br><span class="line">    page-&gt;id_ = new_page_id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fetch_page:</p><blockquote><ul><li>@description: 从buffer pool获取需要的页。</li><li><pre><code>         如果页表中存在page_id（说明该page在缓冲池中），并且pin_count++。</code></pre></li><li><pre><code>         如果页表不存在page_id（说明该page在磁盘中），则找缓冲池victim page，将其替换为磁盘中读取的page，pin_count置1。</code></pre></li><li>@return {Page*} 若获得了需要的页则将其返回，否则返回nullptr</li><li>@param {PageId} page_id 需要获取的页的PageId</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Page* <span class="title">BufferPoolManager::fetch_page</span><span class="params">(PageId page_id)</span> </span>&#123;</span><br><span class="line">    latch_.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="type">frame_id_t</span> frame_id;</span><br><span class="line">    <span class="comment">// 1.     从page_table_中搜寻目标页</span></span><br><span class="line">    <span class="comment">// 1.1    若目标页有被page_table_记录，则将其所在frame固定(pin)，并返回目标页。</span></span><br><span class="line">    <span class="keyword">if</span> (page_table_.<span class="built_in">find</span>(page_id) != page_table_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        frame_id = page_table_.<span class="built_in">at</span>(page_id);</span><br><span class="line">        Page* page = &amp;pages_[frame_id];</span><br><span class="line">        <span class="keyword">if</span> (++page-&gt;pin_count_ == <span class="number">1</span>) &#123;</span><br><span class="line">            replacer_-&gt;<span class="built_in">pin</span>(frame_id);</span><br><span class="line">        &#125;</span><br><span class="line">        latch_.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 1.2    否则，尝试调用find_victim_page获得一个可用的frame，若失败则返回nullptr</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">find_victim_page</span>(&amp;frame_id)) &#123;</span><br><span class="line">        latch_.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Page* page = &amp;pages_[frame_id];</span><br><span class="line">    <span class="comment">// 2.     若获得的可用frame存储的为dirty page，则须调用updata_page将page写回到磁盘</span></span><br><span class="line">    <span class="built_in">update_page</span>(page, page_id, frame_id);</span><br><span class="line">    <span class="comment">// 3.     调用disk_manager_的read_page读取目标页到frame</span></span><br><span class="line">    disk_manager_-&gt;<span class="built_in">read_page</span>(page_id.fd, page_id.page_no, page-&gt;<span class="built_in">get_data</span>(), PAGE_SIZE);</span><br><span class="line">    <span class="comment">// 4.     固定目标页，更新pin_count_</span></span><br><span class="line">    <span class="keyword">if</span> (++page-&gt;pin_count_ == <span class="number">1</span>) &#123;</span><br><span class="line">        replacer_-&gt;<span class="built_in">pin</span>(frame_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.     返回目标页</span></span><br><span class="line">    latch_.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flush_page：</p><blockquote><p> * @description: 将目标页写回磁盘，不考虑当前页面是否正在被使用</p><p> * @return {bool} 成功则返回true，否则返回false(只有page_table_中没有目标页时)</p><p> * @param {PageId} page_id 目标页的page_id，不能为INVALID_PAGE_ID</p></blockquote><p>delete_page：</p><blockquote><p> * @description: 从buffer_pool删除目标页</p><p> * @return {bool} 如果目标页不存在于buffer_pool或者成功被删除则返回true，若其存在于buffer_pool但无法删除则返回false</p><p> * @param {PageId} page_id 目标页</p></blockquote><p>flush_all_pages：</p><blockquote><p> * @description: 将buffer_pool中的所有页写回到磁盘</p><p> * @param {int} fd 文件句柄</p></blockquote><h3 id="记录操作-rm-file-handle"><a href="#记录操作-rm-file-handle" class="headerlink" title="记录操作(rm_file_handle):"></a>记录操作(rm_file_handle):</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 判断指定位置上是否已经存在一条记录，通过Bitmap来判断 */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_record</span><span class="params">(<span class="type">const</span> Rid &amp;rid)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    RmPageHandle page_handle = <span class="built_in">fetch_page_handle</span>(rid.page_no);</span><br><span class="line">    <span class="keyword">return</span> Bitmap::<span class="built_in">is_set</span>(page_handle.bitmap, rid.slot_no);  <span class="comment">// page的slot_no位置上是否有record</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::unique_ptr&lt;RmRecord&gt; <span class="title">get_record</span><span class="params">(<span class="type">const</span> Rid &amp;rid, Context *context)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Rid <span class="title">insert_record</span><span class="params">(<span class="type">char</span> *buf, Context *context)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_record</span><span class="params">(<span class="type">const</span> Rid &amp;rid, <span class="type">char</span> *buf)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_record</span><span class="params">(<span class="type">const</span> Rid &amp;rid, Context *context)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_record</span><span class="params">(<span class="type">const</span> Rid &amp;rid, <span class="type">char</span> *buf, Context *context)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>get_record:</p><ul><li>@description: 获取当前表中记录号为rid的记录</li><li>@param {Rid&amp;} rid 记录号，指定记录的位置</li><li>@param {Context*} context</li><li>@return {unique_ptr<RmRecord>} rid对应的记录对象指针</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::unique_ptr&lt;RmRecord&gt; <span class="title">RmFileHandle::get_record</span><span class="params">(<span class="type">const</span> Rid&amp; rid, Context* context)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取指定记录所在的page handle</span></span><br><span class="line">    <span class="comment">// 2. 初始化一个指向RmRecord的指针（赋值其内部的data和size）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    <span class="keyword">if</span>(context!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        context-&gt;lock_mgr_-&gt;<span class="built_in">lock_shared_on_record</span>(context-&gt;txn_,rid,fd_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 6/29 补充可能出现的异常抛出</span></span><br><span class="line">    <span class="keyword">if</span>(rid.page_no &gt; handle.file_hdr-&gt;num_pages || rid.slot_no &gt; handle.file_hdr-&gt;num_records_per_page)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">RecordNotFoundError</span>(rid.page_no,rid.slot_no);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (!Bitmap::<span class="built_in">is_set</span>(handle.bitmap, rid.slot_no)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">RecordNotFoundError</span>(rid.page_no, rid.slot_no);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以上</span></span><br><span class="line">    RmPageHandle  handle = <span class="built_in">fetch_page_handle</span>(rid.page_no);</span><br><span class="line">    <span class="function">std::unique_ptr&lt;RmRecord&gt; <span class="title">record</span><span class="params">(<span class="keyword">new</span> RmRecord())</span></span>;</span><br><span class="line">    record-&gt;size = file_hdr_.record_size;</span><br><span class="line">    record-&gt;data = handle.<span class="built_in">get_slot</span>(rid.slot_no);</span><br><span class="line"></span><br><span class="line">    buffer_pool_manager_-&gt;<span class="built_in">unpin_page</span>(handle.page-&gt;<span class="built_in">get_page_id</span>(),<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> record;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LRU替换器-lru-replacer"><a href="#LRU替换器-lru-replacer" class="headerlink" title="LRU替换器(lru_replacer):"></a>LRU替换器(lru_replacer):</h3><p>因为缓冲中只是在内存开辟出的一小块空间，用于快速访问，它本身大小肯定要远小于磁盘储存大小，所以缓冲池中不可能永远存在你想要的页面，如果出现要用的页面在缓冲池中不存在的情况，那就需要缓冲池替换策略来替换掉近期用的最少的页面，这样整个缓冲池就动态起来了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUReplacer</span> : <span class="keyword">public</span> Replacer &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @description: 创建一个新的LRUReplacer</span></span><br><span class="line"><span class="comment">     * @param &#123;size_t&#125; num_pages LRUReplacer最多需要存储的page数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">LRUReplacer</span><span class="params">(<span class="type">size_t</span> num_pages)</span></span>;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">LRUReplacer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">victim</span><span class="params">(<span class="type">frame_id_t</span> *frame_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pin</span><span class="params">(<span class="type">frame_id_t</span> frame_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unpin</span><span class="params">(<span class="type">frame_id_t</span> frame_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">Size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">   <span class="comment">// LRUhash_ :页面id和页面在LRUlist_中的位置 LRUlist_：头最近访问，尾长时间未访问</span></span><br><span class="line">    std::mutex latch_;                  <span class="comment">// 互斥锁</span></span><br><span class="line">    std::list&lt;<span class="type">frame_id_t</span>&gt; LRUlist_;     <span class="comment">// 按加入的时间顺序存放unpinned pages的frame id，首部表示最近被访问</span></span><br><span class="line">    std::unordered_map&lt;<span class="type">frame_id_t</span>, std::list&lt;<span class="type">frame_id_t</span>&gt;::iterator&gt; LRUhash_;   <span class="comment">// frame_id_t -&gt;unpinned pages的frame id</span></span><br><span class="line">    <span class="type">size_t</span> max_size_;   <span class="comment">// 最大容量（与缓冲池的容量相同）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>victim:</p><blockquote><p> * @description: 使用LRU策略删除一个victim frame，并返回该frame的id</p><p> * @param {frame_id_t*} frame_id 被移除的frame的id，如果没有frame被移除返回nullptr</p><p> * @return {bool} 如果成功淘汰了一个页面则返回true，否则返回false</p></blockquote><p>对于pin和unpin，他们的主要作用是固定住某一页面，这些页面往往是正在使用的，如果该页面处于pin状态，则不会被淘汰，unpin就是解除该状态。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>DiskManager，BufferPoolManager和RMFileHandle是实现存储管理的关键组件，他们之间的关系和调用流程如下：</p><ol><li><p>DiskManager：负责管理磁盘存储，包括读写磁盘上的页面，创建和删除磁盘文件等。</p></li><li><p>BufferPoolManager：负责管理内存中的缓冲池，包括从磁盘中读取页面到缓冲池，将缓冲池中的页面写回磁盘，页面的替换策略等。</p></li><li><p>RMFileHandle：负责管理一个特定的关系，包括读写该关系的记录，插入和删除记录等。</p></li></ol><p>一个页面从磁盘中取出到使用的流程如下：</p><ol><li><p>当需要访问一个页面时，首先在BufferPoolManager的缓冲池中查找该页面。</p></li><li><p>如果在缓冲池中找到了该页面，就直接使用该页面。</p></li><li><p>如果在缓冲池中没有找到该页面，就需要从磁盘中读取该页面。BufferPoolManager会调用DiskManager的read_page方法，将该页面从磁盘读取到缓冲池中。</p></li><li><p>如果缓冲池已满，需要选择一个页面进行替换。BufferPoolManager会根据其页面替换策略，选择一个页面，如果该页面被修改过，就调用DiskManager的write_page方法，将该页面写回磁盘，然后将新的页面读取到这个位置。</p></li><li><p>RMFileHandle通过BufferPoolManager获取到页面后，就可以对该页面进行操作，例如读取记录，修改记录等。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库内核开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库内核开发 </tag>
            
            <tag> 手搓数据库系列 </tag>
            
            <tag> 数据库大赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>verilog入门学习</title>
      <link href="/2023/06/16/verilog%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/06/16/verilog%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="驴——verilog入门笔记"><a href="#驴——verilog入门笔记" class="headerlink" title="驴——verilog入门笔记"></a>驴——verilog入门笔记</h1><blockquote><p>部分截图来自b站</p></blockquote><h2 id="1模块结构"><a href="#1模块结构" class="headerlink" title="1模块结构"></a>1模块结构</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306161001803.png" alt="屏幕截图(4)"></p><blockquote><p>记住这个结构，学习verilog的前提是先看懂</p></blockquote><p>举例</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Full_adder(</span><br><span class="line">    <span class="keyword">output</span> Fi,</span><br><span class="line">    <span class="keyword">output</span> Cout,</span><br><span class="line"> <span class="keyword">input</span> Ai,</span><br><span class="line">    <span class="keyword">input</span> Bi,</span><br><span class="line">    <span class="keyword">input</span> Cin </span><br><span class="line">    );</span><br><span class="line"><span class="keyword">assign</span> &#123;Cout,Fi&#125;=Ai+Bi+Cin;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306161011439.png" alt="屏幕截图(5)"></p><h2 id="2assign赋值语句"><a href="#2assign赋值语句" class="headerlink" title="2assign赋值语句"></a>2assign赋值语句</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306161036736.png" alt="屏幕截图(6)"></p><h2 id="3always语句"><a href="#3always语句" class="headerlink" title="3always语句"></a>3always语句</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306161709025.png" alt="image-20230616170908710"></p><blockquote><p>类似于If，后面的条件满足时才执行下面的语句</p><p>always后的条件有两种：边沿敏感，电平敏感</p></blockquote><p>写法：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306161712349.png" alt="image-20230616171228130"></p><blockquote><p>另外如果always后有多条赋值语句，则需要用begin end围起来</p></blockquote><p>例如</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> @(a,b,cin)</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line">     s...</span><br><span class="line">     count...</span><br><span class="line"> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="4模块调用"><a href="#4模块调用" class="headerlink" title="4模块调用"></a>4模块调用</h2><blockquote><p>在其他模块里调用已经写好的模块，类似于方法调用，需要对象名和方法参数</p></blockquote><p>举例</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//已存在方法A(CLK,I,O)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用A</span></span><br><span class="line">A a1(<span class="variable">.CLK</span>(clk),<span class="variable">.I</span>(i),<span class="variable">.O</span>(o))<span class="comment">//这样写参数比较规范</span></span><br><span class="line">A a2(clk,i,o)<span class="comment">//这样也行，按顺序</span></span><br></pre></td></tr></table></figure><h2 id="5门原语调用"><a href="#5门原语调用" class="headerlink" title="5门原语调用"></a>5门原语调用</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306161747958.png" alt="image-20230616174731732"></p><blockquote><p>输出在前，输入在后</p></blockquote><h1 id="6If语句"><a href="#6If语句" class="headerlink" title="6If语句"></a>6If语句</h1><blockquote><p>if +（条件）+ 执行语句 ；</p><p>else</p></blockquote><h2 id="7case语句"><a href="#7case语句" class="headerlink" title="7case语句"></a>7case语句</h2><blockquote><p>case（表达式）</p><p>取值1：语句1；</p><p>取值2：语句2；</p><p>…</p><p>default： 默认；</p><p>endcase</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库内核开发</title>
      <link href="/2023/06/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91/"/>
      <url>/2023/06/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库内核开发"><a href="#数据库内核开发" class="headerlink" title="数据库内核开发"></a>数据库内核开发</h1><h2 id="数据库基本架构"><a href="#数据库基本架构" class="headerlink" title="数据库基本架构"></a>数据库基本架构</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306151747696.png" alt="屏幕截图 2023-06-15 173746"></p><h2 id="关系数据库结构"><a href="#关系数据库结构" class="headerlink" title="关系数据库结构"></a>关系数据库结构</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306151748578.png" alt="屏幕截图(1)"></p><h2 id="Buffer-POOL缓存机制"><a href="#Buffer-POOL缓存机制" class="headerlink" title="Buffer POOL缓存机制"></a>Buffer POOL缓存机制</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306202054690.png" alt="屏幕截图(8)"></p><p>因为我们的数据库中的数据是放在磁盘里的，但我们每次读取都去读磁盘，显然这样效率就大寄特寄了，所以类似于cup与主存之间，我们也需要一个缓冲区来加快读写速率。</p><h2 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+Tree"></a>B+Tree</h2><blockquote><p>1.叶结点大小和存储单元大小一致，能起到预读数据效果</p><p>2.叶节点有链接关系，可以遍历</p><p>3.只有叶结点放数据</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306221905892.png" alt="屏幕截图 2023-06-22 185507"></p><p>B+tree搜索过程：</p><p>比如搜索29，在磁盘块1中可以看出，29在p2所指区域</p><p>在p2区域，可以看出29小于36在p1区域</p><p>最后找到磁盘块7，搜索到29</p><p>B+树的删除过程</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306230119096.png" alt="屏幕截图(14)"></p><p>删除7</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306230122781.png" alt="屏幕截图(16)"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306230123531.png" alt="屏幕截图(17)"></p><p>删除11</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306230123390.png" alt="屏幕截图(18)"></p><p>B+树插入过程</p><p>插入40</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306230123645.png" alt="屏幕截图(15)"></p><h2 id="LSM-Tree架构"><a href="#LSM-Tree架构" class="headerlink" title="LSM-Tree架构"></a>LSM-Tree架构</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306222256466.png" alt="屏幕截图(9)"></p><blockquote><p>用户输入的数据会先存放在memorytable中，当memorytable中的数据达到一定阈值，memorytable就会变成一个Frozen~(只读)，然后生成一个新的memorytable,把Forzen写入磁盘</p></blockquote><h2 id="Compaction"><a href="#Compaction" class="headerlink" title="Compaction"></a>Compaction</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306222305784.png" alt="屏幕截图(10)"></p><blockquote><p>Compaction操作是将多个SSTable合成一个，能提高查询效率，但提高了能耗</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306222306198.png" alt="屏幕截图(11)"></p><blockquote><p>Compaction三个概念：1.对写放大2.空间放大3.读放大</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306222317586.png" alt="屏幕截图(12)"></p><p>比较常用的策略</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306222319045.png" alt="屏幕截图(13)"></p><blockquote><p>三种策略对比</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2023/05/31/MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/05/31/MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-amp-JavaWebの驴"><a href="#MySQL-amp-JavaWebの驴" class="headerlink" title="MySQL&amp;JavaWebの驴"></a>MySQL&amp;JavaWebの驴</h1><h2 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312200700.png" alt="屏幕截图 2023-03-06 203314"></p><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><blockquote><p>DDL:针对数据库和表的增删改</p><p>DML：对单个表的数据进行增删改</p><p>DQL：查询表中数据</p><p>DCL：对数据库进行权限控制</p></blockquote><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE db1(##创建表</span><br><span class="line">id int,##注意名在前，变量类型在后</span><br><span class="line">name varchar(10),</span><br><span class="line">age int,</span><br><span class="line">birth DATE);</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM db1;</span><br><span class="line">##SELECT `name` FROM db1;也可以单独查询一列</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE db1;</span><br><span class="line">##因为无法确定要删除的表是否存在，所以有更规范的写法：</span><br><span class="line">DROP TABLE if EXISTS db1；</span><br></pre></td></tr></table></figure><h3 id="表，列操作"><a href="#表，列操作" class="headerlink" title="表，列操作"></a>表，列操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE db1 RENAME TO stu;##表重命名</span><br><span class="line">ALTER TABLE stu ADD gender char(1);##添加列</span><br><span class="line">ALTER TABLE stu CHANGE gender sex char(1);##改列名</span><br><span class="line">ALTER TABLE stu DROP sex;##删除列</span><br></pre></td></tr></table></figure><h3 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu;</span><br></pre></td></tr></table></figure><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT into stu VALUES(1,&#x27;林峰&#x27;,20,&#x27;2002-12-17&#x27;);##全添加不用标</span><br><span class="line">INSERT INTO stu(id,name,age) VALUES (1,&#x27;小明&#x27;,20);##指明添加位置</span><br></pre></td></tr></table></figure><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE stu set birth = &#x27;1999-10-15&#x27; WHERE name = &#x27;小明&#x27;;</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from db1 where name = &#x27;小明&#x27;;</span><br></pre></td></tr></table></figure><h2 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h2><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--基础查询</span><br><span class="line">SELECT name FROM stu;</span><br></pre></td></tr></table></figure><h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--去重</span><br><span class="line">SELECT DISTINCT name FROM stu;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312201120.png" alt="屏幕截图 2023-03-07 195316"></p><h3 id="输出结果时起别名"><a href="#输出结果时起别名" class="headerlink" title="输出结果时起别名"></a>输出结果时起别名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--别名，as可省略</span><br><span class="line">SELECT id,name,age as 年龄,birth 生日 FROM stu;</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>条件：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312202759.png" alt="屏幕截图 2023-03-07 200024-1678190500305"></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--输出年龄大于等于20的人</span><br><span class="line">SELECT name FROM stu where age &gt;= 20;</span><br></pre></td></tr></table></figure><h3 id="x3D-x3D-模糊查询-x3D-x3D"><a href="#x3D-x3D-模糊查询-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;模糊查询&#x3D;&#x3D;"></a>&#x3D;&#x3D;模糊查询&#x3D;&#x3D;</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--模糊查询</span><br><span class="line">--_:代表任意一个字符</span><br><span class="line">--%:代表任意多个字符</span><br><span class="line">SELECT * FROM stu WHERE name like &#x27;%小%&#x27;;</span><br></pre></td></tr></table></figure><h3 id="排序查找"><a href="#排序查找" class="headerlink" title="排序查找"></a>排序查找</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--排序查找</span><br><span class="line">SELECT * FROM stu ORDER BY age ASC;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312203834.png" alt="屏幕截图 2023-03-07 201909"></p><h3 id="聚合函数和查找"><a href="#聚合函数和查找" class="headerlink" title="聚合函数和查找"></a>聚合函数和查找</h3><p>聚合函数：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312204496.png" alt="屏幕截图 2023-03-07 203958"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--统计数量,最好是用 *</span><br><span class="line">SELECT count(*) FROM stu;</span><br><span class="line">--最大值</span><br><span class="line">SELECT max(age) FROM stu;</span><br><span class="line">--最小值</span><br><span class="line">SELECT min(age) FROM stu;</span><br><span class="line">--平均值</span><br><span class="line">SELECT avg(age) FROM stu;</span><br><span class="line">--总和</span><br><span class="line">SELECT sum(age) FROM stu;</span><br></pre></td></tr></table></figure><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312205772.png" alt="屏幕截图 2023-03-07 205749"></p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><blockquote><p>格式：select 字段列表 from 表名 LIMIT 起始索引 ，查询条目数</p><p>计算公式：起始索引 &#x3D; （当前页码-1）* 每页条目数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu LIMIT 3,3;</span><br></pre></td></tr></table></figure><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312206756.png" alt="69337116782767212.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">##建表时：</span><br><span class="line">create table db1(</span><br><span class="line">    id int 约束名称</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line">##建表后</span><br><span class="line">alter table db1 modify</span><br></pre></td></tr></table></figure><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##创建表时</span><br><span class="line">constraint 键名 foreign key(作为从键的列)</span><br><span class="line">##创建表后</span><br><span class="line">alter table emp add constraint 键名 foreign key(作为从键的列)  referances 主键</span><br></pre></td></tr></table></figure><h3 id="内外链接"><a href="#内外链接" class="headerlink" title="内外链接"></a>内外链接</h3><p>隐式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 要查询的东西 from 表1，表2... where 条件</span><br></pre></td></tr></table></figure><p>显式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 要查询的东西 from  表1 join 表2 on 条件</span><br></pre></td></tr></table></figure><blockquote><p>内连接相当于几个表的交集</p></blockquote><p>外连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">左/右：</span><br><span class="line">select 字段 from 表1 left/right join 表2 on 条件</span><br></pre></td></tr></table></figure><blockquote><p>外连接相当于表1或表2全部加交集</p></blockquote><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312206866.png" alt="9A1C63D3EC824C450120034C619A175A"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305312207013.png" alt="屏幕截图 2023-03-09 175024"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot实战——瑞吉外卖</title>
      <link href="/2023/05/20/SpringBoot%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/"/>
      <url>/2023/05/20/SpringBoot%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot实战——瑞吉外卖"><a href="#SpringBoot实战——瑞吉外卖" class="headerlink" title="SpringBoot实战——瑞吉外卖"></a>SpringBoot实战——瑞吉外卖</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305212218088.png" alt="屏幕截图 2023-05-21 221758"></p><h3 id="数据库创建："><a href="#数据库创建：" class="headerlink" title="数据库创建："></a>数据库创建：</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305212036703.png" alt="屏幕截图 2023-05-21 203358"></p><blockquote><p>表功能：</p><p>address_book：地址表</p><p>category：菜品和套餐表</p><p>dish: 菜品表</p><p>dish_flavor: 菜品口味关系表</p><p>employee: 员工表</p><p>order_detail: 订单明细</p><p>orders：订单表</p><p>setmeal：套餐表</p><p>setmeal_dish：套餐菜品关系表</p><p>shopping_cart：购物车</p><p>user：用户表</p></blockquote><h3 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3><p>不必多言</p><h3 id="pom配置："><a href="#pom配置：" class="headerlink" title="pom配置："></a>pom配置：</h3><p>这里其实版本号不一定是我的这个，各位可以自行在maven里导入适合自己的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    springboot组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.Lf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reggie_take_out<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    jdk版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web组件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MP--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Lombook--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库连接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line"><span class="comment">#    应用名称，不是必须</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">reggie_take_out</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line"><span class="comment">#      数据库连接信息</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#你自己的数据库链接信息，别写我的</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure><h3 id="创建启动类："><a href="#创建启动类：" class="headerlink" title="创建启动类："></a>创建启动类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lf.reggie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReggieApplication.class,args);</span><br><span class="line">        log.info(<span class="string">&quot;原神，启动！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导入静态页面："><a href="#导入静态页面：" class="headerlink" title="导入静态页面："></a>导入静态页面：</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305212312778.png" alt="image-20230521231237689"></p><blockquote><p>本次实战不要求前端页面编写，所以直接导入，资料来源与黑马程序员</p></blockquote><h2 id="功能开发"><a href="#功能开发" class="headerlink" title="功能开发"></a>功能开发</h2><h3 id="登录功能："><a href="#登录功能：" class="headerlink" title="登录功能："></a>登录功能：</h3><p>登录页面：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305212321998.png" alt="image-20230521232141953"></p><blockquote><p>前端发送数据 -&gt; controller接收 -&gt; 调用service -&gt;Mapper -&gt; 数据库</p></blockquote><p>流程还是老样子，不了解的可以看本网站springboot入门笔记</p><h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lf.reggie.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">//员工实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.lf.reggie.domain.Employee;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Employee&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.lf.reggie.domain.Employee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Employee&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service实现类"><a href="#service实现类" class="headerlink" title="service实现类"></a>service实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.lf.reggie.domain.Employee;</span><br><span class="line"><span class="keyword">import</span> com.lf.reggie.mapper.EmployeeMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;EmployeeMapper, Employee&gt; <span class="keyword">implements</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通用返回类型R"><a href="#通用返回类型R" class="headerlink" title="通用返回类型R"></a>通用返回类型R</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用返回类型，</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//快速返回一个成功R对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//快速返回一个错误R对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="登录功能controller"><a href="#登录功能controller" class="headerlink" title="登录功能controller"></a>登录功能controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lf.reggie.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//登录controller</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="comment">//因为前端发过来是Json数据，所以需要加 @RequestBody接收数据</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Params</span>: [request, employee]</span></span><br><span class="line"><span class="comment">         * request 之后用来获取session</span></span><br><span class="line"><span class="comment">         * employee 前端传入的账号密码</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Return</span> com.lf.reggie.domain.R&lt;com.lf.reggie.domain.Employee&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        1.前端提交的passowrd进行加密处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line"><span class="comment">//        2.根据用户名查询数据库</span></span><br><span class="line"><span class="comment">//        首先需要创建条件构造器，详情见SpringBoot学习笔记（一），条件查询</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//        构造条件,列名 + 值</span></span><br><span class="line">        queryWrapper.eq(Employee::getUsername, employee.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3.如果值为空，说明用户名不存在</span></span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        4.值不为空，则比对密码</span></span><br><span class="line">        <span class="keyword">if</span> (!emp.getPassword().equals(password)) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        5.判断用户是否被禁用</span></span><br><span class="line">        <span class="keyword">if</span> (emp.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;该用户已被禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        6.上面都通过了，说明可以登录,把emp对象放入session，方便其他调用</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;employee&quot;</span>, emp.getId());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="comment">//员工退出</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [request]</span></span><br><span class="line"><span class="comment">         * request 用于获取sesssion</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> com.lf.reggie.domain.R&lt;java.lang.String&gt;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">//        从session里面移除之前存的登录信息</span></span><br><span class="line">        request.removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="员工操作"><a href="#员工操作" class="headerlink" title="员工操作"></a>员工操作</h2><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><blockquote><p>过滤器是为了防止用户不登录而是通过网页url直接访问页面，有安全风险</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lf.reggie.filter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 过滤器，检查是否登录</span></span><br><span class="line"><span class="comment"> * 关于过滤器详情请见本网站学习笔记</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    路径匹配器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1.获取访问url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        System.out.println(<span class="string">&quot;访问路径&quot;</span> + requestURI);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2.设置放行路径,其中的路径不需要处理</span></span><br><span class="line">        String[] urls = &#123;<span class="string">&quot;/employee/login&quot;</span>, <span class="string">&quot;/employee/logout&quot;</span>, <span class="string">&quot;/backend/**&quot;</span>, <span class="string">&quot;/front/**&quot;</span>,<span class="string">&quot;/favicon.ico&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//        3.判断是否放行</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> checkUrl(urls, requestURI);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (b) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        4.判断用户是否登录</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">employee</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"><span class="comment">//        5.成功则放行</span></span><br><span class="line">        <span class="keyword">if</span> (employee != <span class="literal">null</span>) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//        6.用户未登录，给前端返回错误信息           </span></span><br><span class="line">       </span><br><span class="line">            response.getWriter().write((JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>))));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">checkUrl</span><span class="params">(String[] urls, String requestUrl)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Params</span>: [urls, requestUrl]</span></span><br><span class="line"><span class="comment">         * urls:放行路径</span></span><br><span class="line"><span class="comment">         * requestUrl： 请求路径</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Return</span> boolean</span></span><br><span class="line"><span class="comment">         * 判断是否放行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (String url :</span><br><span class="line">                urls) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestUrl);</span><br><span class="line">            <span class="keyword">if</span> (match) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加员工操作"><a href="#添加员工操作" class="headerlink" title="添加员工操作"></a>添加员工操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="comment">//    新增员工代码</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [request, employee]</span></span><br><span class="line"><span class="comment">         * request 获取session得到操作人信息，</span></span><br><span class="line"><span class="comment">         * employee 前端传的员工信息</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> com.lf.reggie.domain.R&lt;java.lang.String&gt;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        log.info(<span class="string">&quot;新增员工信息&#123;&#125;&quot;</span>,employee);</span><br><span class="line"><span class="comment">//        md5加密密码，初始密码为123456</span></span><br><span class="line">        employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//       给我们新增的信息加点料： 创建时间，更新时间，创建人，更新人</span></span><br><span class="line">        employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> (Long) session.getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">        employee.setCreateUser(id);</span><br><span class="line">        employee.setUpdateUser(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        调用方法保存数据库</span></span><br><span class="line">        employeeService.save(employee);</span><br><span class="line"><span class="comment">//        System.out.println(employee);</span></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增员工成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>关于controller的访问url你得看前端html页面访问的url，根据它写我们后端的@Post&#x2F;Getmapping </p><h3 id="全局异常捕获"><a href="#全局异常捕获" class="headerlink" title="全局异常捕获"></a>全局异常捕获</h3><p>当我们重复添加员工信息，数据库就会给我们报错，因为我们的username字段是唯一的</p><p>这种情况我们可以选择利用try - catch结构来捕获异常，但这样我们要在每一个可能抛出异常的代码上写一遍，未免太过麻烦，我们就可以选择全局异常捕获</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 全局异常捕获</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//这个异常捕获类可以捕获加了哪些注解的异常</span></span><br><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        捕获异常后的异常处理方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line">        <span class="keyword">if</span>(ex.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;员工已存在，添加失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分页查询操作"><a href="#分页查询操作" class="headerlink" title="分页查询操作"></a>分页查询操作</h3><p>要想实现分页查询，首先需要创建一个MP配置类，用来配置分页查询拦截器，具体实现如下，在我之前的学习笔记中也有相关介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * MP配置分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拦截器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//配置分页拦截器</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//    分页查询</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        分页构造器：</span></span><br><span class="line">        <span class="type">Page</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(page, pageSize);</span><br><span class="line"><span class="comment">//        条件构造器：</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//        加条件：</span></span><br><span class="line">        queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);</span><br><span class="line"><span class="comment">//        排序条件：</span></span><br><span class="line">        queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        调用service执行查询,自动封装到pageInfo</span></span><br><span class="line">        employeeService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305262243130.png" alt="屏幕截图 2023-05-26 224332"></p><h3 id="用户禁用启用"><a href="#用户禁用启用" class="headerlink" title="用户禁用启用"></a>用户禁用启用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    修改员工信息</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">updata</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">empID</span> <span class="operator">=</span> (Long)session.getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"><span class="comment">//        更新时间，和操作人</span></span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        employee.setUpdateUser(empID);</span><br><span class="line"><span class="comment">//        调用service</span></span><br><span class="line">        employeeService.updateById(employee);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样写会有点小问题，因为我们修改是按照前端传来的id来定位对哪一行修改的，但是前端传来的id如果本身太长，会造成失真，也就是id会显示不正确，不正确的id自然也不能正确找到要修改的数据，所以如果只写上面的controller是不够的，还需要配置新的json转换器</p><p>转换器（JacksonObjectMapper）代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lf.reggie.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们需要设置配置类，将我们自定义的数据转换器加到mvc默认的数据转换器集合中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lf.reggie.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lf.reggie.common.JacksonObjectMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: 扩展消息转换器</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      创建消息转换器对象</span></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">mjhmc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//      设置对象转换器，把我们自定义好的转换器传进去</span></span><br><span class="line">        mjhmc.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line"><span class="comment">//       将设置好的对象转换器加入到我们mvc框架的转换器集合中</span></span><br><span class="line">        converters.add(<span class="number">0</span>,mjhmc);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样才算大功告成</p><blockquote><p>注意，这里你如果跟着课程走，他的配置类可能是继承了 WebMvcConfigurationSupport 这个类，然后你可能出现404错误，因为WebMvcConfigurationSupport存在时会自动无效化mvc的默认静态资源路径（我用的是implements WebMvcConfigurer 不覆盖默认），但实际上只要你把静态路径放到&#x2F;resources&#x2F;static下，这里是默认静态访问路径，根本就不需要自己用WebMvcConfigurationSupport配置，我不太理解为什么课程要自己配置，多了很多麻烦</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305291955089.png" alt="屏幕截图 2023-05-29 195515"></p><h3 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Long updateUser;</span><br></pre></td></tr></table></figure><p>在我们的employee实体类上，可以看到有这么几条属性，上面的注解@TableField(fill &#x3D; FieldFill.INSERT)&amp;</p><p>@TableField(fill &#x3D; FieldFill.INSERT_UPDATE) 是MP包为我们提供的可以对公共字段插入或更新时，统一进行操作，而不用我们单独设置每个对象的公共属性，例如更新时间，我们可以利用这个注解在进行数据库更新时，自动为更新后的数据加入更新时间</p><p>写我们自定义的字段补全类，实现接口：implements MetaObjectHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 自定义元对象数据处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjecthandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        System.out.println(BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里注意，我们在写controller时可以利用request获得session进而获得共享的数据，但在普通java类中没法这么操作，但我们可以利用线程共享，且数据只能在同一线程中使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 线程内共享数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    设置数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    取数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Long <span class="title function_">getCurrentId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再在filter中加入已登录用户的id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        5.成功则放行</span></span><br><span class="line">        <span class="keyword">if</span> (employee != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//            将用户登录id存入线程</span></span><br><span class="line">            BaseContext.setCurrentId(employee);</span><br><span class="line">            filterChain.doFilter(request, response);</span><br></pre></td></tr></table></figure><p>成功，现在我们不需要手动设置时间，操作人等，他会自动设置</p><h2 id="菜品操作"><a href="#菜品操作" class="headerlink" title="菜品操作"></a>菜品操作</h2><h3 id="实体类-amp-mapper-amp-服务接口-amp-接口实现"><a href="#实体类-amp-mapper-amp-服务接口-amp-接口实现" class="headerlink" title="实体类&amp;mapper&amp;服务接口&amp;接口实现"></a>实体类&amp;mapper&amp;服务接口&amp;接口实现</h3><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//类型 1 菜品分类 2 套餐分类</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    新增分类</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;category:&#123;&#125;&quot;</span>,category);</span><br><span class="line"></span><br><span class="line">        categoryService.save(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305302256590.png" alt="image-20230530225627454"></p><p>成功</p><h3 id="分页操作"><a href="#分页操作" class="headerlink" title="分页操作"></a>分页操作</h3><p>可以类比着之前的写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//    分页查询</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line"></span><br><span class="line">        Page&lt;Category&gt; p = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line"><span class="comment">//        条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Category&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        lambdaQueryWrapper.orderByDesc(Category::getSort);</span><br><span class="line">        categoryService.page(p,lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(p);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305302253744.png" alt="image-20230530225337619"></p><p>完成</p><h3 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h3><blockquote><p>这个删除肯定不能直接remove这么简单了，按照业务需求，如果该分类下有东西，那我们就不能直接将其删除，所以在删除之前，我们应该查询该分类下有没有菜品（套餐）</p></blockquote><p>service自定义删除方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line"><span class="comment">//    按分类查询</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetMealService setMealService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Params</span>: [id]</span></span><br><span class="line"><span class="comment"> * 查询传进来的id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment"> * 自定义一个查询，因为业务要求我们如果删除项和其他项有关联，就不能删除</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//      查询条件：看是否有关联菜品</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        dishLambdaQueryWrapper.eq(Dish::getCategoryId,id);</span><br><span class="line"><span class="comment">//      如果数量大于0则说明有关联</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(count1 &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//            抛异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;删除失败，分类包含菜品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        查询条件，看是否关联套餐</span></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId,id);</span><br><span class="line"><span class="comment">//      数量大于0说明有关联</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> setMealService.count(setmealLambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(count2 &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//            抛异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;删除失败，分类包含套餐&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//     如果分类下为空，则正常删除</span></span><br><span class="line">        <span class="built_in">super</span>.removeById(id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>自定义删除异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 自定义删除异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还需要用到我们之前为了捕获用户重复加入写的全局异常捕捉（加一个新的捕捉方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    捕获关联删除异常</span></span><br><span class="line"><span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException ex)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        捕获异常后的异常处理方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    log.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305302253203.png" alt="屏幕截图 2023-05-30 225252"></p><p>完成</p><h3 id="修改分类"><a href="#修改分类" class="headerlink" title="修改分类"></a>修改分类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    修改分类信息</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [category]</span></span><br><span class="line"><span class="comment">         * 前端传入的分类信息，包括id</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> com.lf.reggie.domain.R&lt;java.lang.String&gt;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        log.info(<span class="string">&quot;修改分类信息：&#123;&#125;&quot;</span>,category);</span><br><span class="line"></span><br><span class="line">        categoryService.updateById(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;修改分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个比较简单，不做太多说明</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306012214880.png" alt="image-20230601221451747"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306012215791.png" alt="image-20230601221513715"></p><p>OK</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>文件上传的后端处理其实在springboot中得到了极大简化，只需要用到MultipartFile</p><p>具体代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line"><span class="comment">//       此处接收到的file是临时文件，需要将其转存</span></span><br><span class="line">        log.info(file.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        利用UUID重新生成文件名,防止文件名重复</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            上传的文件转存</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basepath + filename));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            R.error(<span class="string">&quot;上传失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(filename);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>配置文件中的基础路径：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reggie:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\java\reggie_take_out\src\main\img\</span></span><br></pre></td></tr></table></figure><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202306012322871.png" alt="image-20230601232242744"></p><h3 id="文件下载（上传回显）"><a href="#文件下载（上传回显）" class="headerlink" title="文件下载（上传回显）"></a>文件下载（上传回显）</h3><p>实现了文件上传功能后，一般还会追加一个上传回显功能，能够让用户直接看到自己上传的图片出现在上传框内，还能让其他用户也看到上传的图片。</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [name, response]</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment">         * 文件下载</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            输入流，获取图片</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basepath + name));</span><br><span class="line"><span class="comment">//            输出流，回显图片</span></span><br><span class="line">            <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">            response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((len = fileInputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//                回显</span></span><br><span class="line">                outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            outputStream.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里传入的name其实是我们上传后返回给页面的文件名，然后利用fileInputStream将文件下载到本地并回显，最后关闭流。</p><h3 id="新增菜品-1"><a href="#新增菜品-1" class="headerlink" title="新增菜品"></a>新增菜品</h3><p>由于新增菜品涉及到对两张表（菜品，口味）进行修改，因此我们常规的菜品和口味实体类无法同时封装新增的菜品信息，因此我们需要用的一个数据传输对象（dto）来支持前端到后端的数据传输，类似于这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这个整合了dish和dishflavor两个类的数据传输对象，我们能够将前端传入的数据完全封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Params</span>: [dishDto]</span></span><br><span class="line"><span class="comment">      * 新的dto，可以封装菜品信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span> com.lf.reggie.domain.R&lt;java.lang.String&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     log.info(dishDto.toString());</span><br><span class="line">     dishService.saveWithFlavor(dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>记得加@RequestBody</p></blockquote><p>然后我们需要新增一条新的业务方法，能够支持同时修改dish和flavor两张表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    这里涉及了多张表，需要添加事务</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>: 实现同时添加菜品和口味</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [dishDto]</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">//        保存菜品</span></span><br><span class="line">        <span class="built_in">this</span>.save(dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> dishDto.getId();</span><br><span class="line"></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line"><span class="comment">//      添加菜品id</span></span><br><span class="line">        <span class="keyword">for</span> (DishFlavor item:flavors</span><br><span class="line">             ) &#123;</span><br><span class="line">            item.setDishId(id);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        保存口味</span></span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="补充PO、VO、DAO、BO、DTO、POJO解释"><a href="#补充PO、VO、DAO、BO、DTO、POJO解释" class="headerlink" title="补充PO、VO、DAO、BO、DTO、POJO解释"></a>补充PO、VO、DAO、BO、DTO、POJO解释</h3><h4 id="PO"><a href="#PO" class="headerlink" title="PO"></a>PO</h4><p>PO是“Persistent Object”的缩写，意为“持久化对象”。它通常用于表示数据库中的一条记录，即一组相关的数据。PO是由ORM（对象关系映射）框架生成或手动创建的Java对象，它们通常具有与数据库中的表相同的字段和数据类型。在Java开发中，PO常常被用作DAO（数据访问对象）层的数据模型，以及和数据库交互的对象。PO对象中的字段与数据库中的列相对应，每一行数据对应一个PO对象，PO对象中的字段值就是对应列的值。</p><h4 id="VO"><a href="#VO" class="headerlink" title="VO"></a>VO</h4><p>VO是“Value Object”的缩写，意为“值对象”。VO通常用于表示程序中的某个值或者一组相关的值，例如用户的姓名、年龄、地址等等。VO通常是一个不可变对象，也就是说，它的值在创建之后就不能再修改。在Java开发中，VO对象通常用于在不同层之间传递数据，例如在Controller层和Service层之间传递数据。VO对象和PO对象类似，但是它们的作用不同。VO通常是从PO对象中提取出来的一部分数据，用于展示和传递给前端界面。</p><h4 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h4><p>DAO是“Data Access Object”的缩写，意为“数据访问对象”。DAO层是整个应用程序中与数据库交互的核心部分。DAO层负责将数据库中的数据转换成Java对象，并将Java对象的数据保存到数据库中。DAO层的主要作用是隔离上层业务逻辑和下层数据访问细节。在Java开发中，通常使用Hibernate等ORM框架来实现DAO层。DAO层的主要任务是实现数据的增删改查等基本操作，同时提供一些高级查询功能。</p><h4 id="BO"><a href="#BO" class="headerlink" title="BO"></a>BO</h4><p>BO是“Business Object”的缩写，意为“业务对象”。BO通常用于表示某个业务逻辑的实体或者模型。BO通常包含一些业务逻辑和方法，例如计算某些值、验证数据、调用其他服务等等。在Java开发中，BO对象通常由Service层或者Facade层来创建，并且它们通常包含一些业务逻辑的实现，以及对数据的操作。BO通常是针对具体的业务场景而设计的，它们是具有业务含义的实体。</p><h4 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h4><p>DTO是“Data Transfer Object”的缩写，意为“数据传输对象”。DTO通常用于在不同层之间传输数据，例如在Controller层和Service层之间传输数据。DTO对象通常包含一些简单的数据结构，例如字符串、整数、布尔值等等。在Java开发中，DTO对象通常由Controller层或者Service层来创建，并且它们通常是不可变的。</p><h4 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h4><p>POJO是“Plain Old Java Object”的缩写，意为“简单的Java对象”。POJO通常指的是一个没有任何限制、继承或实现特定接口的普通Java对象。POJO对象通常是一种轻量级的Java对象，没有任何框架或者注解的依赖。在Java开发中，POJO对象通常用于表示简单的数据模型或者数据传输对象。</p><h3 id="修改菜品"><a href="#修改菜品" class="headerlink" title="修改菜品"></a>修改菜品</h3><p>首先页面信息的修改一定离不开的就是回显数据</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202309142208417.png" alt="image-20230914220847306"></p><p>只有回显数据，才能看到我们即将修改的信息</p><p>回显的实现并不困难，从前端角度来说，只需要在页面加载完毕后自动向后端发送一次请求，调用后端的get方法获得商品数据，然后通过json发回前端进行显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        拦截器</span></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId,id);</span><br><span class="line"></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishFlavorService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        BeanUtils.copyProperties(dish,dishDto);</span><br><span class="line">        dishDto.setFlavors(flavors);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码实现也都是之前学过的内容</p><p>修改的代码也没什么好说的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  更新菜品信息</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishdto)</span> &#123;</span><br><span class="line"><span class="comment">//        更新dish表</span></span><br><span class="line">        dishService.updateById(dishdto);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        删除原先口味表里存在的口味数据</span></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId,dishdto.getId());</span><br><span class="line"></span><br><span class="line">        dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        重新添加口味信息</span></span><br><span class="line">        dishFlavorService.saveBatch(dishdto.getFlavors());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以上方法均新增在service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Dish&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    新增方法，同时保存菜品和口味</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   新增方法，查询菜品信息和口味</span></span><br><span class="line">    <span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    新增方法，更新菜品信息和口味</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishdto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="套餐"><a href="#套餐" class="headerlink" title="套餐"></a>套餐</h2><h3 id="新增套餐"><a href="#新增套餐" class="headerlink" title="新增套餐"></a>新增套餐</h3><p>由于新增套餐设计到多表操作，所以先在接口中定义新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    保存菜品和套餐</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithMeal</span><span class="params">(SetmealDto setmealDto)</span>;</span><br></pre></td></tr></table></figure><p>并在接口实现类中手动实现该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithMeal</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line"><span class="comment">//        保存套餐基本信息</span></span><br><span class="line">        <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line"><span class="comment">//        保存菜品和套餐关系</span></span><br><span class="line">        List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">        <span class="keyword">for</span>(SetmealDish i:setmealDishes)&#123;</span><br><span class="line">            i.setSetmealId(setmealDto.getId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setMealDishService.saveBatch(setmealDishes);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样在controller中直接调用该方法，就能实现新增套餐并将套餐和餐品联系起来。</p><h3 id="分页展示套餐"><a href="#分页展示套餐" class="headerlink" title="分页展示套餐"></a>分页展示套餐</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Params</span>: [page, pageSize] 页码和页大小</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Return</span> com.lf.reggie.domain.R&lt;com.baomidou.mybatisplus.extension.plugins.pagination.Page&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    Page&lt;SetmealDto&gt; dtopage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    lambdaQueryWrapper.like(name != <span class="literal">null</span>,Setmeal::getName,name);</span><br><span class="line">    lambdaQueryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    setMealService.page(pageInfo,lambdaQueryWrapper);</span><br><span class="line">    BeanUtils.copyProperties(pageInfo,dtopage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; pageInfoRecords = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;SetmealDto&gt; records = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Setmeal item :</span><br><span class="line">            pageInfoRecords) &#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">sd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item,sd);</span><br><span class="line"></span><br><span class="line">        sd.setCategoryName( categoryService.getById(item.getCategoryId()).getName());</span><br><span class="line">        records.add(sd);</span><br><span class="line">    &#125;</span><br><span class="line">    dtopage.setRecords(records);</span><br><span class="line">    <span class="keyword">return</span> R.success(dtopage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分页操作我们之前已经进行过很多次了，具体操作不再赘述，但此处有一个细节，因为前端页面要求显示套餐分类，而普通的</p><p>Setmeal类中没有套餐分类属性，所以我们需要setmealdto。</p><p>效果展示：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202310010156613.png" alt="image-20231001015601525"></p>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot入门 </tag>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客</title>
      <link href="/2023/05/08/helloworld/"/>
      <url>/2023/05/08/helloworld/</url>
      
        <content type="html"><![CDATA[<h1 id="没啥好讲的，此间奥秘都在博客里了"><a href="#没啥好讲的，此间奥秘都在博客里了" class="headerlink" title="没啥好讲的，此间奥秘都在博客里了"></a>没啥好讲的，此间奥秘都在博客里了</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>驴のSpringBoot学习笔记</title>
      <link href="/2023/03/30/SpringBoot%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/03/30/SpringBoot%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="驴のSpringBoot学习笔记"><a href="#驴のSpringBoot学习笔记" class="headerlink" title="驴のSpringBoot学习笔记"></a>驴のSpringBoot学习笔记</h1><blockquote><p>部分资料来自于黑马程序员</p></blockquote><h2 id="1-SpringBoot入门"><a href="#1-SpringBoot入门" class="headerlink" title="1.SpringBoot入门"></a>1.SpringBoot入门</h2><h3 id="1-1在idea创建SpringBoot"><a href="#1-1在idea创建SpringBoot" class="headerlink" title="1.1在idea创建SpringBoot"></a>1.1在idea创建SpringBoot</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/image-20211116125259385.png"></p><blockquote><p>如图所示在项目中创建新的模块，模块选择Spring Init ,特别提醒注意自己的SDK版本号（我是jdk8），然后正常的起名字，type选择maven，java版本选择你的版本（我是8）然后next</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/image-20211116125615728.png"></p><p>这里勾选Web，上方的springboot默认就好</p><h3 id="1-2尝试创建一个开发控制器"><a href="#1-2尝试创建一个开发控制器" class="headerlink" title="1.2尝试创建一个开发控制器"></a>1.2尝试创建一个开发控制器</h3><p>创建java文件（SB是springBoot缩写）</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-03-30%20175742.png"></p><p>尝试写一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SB</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3运行"><a href="#1-3运行" class="headerlink" title="1.3运行"></a>1.3运行</h3><h4 id="可能出现的错误："><a href="#可能出现的错误：" class="headerlink" title="可能出现的错误："></a>可能出现的错误：</h4><p>无效的发行版：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021100900.png"></p><p>[^此图来自csdn：<a href="https://blog.csdn.net/booker009/article/details/129648180]">https://blog.csdn.net/booker009/article/details/129648180]</a>: </p><p>意味着你idea中的java版本设置与springboot不一致，需要做两步：</p><p>1.Project Structure Modules&#x2F;Project选择你的项目（以及父级项目，如果有的话）-&gt;选择8（你的jdk版本），如图</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021101792.png"></p><p>2.Setting： 2.查找java compiler-&gt;Target bytecode version</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-03-30%20180532.png"></p><p>再次运行就好了</p><p>另外如果报错说你的8080接口被占用，可以在application.properties中重新配置TomCat端口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入以下代码</span></span><br><span class="line">server.port:你想要的端口号</span><br></pre></td></tr></table></figure><p>成功：</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-03-30%20181438.png"></p><p>然后在浏览器的地址栏里输入：</p><blockquote><p>localhost&#x2F;books</p></blockquote><p>即可访问刚刚编写的控制器</p><h2 id="2-入门案例"><a href="#2-入门案例" class="headerlink" title="2.入门案例"></a>2.入门案例</h2><blockquote><p>注意，此案例是建立在已经学习过javaweb等相关知识的案例</p></blockquote><h3 id="1-创建新模组并初步创建项目相关目录"><a href="#1-创建新模组并初步创建项目相关目录" class="headerlink" title="1.创建新模组并初步创建项目相关目录"></a>1.创建新模组并初步创建项目相关目录</h3><p>如下</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021104075.png" alt="屏幕截图 2023-04-02 110419"></p><blockquote><p>其中：</p><p>config：用于放置一些项目中自己配制的MP配置</p><p>dao：Mapper文件（javaweb知识）</p><p>domain： 实体类</p><p>resources&amp;test：均为自动生成，test中我自建了一个test类用来初步测试代码功能</p></blockquote><h3 id="2-pom-xml手动配置"><a href="#2-pom-xml手动配置" class="headerlink" title="2.pom.xml手动配置"></a>2.pom.xml手动配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--由于mybatis-plus（国人开发，功能强大！）， druid ，lombook在springboot中并没有默认配置，所以需要手动导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jar包功能用到时会讲</p><h3 id="3-application-yml配置"><a href="#3-application-yml配置" class="headerlink" title="3.application.yml配置"></a>3.application.yml配置</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021227711.png" alt="屏幕截图 2023-04-02 122706"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据库链接基本配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///db2</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment">#主要配置链接数据库名还有自增属性</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span>   <span class="comment">#因为MP是根据你的实体类名寻找数据库表，不设置的话名称不一致会找不到</span></span><br><span class="line">      <span class="comment">#例如：数据库表名：tb_stu 实体类：stu 这样就会不识别，可以在这里写 db-config: tb_</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment">#此处设置id为自增，不然会和MP冲突</span></span><br><span class="line"><span class="comment">#开启MP日志</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h3 id="4-domain目录"><a href="#4-domain目录" class="headerlink" title="4.domain目录"></a>4.domain目录</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021110482.png" alt="屏幕截图 2023-04-02 110930"></p><blockquote><p>本案例调用的是本地的账号密码数据库</p><p>实体类用来作为数据库内容的封装，其中的属性名要和数据库的列名一致，不一致可以通过注解单独绑定名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column(name = &quot;release_status&quot;)</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>@Data:来自lombok包，可以自动给导入的类中添加getter，setter等方法，简化开发</p></blockquote><blockquote><p>@TableName:用于指定链接哪个数据库,如果实体类名和数据库表名一致可以不写（存疑）</p></blockquote><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span><span class="comment">//来自lombok  自动为实体类添加getter,setter,toString等方法</span></span><br><span class="line"><span class="meta">@TableName(&quot;users&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-dao目录"><a href="#5-dao目录" class="headerlink" title="5.dao目录"></a>5.dao目录</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021126263.png" alt="屏幕截图 2023-04-02 112646"></p><blockquote><p>该目录中的mapper接口用于实现代码与数据库之间的交互，底层是sql语句的掉调用</p></blockquote><blockquote><p>@Repository: Repository它用于将数据访问层 (DAO 层 ) 的类标识为 Spring Bean,使之能够被扫描</p></blockquote><blockquote><p>@Mapper：用来标识这是Mapper类</p></blockquote><blockquote><p>extends BaseMapper<Users>：BaseMapper来自MP，里面定义了很多现成的方法，可以不用自己写sql语句了（国产就是牛逼）</p><p>&lt;&gt;中放实体类，这样从数据库读到的数据会默认封装成实体类</p></blockquote><h3 id="6-Application自带的启动器"><a href="#6-Application自带的启动器" class="headerlink" title="6.Application自带的启动器"></a>6.Application自带的启动器</h3><blockquote><p>注解：@SpringBootApplication</p></blockquote><h3 id="7-test目录"><a href="#7-test目录" class="headerlink" title="7.test目录"></a>7.test目录</h3><p>系统自带的我先不讲，说一说自己配的（其实都一样，只不过是照着葫芦画瓢）</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021211877.png" alt="屏幕截图 2023-04-02 121048" style="zoom:67%;" /><blockquote><p>@SpringBootTest：用来表示这是springboot测试类，这样才能被扫描到</p></blockquote><blockquote><p>@Autowired：自动导入，如果这地方报错，就说明前面Mapper没加注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br></pre></td></tr></table></figure><blockquote><p>这个userMapper对象可以调用很多数据库操作方法</p></blockquote><blockquote><p>讲一下test的规则，只要加上@Test就说明这是测试方法，测试方法只是单纯测试方法中的代码逻辑和输出是否报错，是否符合我们所期待的输出，所以测试方法是不需要返回值和参数的</p></blockquote><p>额外说一下分页操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getPage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接这样写是不对的,因为MP中的拦截器没有配置</span></span><br><span class="line">        userMapper.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>拦截器在config中配置</p><h3 id="8-config配置"><a href="#8-config配置" class="headerlink" title="8.config配置"></a>8.config配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//用来放MP的某些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//注释成配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//配置Bean才能被扫描到</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//两件事：1.把拦截器配置出来 2.return出去</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();<span class="comment">//拦截器的壳</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们的分页操作就可以用了</p><h3 id="9-关于条件查询操作"><a href="#9-关于条件查询操作" class="headerlink" title="9.关于条件查询操作"></a>9.关于条件查询操作</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304031654519.png"></p><blockquote><p>MP下的条件查询需要配置条件构造器，然后把构造器放在查询语句中，在后台sql语句上会自动加上构造器中的条件</p></blockquote><p>一些构造器条件：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304031656245.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.eq(Employee::getUsername,employee.getUsername());</span><br></pre></td></tr></table></figure><p>两个参数，第一个参数是数据库的列名，第二个参数是查询条件（两个参数合起来，就是sql语句中的where）</p><p><strong>需要特别注意的是</strong>：如果查询条件的值设置为null，则null会被识别为字符串，要避免这种情况发生，需要要在设置查询条件时就加入判断例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lqw1.like(tiaojian != <span class="literal">null</span>,Users::getUsername,tiaojian);</span><br></pre></td></tr></table></figure><p>若为true则拼接条件，false则不拼接</p><h3 id="10-一般开发流程"><a href="#10-一般开发流程" class="headerlink" title="10.一般开发流程"></a>10.一般开发流程</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304031830849.png" alt="屏幕截图 2023-04-03 183026"></p><ol><li>首先编写实体类，方便后面封装</li><li>写实现类（mapper），在javaweb中该类要映射.xml文档来编写sql语句操作数据库，SpringBoot简化了这一过程，可以直接继承现有的类</li><li>写服务端接口，也就是上图的UserService，里面定义了很多业务方法</li><li>写impl接口实现类，实现定义的服务端接口，并实现其中的方法，javaweb中需要获得mapper来调用方法，SpringBoot中同样也需要</li><li>表现层（前端）</li></ol><h3 id="11-MP快速开发"><a href="#11-MP快速开发" class="headerlink" title="11.MP快速开发"></a>11.MP快速开发</h3><blockquote><p>上文中提到的3,4步在MP中得到了简化开发</p></blockquote><p>首先是服务端接口，现在不需要自己手动写一些基础操作的方法（增删改查）</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304031905363.png" alt="屏幕截图 2023-04-03 190530"></p><p>直接继承官方提供的接口类，里面有很多基础的方法，传入泛型为实体类</p><p>其次是接口实现类</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304031906252.png"></p><p>也是继承官方提供的ServiceImpl类，传入的两个泛型，一个是实现类Mapper，另一个是实体类，虽然简化开发了，但是仍然需要mapper（只是把我们一般开发的过程给封装成类，在后台执行，具体流程其实不变）</p><p><strong>注意不要忘了继承接口</strong></p><p>另外MP只是提供了某些基础方法，如果需要自定义或重写，还是得按老流程，现在接口中定义，然后在实现类中实现</p><h3 id="12-完成Controller"><a href="#12-完成Controller" class="headerlink" title="12.完成Controller"></a>12.完成Controller</h3><p>在完成上面的一系列服务端代码并测试完之后，就可以写controller了</p><p>例如：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041711846.png" alt="屏幕截图 2023-04-04 171055"></p><blockquote><p>@RequestMapping()：这里定义的是访问路径，如果要访问你的springboot，则需要在浏览器中输入”<a href="http://localhost/">http://localhost/</a>  + 你在RequestMapping()写的路径”</p></blockquote><p>下面的注解都是spring定义好的，例如GetMapping就是以get方式发送请求，PostMapping是Post请求</p><p>在这里引用一篇知乎文章，我认为讲得很全面，可以给之前没了解过的同学补补课：<a href="https://zhuanlan.zhihu.com/p/137507309">https://zhuanlan.zhihu.com/p/137507309</a></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041717729.png" alt="屏幕截图 2023-04-03 211123"></p><h3 id="13-启动我们的Spring"><a href="#13-启动我们的Spring" class="headerlink" title="13.启动我们的Spring"></a>13.启动我们的Spring</h3><p>springboot项目在创建时自带启动器，就是根目录下的XXXApplication，右键启动它</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-03-30%20181438.png"></p><p>启动成功</p><h3 id="14-利用API接口调试工具来检测我们的代码"><a href="#14-利用API接口调试工具来检测我们的代码" class="headerlink" title="14.利用API接口调试工具来检测我们的代码"></a>14.利用API接口调试工具来检测我们的代码</h3><p>很多老师推荐postman，但这玩意儿收费，我在网上找到了个叫Apifox的网站，可以实现在线调试，我用了一下，感jio还不错（建议使用edge浏览器，他自带插件）<img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041724161.png" alt="屏幕截图 2023-04-04 172359"></p><p>调试窗口，还是比较方便的，具体操作可以到apifox主页，里面有教程。</p><h3 id="15-前后端数据一致性处理（小优化）"><a href="#15-前后端数据一致性处理（小优化）" class="headerlink" title="15.前后端数据一致性处理（小优化）"></a>15.前后端数据一致性处理（小优化）</h3><blockquote><p>我们在完成了上面的所有步骤，并能在调试工具中看到返回值时，就说明我们的开发已经完成一大部分了，但这里有一个小问题，我们后端的返回值类型不一致，例如getAll返回的是list列表，getById返回的是单个实体类，增删改查返回的是boolean，这些返回类型会对前端开发造成一定麻烦，所以我们需要统一返回类型</p></blockquote><p>list：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041731578.png" alt="屏幕截图 2023-04-04 173019"></p><p>boolean：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041731850.png" alt="屏幕截图 2023-04-04 173046"></p><p>实体类：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041731850.png" alt="屏幕截图 2023-04-04 173059"></p><blockquote><p>返回类型很多</p></blockquote><p>统一返回类型：</p><p>新建返回类型的封装类：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041733872.png" alt="屏幕截图 2023-04-04 173344"></p><blockquote><p>flag：后端代码是否正常执行（为了区分是找不到返回null还是出错返回null）</p><p>data：数据内容</p></blockquote><p>把之前写好的controller中的方法，返回值都改成R</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041740430.png" alt="屏幕截图 2023-04-04 174024"></p><p>这样返回的就是统一的R类型了</p><h2 id="！（补充）常用注解-一般我在学习过程中遇到不理解的都会在这里更新-："><a href="#！（补充）常用注解-一般我在学习过程中遇到不理解的都会在这里更新-：" class="headerlink" title="！（补充）常用注解(一般我在学习过程中遇到不理解的都会在这里更新)："></a>！（补充）常用注解(一般我在学习过程中遇到不理解的都会在这里更新)：</h2><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><blockquote><p>这是一个组合注解</p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>@SpringBootConfiguration,这个注解可以标注配置文件，在其中可以声明Bean对象</p><p>@EnableAutoConfiguration 自动配置</p><p>@ComponentScan 组件扫描，通过它能找到注解@Component</p></blockquote><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><blockquote><p>注解控制类，可以在里面写业务方法</p></blockquote><h3 id="Value-“-”"><a href="#Value-“-”" class="headerlink" title="@Value(“${}”)"></a>@Value(“${}”)</h3><blockquote><p>可以获取配置文件里的值</p></blockquote><blockquote><p>另外如果我们想将配置文件里的数据拿出来单独封装成一个类，我们需要用到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;&quot;)</span></span><br></pre></td></tr></table></figure></blockquote><p>这个注解可以从配置文件里取值给类中的属性赋值，prefix这玩意儿后面可以给定一个名称前缀，比如我配置文件中有属性：user.username，user.password…,我想要取值，给我封装类里的属性username，password赋值，我就需要写prefix &#x3D; “user”,这样就可以实现，注意属性名称要一致</p><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><blockquote><p>倘若前端传的数据为json格式，那就再参数前加这个注解</p></blockquote><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h3><p>一般路径中传键值对时，我们是不需要写这条注解的，但如果是路径中直接带值</p><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><blockquote><p>一般写在服务方法上，将方法返回的东西转换为json字符串供前端接受</p></blockquote><h3 id="Mapper"><a href="#Mapper" class="headerlink" title="@Mapper"></a>@Mapper</h3><blockquote><p>放在dao接口上面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Mapper</span>: 告诉Mybatis这是dao接口，创建此接口的代理对象  位置：类的上面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>另外如果将来dao太多，一个一个加@Mapper太累，可以选择在Application上加@MapperScan</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.lf.dao&quot;)</span></span><br><span class="line"><span class="comment">//这样就可以把dao包下的所有的dao扫描进去</span></span><br></pre></td></tr></table></figure><h3 id="Rest风格"><a href="#Rest风格" class="headerlink" title="Rest风格"></a>Rest风格</h3><h4 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping()"></a>@GetMapping()</h4><blockquote><p>获取前端参数，首先需要在GetMapping加占位符，比如@GetMapping(&#x2F;user&#x2F;{id})</p><p>然后就是获取路径中的数据</p><p>假如有如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Interger id)</span></span><br></pre></td></tr></table></figure><p>这样访问路径里的参数就赋值给了方法参数id</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="3-配置文件4级分类"><a href="#3-配置文件4级分类" class="headerlink" title="3.配置文件4级分类"></a>3.配置文件4级分类</h2><blockquote><p>我们开发过程中用的配置文件都是我们程序员方便开发测试的，等开发结束项目经理会有自己的配置，甲方也有别的要求，还有涉及到保密的行业（例如：银行），是不会告诉你配置的，所以boot就提供了配置覆盖的操作，一共有四个等级，高等级的配置可以覆盖低等级的</p></blockquote><p>如图：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304102236486.png" alt="屏幕截图 2023-04-10 222707"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304102236181.png" alt="屏幕截图 2023-04-10 222808"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304102236256.png" alt="屏幕截图 2023-04-10 222527"></p><h2 id="4-多环境开发"><a href="#4-多环境开发" class="headerlink" title="4.多环境开发"></a>4.多环境开发</h2><p>yaml版</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112025532.png" alt="屏幕截图 2023-04-11 202140"></p><p>也可以将多个环境写成文件</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112026772.png" alt="屏幕截图 2023-04-11 202346"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112026765.png" alt="屏幕截图 2023-04-11 202333"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112030977.png" alt="屏幕截图 2023-04-11 203047"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112032784.png" alt="屏幕截图 2023-04-11 203149"></p><p>maven配置boot环境：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112038457.png" alt="屏幕截图 2023-04-11 203846"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112039895.png" alt="屏幕截图 2023-04-11 203914"></p><p>会自动读取maven配置</p><h2 id="5-日志"><a href="#5-日志" class="headerlink" title="5.日志"></a>5.日志</h2><h3 id="1-日志对象创建"><a href="#1-日志对象创建" class="headerlink" title="1.日志对象创建"></a>1.日志对象创建</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112040169.png" alt="屏幕截图 2023-04-11 201956"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112040281.png" alt="屏幕截图 2023-04-11 202045"></p><h3 id="3-lombok简化日志开发"><a href="#3-lombok简化日志开发" class="headerlink" title="3.lombok简化日志开发"></a>3.lombok简化日志开发</h3><p>当我们导入了lombok包后，就不用麻烦在每一个类中都加一个log的声明了。只需要在类上加注释@Slf4j,然后就可以正常使用注释了</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112219768.png" alt="屏幕截图 2023-04-11 221942"></p><h3 id="4-日志输出格式控制"><a href="#4-日志输出格式控制" class="headerlink" title="4.日志输出格式控制"></a>4.日志输出格式控制</h3><p>一条日志：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112223057.png" alt="屏幕截图 2023-04-11 222307"></p><p>解读</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112225446.png" alt="屏幕截图 2023-04-11 222457"></p><blockquote><p>时间：这个不用多讲</p><p>级别：这个日志的级别，也没什么好说的</p><p>PID：进程ID，表示当前操作所处的进程，当多服务同时记录时，方便调试</p><p>所属类：发出日志的类名，长的类名boot会自动简化</p><p>日志信息：自定义</p></blockquote><h3 id="5-日志输出为文件（很常用）"><a href="#5-日志输出为文件（很常用）" class="headerlink" title="5.日志输出为文件（很常用）"></a>5.日志输出为文件（很常用）</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112259741.png" alt="屏幕截图 2023-04-11 225916"></p><h2 id="6-第三方Bean属性绑定"><a href="#6-第三方Bean属性绑定" class="headerlink" title="6.第三方Bean属性绑定"></a>6.第三方Bean属性绑定</h2><h3 id="1-注解"><a href="#1-注解" class="headerlink" title="1.注解"></a>1.注解</h3><blockquote><p>@ConfigurationProperties</p><p>@EnableConfigurationProperties</p></blockquote><p>@EnableConfigurationProperties注解可以将使用@ConfigurationProperties注解的类加入Spring容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(ServerConfig.class)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;第三方bean名&quot;)</span></span><br></pre></td></tr></table></figure><p>需要注意的是@EnableConfigurationProperties有两个功能，一是开启引用类的第三方bean数据绑定，二是将引用类加入Spring容器（和@Component作用相同），所以两者不能共存，切记！</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><blockquote><p>yml文件里int的解析类型支持二进制，八进制，十六进制</p><p>现有一情景：一位同学在yml中配置数据库连接信息时，将password设置为：0127，然后连接数据库时一直报错密码错误（正确密码就是0127），原因是什么</p></blockquote><p>因为yml中对int解析支持八进制，而八进制是以0开头，所以yml中将0127识别为八进制，最终读取的密码为87（0127八进制转十进制），故出错，解决方法其实只要将yml配置文件里的int属性变成字符串，即password: “0127”，即可解决。</p><h2 id="7-测试类测试web（前端）"><a href="#7-测试类测试web（前端）" class="headerlink" title="7.测试类测试web（前端）"></a>7.测试类测试web（前端）</h2><p>1.虚拟一个web环境</p><blockquote><p>测试类注解@SpringBootTest()</p><p>如果直接启动测试类，这样只是启动了一个普通的java类，而不是web类，这样无法做到测试表现层（前端）</p></blockquote><blockquote><p>解决：@SpringBootTest(webEnviroment &#x3D; SpringBootTest.webEnvironment.RANDOM_PORT)</p></blockquote><p>2.开启虚拟MVC调用</p><blockquote><p>@AutoconfigureMockMvc注解，用来开启虚拟MVC</p><p>然后我们需要一个虚拟Mvc对象：</p><p>@Autowired MockMvc mvc;</p><p>然后我们需要创建一个虚拟请求buider：</p><p>MockHttpServletRequestBuilder builder &#x3D; MockRequestBuilders.get&#x2F;put&#x2F;post&#x2F;delete等（”&#x2F;访问路径”）</p><p>用mvc对象调用perform方法，放入我们的builder</p><p>mvc.perform(buider)即可</p></blockquote><h2 id="8-从容器中手动获取对象"><a href="#8-从容器中手动获取对象" class="headerlink" title="8.从容器中手动获取对象"></a>8.从容器中手动获取对象</h2><p>假如现在我们有一个服务类：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304261738177.png" alt="屏幕截图 2023-04-26 173816"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们怎样才能在类中通过手动方法获得该服务类的一个对象，从而调用我们的服务方法</p><p>即利用我们SpringBoot主方法里的run方法，它会返回一个容器对象，之后可以用getBean获得我们需要的对象了</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304261739227.png" alt="屏幕截图 2023-04-26 173947"></p><h2 id="Web："><a href="#Web：" class="headerlink" title="Web："></a>Web：</h2><h2 id="1-拦截器"><a href="#1-拦截器" class="headerlink" title="1.拦截器"></a>1.拦截器</h2><blockquote><p>拦截器是SpringMvc中的一种对象，他可以拦截对后端的请求，可以自定义拦截器</p></blockquote><h3 id="1-自定义拦截器："><a href="#1-自定义拦截器：" class="headerlink" title="1.自定义拦截器："></a>1.自定义拦截器：</h3><blockquote><p>1.创建类实现SpringMVC框架的HandlerInterceptor接口</p></blockquote><p>你可以在拦截器里写验证或者是对数据筛选过滤，此处只做测试，所以就输出了一句话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 这里配置了一个自定义拦截器类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInter</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                             HttpServletResponse response,</span></span><br><span class="line"><span class="params">                             Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [request, response, handler]</span></span><br><span class="line"><span class="comment">         * handler:被拦截的控制器对象</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> boolean</span></span><br><span class="line"><span class="comment">         * true:放行</span></span><br><span class="line"><span class="comment">         * false：截断</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行了拦截器&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.创建配置类，将我们自定义的拦截器注册到容器里</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 这里用来配置拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">//添加拦截器对象，注入容器中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [registry]</span></span><br><span class="line"><span class="comment">         * InterceptorRegistry registry: 这玩意是个注册器，把你自定义的拦截器塞里面就</span></span><br><span class="line"><span class="comment">         * 可以注册了（相当于之前在xml注册，spring简化咯）</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//创建拦截器对象</span></span><br><span class="line">        <span class="type">LoginInter</span> <span class="variable">loginInter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginInter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这种路径一般都指定一个字符串数组，比较方便</span></span><br><span class="line">        <span class="comment">//拦截</span></span><br><span class="line">        String[] path = &#123;<span class="string">&quot;/user/**&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//不拦截</span></span><br><span class="line">        String[] excludepath = &#123;<span class="string">&quot;/user/Login&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//addPathPatterns() 配置拦截路径</span></span><br><span class="line">        <span class="comment">//excludePathPatterns() 配置放行路径</span></span><br><span class="line">        registry.addInterceptor(loginInter)</span><br><span class="line">                .addPathPatterns(path)</span><br><span class="line">                .excludePathPatterns(excludepath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看结果：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304261901992.png" alt="屏幕截图 2023-04-26 190115"></p><p>先访问了user&#x2F;Login</p><p>因为没有拦截这个url，所以直接访问了我们的controller</p><p>然后访问&#x2F;user&#x2F;a</p><p>可以看到，先进入了我们的拦截器，触发了拦截器的输出，只不过拦截器放行了，所以依旧可以正常访问controller</p><h2 id="2-使用Servlet"><a href="#2-使用Servlet" class="headerlink" title="2.使用Servlet"></a>2.使用Servlet</h2><blockquote><p>1.创建Servlet类。继承HttpServlet</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Servlet类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line"></span><br><span class="line">        out.println(<span class="string">&quot;Servlet执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.注册Servlet，放入SpringBoot框架里</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myconfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public ServletRegistrationBean(T servlet, String... urlMappings)</span></span><br><span class="line">    <span class="comment">//第一个参数是 Servlet对象 ，第二个是url地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法，注册Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">servletRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ServletRegistrationBean</span> <span class="variable">bean</span></span><br><span class="line">                <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(<span class="keyword">new</span> <span class="title class_">MyServlet</span>(),<span class="string">&quot;/myservlet&quot;</span>);</span><br><span class="line">        <span class="comment">//        也可以这样设置</span></span><br><span class="line"><span class="comment">//        bean.setServlet();</span></span><br><span class="line"><span class="comment">//        bean.setUrlMappings();</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意一定要加@Bean</p><h2 id="3-Filter过滤器"><a href="#3-Filter过滤器" class="headerlink" title="3.Filter过滤器"></a>3.Filter过滤器</h2><p>Filter是Servlet规范的过滤器，一般用来处理字符编码</p><blockquote><p>1.创建自定义过滤器类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 自定义过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myfilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行过滤器&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.注册Filter对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册Filter拦截器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"></span><br><span class="line">    bean.setFilter(<span class="keyword">new</span> <span class="title class_">Myfilter</span>());</span><br><span class="line">    bean.addUrlPatterns(<span class="string">&quot;/user/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里顺便提一个Filter的最常用应用方式：字符集过滤器</strong>（框架自带）</p><p>作用：解决post请求乱码问题</p><blockquote><p>由于是框架自带的，所以只需要自己注册，将系统自带的过滤器放到注册Bean中</p></blockquote><blockquote><p>1.在容器中注册过滤器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是用自带的过滤器对象</span></span><br><span class="line">    <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定使用的编码方式</span></span><br><span class="line">    filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定req，resp都使用设定的编码</span></span><br><span class="line">    filter.setForceEncoding(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    bean.setFilter(filter);</span><br><span class="line">    bean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.设置过滤器使用编码等</p></blockquote><p>因为这是专用的字符过滤器，所以可以直接设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定使用的编码方式</span></span><br><span class="line">filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定req，resp都使用设定的编码</span></span><br><span class="line">filter.setForceEncoding(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><blockquote><p>3.在配置文件中设置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">  <span class="comment">#    将boot默认配置的过滤器关闭</span></span><br><span class="line">    <span class="attr">encoding:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>其实上面的方法略有脱裤放p之意😆</p><p>既然系统有自带的过滤器，我们可以直接修改默认过滤器的编码，以此来实现我们自己想要的效果</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">encoding:</span></span><br><span class="line">      <span class="attr">charset:</span> <span class="string">utf-8</span></span><br><span class="line"><span class="comment">#      把res，req都配置成我们的编码</span></span><br><span class="line">      <span class="attr">force:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="9-ORM操作数据库（Mysql）"><a href="#9-ORM操作数据库（Mysql）" class="headerlink" title="9.ORM操作数据库（Mysql）"></a>9.ORM操作数据库（Mysql）</h2><p>大体步骤：</p><ol><li>mybatis起步依赖：完成mybatis对象自动配置</li><li>创建实体类（对应数据库属性）</li><li>创建Dao接口，在接口中写方法名</li><li>写Dao接口对应的mapper文件，在mapper中写sql语句操作数据库</li><li>配置pom文件，将mapper.xml包含到类路径中</li><li>创建Service接口和实现类，调用dao方法</li><li>创建Controller，访问service</li><li>写配置类文件，在文件里配置数据库连接信息</li></ol><p>具体实现：</p><ol><li><p>起步依赖：</p><blockquote><p>SpringBoot里整合了mybatis,只需要在创建项目时选择就可以</p></blockquote></li></ol><p>​<img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305072154180.png"/></p><p>2.实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Mapper</span>: 告诉Mybatis这是dao接口，创建此接口的代理对象  位置：类的上面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得加@Mapper，@Mapper在上面专门讲注解的章节里有</p><p>4.mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lf.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lf.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from users</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意dao和mapper的分离，符合规范</strong></p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305072159329.png"/><p>这样需要配置两处地方：</p><p>一是：配置文件中</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="comment">#Mapper文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>二是：在pom文件中设置,把mapper放入资源中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--resource插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.Service接口和实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个没什么好说的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类，@Service用来标识服务类</p><p>7.Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mycontroller</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">AllUser</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userService.getAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        <span class="keyword">return</span> users.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///db2?useSSL=false&amp;useServerPrepStmts=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">*****</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="comment">#Mapper文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment">#日志</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>如果想在控制台看到sql语句，就需要配置日志</p><h2 id="10-事务开启"><a href="#10-事务开启" class="headerlink" title="10.事务开启"></a>10.事务开启</h2><blockquote><p>什么是事务：简单说事务就是把多条语句绑在一起，要执行成功就一起成功，如果其中有一条失败（出错）就会回滚</p></blockquote><p>Springboot中使用事务：</p><p>1）在业务方法上面加@Transactional,加上后就有事务功能了</p><p>2）明确在主启动类上面加@EnableTransactionManager</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot入门 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>驴のSpringBoot学习笔记（二）</title>
      <link href="/2023/03/30/SpringBoot%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/03/30/SpringBoot%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="驴のSpringBoot学习笔记（二）"><a href="#驴のSpringBoot学习笔记（二）" class="headerlink" title="驴のSpringBoot学习笔记（二）"></a>驴のSpringBoot学习笔记（二）</h1><blockquote><p>部分笔记来自于黑马教育</p></blockquote><h1 id="1-NoSQL"><a href="#1-NoSQL" class="headerlink" title="1.NoSQL"></a>1.NoSQL</h1><h2 id="1-1Redis数据库"><a href="#1-1Redis数据库" class="headerlink" title="1.1Redis数据库"></a>1.1Redis数据库</h2><blockquote><p>Redis和MySQL一样，也是一种数据库类型，但和MySQL相比有着一些不同：</p><ol><li>MySQL是关系型数据库，而Redis是非关系型数据库（NoSQL）。</li><li>MySQL用于持久化存储数据到硬盘，功能强大，但是速度缓慢；而Redis用于存储使用较为频繁的数据到缓存中，读取速度快。</li><li>MySQL的数据存放在磁盘中；而Redis的数据存放在内存中。</li></ol></blockquote><p>下载地址：<a href="https://github.com/tporadowski/redis/releases">https://github.com/tporadowski/redis/releases</a> （科学上网）</p><h3 id="1-1-1Redis数据库简单使用"><a href="#1-1-1Redis数据库简单使用" class="headerlink" title="1.1.1Redis数据库简单使用"></a>1.1.1Redis数据库简单使用</h3><p>下载完成后文件目录：</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305092210779.png"/><p>在该目录下启动cmd，并输入  redis-cli.exe ，你会看到这玩意</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305092212119.png"/><p>这里先不要操作，先输入shutdown，再exit</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305092214533.png"/><p>执行完上述操作后，再输入 redis-server.exe redis.windows.conf，就可以运行我们的redis了</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305092216621.png"/><p>再重新打开 redis-cli.exe，尝试一次简单的存取</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305092219511.png"/><p>ok，现在你已经会了redis了👍</p><h2 id="1-2Mongodb数据库"><a href="#1-2Mongodb数据库" class="headerlink" title="1.2Mongodb数据库"></a>1.2Mongodb数据库</h2><blockquote><p>Mongodb是一个开源文档型数据库，是NoSQL数据库产品的一种，是最像关系型数据库的非关系型数据库</p><p>特点：</p><p>临时性存储相结合，且修改频率高（类似于游戏道具，直播间在线人数），应用场景数据变化较快</p></blockquote><h1 id="2-SpringBoot整合Redis"><a href="#2-SpringBoot整合Redis" class="headerlink" title="2.SpringBoot整合Redis"></a>2.SpringBoot整合Redis</h1><h2 id="2-1创建整合Redis的新项目"><a href="#2-1创建整合Redis的新项目" class="headerlink" title="2.1创建整合Redis的新项目"></a>2.1创建整合Redis的新项目</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305092254632.png" alt="屏幕截图 2023-05-09 222955"></p><h2 id="2-2简单编写一个测试类"><a href="#2-2简单编写一个测试类" class="headerlink" title="2.2简单编写一个测试类"></a>2.2简单编写一个测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootRedisDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是redis的操作接口对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate;<span class="comment">//这个玩意儿是面向对象的，但我们在本地cmd执行的是面向字符串，</span></span><br><span class="line">    <span class="comment">//StringRedisTemplate redisTemplate;这玩意就是面向字符串的</span></span><br><span class="line"><span class="comment">//这样就可以保证我们idea和cmd操作一致了</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">ops</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        ops.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">ops</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> ops.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305092257992.png" alt="屏幕截图 2023-05-09 225708"></p><p>成功get到了</p><h1 id="3-常用第三方技术整合"><a href="#3-常用第三方技术整合" class="headerlink" title="3.常用第三方技术整合"></a>3.常用第三方技术整合</h1><h2 id="3-1关于缓存"><a href="#3-1关于缓存" class="headerlink" title="3.1关于缓存"></a>3.1关于缓存</h2><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305101750772.png" alt="屏幕截图 2023-05-10 174952"></p><h2 id="3-2使用缓存"><a href="#3-2使用缓存" class="headerlink" title="3.2使用缓存"></a>3.2使用缓存</h2><p>1.导入缓存依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        缓存--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.启用缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span><span class="comment">//加入这个注解，启用缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.使用缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 在需要缓存的方法上加入注解，将方法得到的数据存入缓存</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Params</span>: </span></span><br><span class="line"><span class="comment"> * value = &quot;cacheSpace&quot; cacheSpace给缓存空间起个名</span></span><br><span class="line"><span class="comment"> * key = &quot;All&quot;  All给缓存的数据起名，方便取（唯一）</span></span><br><span class="line"><span class="comment"> * 另外例如以id取数据，就需要以id命名，方便，这种key就可以这样写key=“#id”</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Return</span> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;cacheSpace&quot;,key = &quot;All&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.getAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3关于缓存的实例：手机验证码模拟"><a href="#3-3关于缓存的实例：手机验证码模拟" class="headerlink" title="3.3关于缓存的实例：手机验证码模拟"></a>3.3关于缓存的实例：手机验证码模拟</h2><p>关于在pom里整合cache，还有启动类的注解在上面讲过了，这里就省略</p><p>包装类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String tele;<span class="comment">//电话</span></span><br><span class="line">    <span class="keyword">private</span> String code;<span class="comment">//验证码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SMSCodeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接受手机号，生成验证码，底层再以手机号为key缓存验证码</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendCodeToSMS</span><span class="params">(String tele)</span>;</span><br><span class="line"><span class="comment">//检查输入验证码和缓存里的验证码是否一致</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkCode</span><span class="params">(SMSCode smsCode)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSCodeServviceImpl</span> <span class="keyword">implements</span> <span class="title class_">SMSCodeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CodeUtil codeUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//电话号码作为key存储缓存</span></span><br><span class="line">    <span class="comment">//CachePut只管向缓存里放，如果缓存里有key相同的，则会覆盖</span></span><br><span class="line">    <span class="comment">//@Cacheable 如果缓存里有，就不会更新了</span></span><br><span class="line">    <span class="meta">@CachePut(value = &quot;smsCode&quot;,key = &quot;#tele&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendCodeToSMS</span><span class="params">(String tele)</span> &#123;</span><br><span class="line">        <span class="comment">//调用工具类，生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">generator</span> <span class="operator">=</span> codeUtil.generator(tele);</span><br><span class="line">        <span class="keyword">return</span> generator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkCode</span><span class="params">(SMSCode smsCode)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tele</span> <span class="operator">=</span> smsCode.getTele();</span><br><span class="line">        <span class="comment">//调用工具类，获取缓存里的验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> codeUtil.get(tele);</span><br><span class="line"><span class="comment">//比较</span></span><br><span class="line">        <span class="keyword">return</span> smsCode.getCode().equals(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] patch = &#123;<span class="string">&quot;000000&quot;</span>, <span class="string">&quot;00000&quot;</span>, <span class="string">&quot;0000&quot;</span>, <span class="string">&quot;000&quot;</span>, <span class="string">&quot;00&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法用来随机生成验证码，不多做解释</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generator</span><span class="params">(String tele)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> tele.hashCode();</span><br><span class="line">        <span class="type">int</span> <span class="variable">encryption</span> <span class="operator">=</span> <span class="number">2023510</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> code ^ encryption;</span><br><span class="line">        <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        result = result ^ now;</span><br><span class="line">        <span class="type">long</span> <span class="variable">pwcode</span> <span class="operator">=</span> result % <span class="number">1000000</span>;</span><br><span class="line">        <span class="comment">//负变正</span></span><br><span class="line">        pwcode = pwcode &lt; <span class="number">0</span> ? -pwcode : pwcode;</span><br><span class="line">        <span class="comment">//验证码补齐</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">codestr</span> <span class="operator">=</span> pwcode + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> codestr.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  patch[length] + codestr;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//该方法用来根据key获取缓存里的验证码</span></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;smsCode&quot;,key = &quot;#tele&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String tele)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>control类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sms&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSCodeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SMSCodeService smsCodeService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">(String tel)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> smsCodeService.sendCodeToSMS(tel);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkCode</span><span class="params">(SMSCode smsCode)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> smsCodeService.checkCode(smsCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果实现：</p><p>启动咱们的apifox，嘿，发送个get请求，嘿：</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305102202711.png"/><p>嘿，咱再发送个post请求，验证验证我们的手机号和验证码</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305102204522.png" alt="屏幕截图 2023-05-10 220322"></p><p>true了😆</p><h1 id="4-Quartz触发器"><a href="#4-Quartz触发器" class="headerlink" title="4.Quartz触发器"></a>4.Quartz触发器</h1><blockquote><p>Quartz是一个触发器框架，主要功能就是配置程序的一个触发器，比如（零点秒杀，就需要一个在零点自动启动的程序）</p></blockquote><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305102258375.png" alt="屏幕截图 2023-05-10 225648"></p><p>步骤：</p><p>1.在pom里整合Quartz</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Quartz定时触发器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.创建quartz类，注意，该类必须继承 QuartzJobBean才能生效(乌龟的屁股——龟腚)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyQuartz</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line">    <span class="comment">//继承之后重写其中的抽象方法</span></span><br><span class="line">    <span class="comment">//该方法就定义了你的工作，上图第一步</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;quartz is running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建配置类来配置工作明细，触发器</p><p>这里面门道有点多，建议各位自己找资料深入了解了解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">jobDetail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//工作明细,绑定具体工作</span></span><br><span class="line">        <span class="comment">//创建该类对应的具体工作</span></span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(MyQuartz.class).storeDurably().build();</span><br><span class="line">        <span class="comment">//.storeDurably是用来持久化处理的，因为如果你用不到，java会把他当垃圾处理了，记得加</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Trigger <span class="title function_">jobTrigger</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这玩意比较深奥，我不懂</span></span><br><span class="line">        <span class="type">CronScheduleBuilder</span> <span class="variable">schedule</span> <span class="operator">=</span> CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/5 * * * * ?&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定对应工作明细</span></span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(jobDetail()).withSchedule(schedule).build();</span><br><span class="line">        <span class="comment">//forJob:绑定工作明细</span></span><br><span class="line">        <span class="comment">//withSchedule:绑定触发时间</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>简而言之：工作明细，肯定需要你把具体工作传进来，所以它的作用就是将工作传入Quartz，触发器肯定要知道你的工作明细才知道你做什么，所以它需要你传入工作明细，再把它传入Quartz，触发器肯定也需要一个触发时间，那么就还需要一个CronScheduleBuilder对象来设置时间</p><p>工作，工作明细，触发器一环扣一环，也体现出Quartz结构比较严谨</p></blockquote><h1 id="5-spring简化定时任务"><a href="#5-spring简化定时任务" class="headerlink" title="5.spring简化定时任务"></a>5.spring简化定时任务</h1><p>上面的步骤比较繁琐，还有更简单的方法</p><p>1.首先在启动类上加上开启定时任务功能的注解</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br></pre></td></tr></table></figure></blockquote><p>2.另外编写一个类，专门写定时任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个注解就代替了我们原来的配置类</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/1 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个要注意加@Component</p><h1 id="6-监控"><a href="#6-监控" class="headerlink" title="6.监控"></a>6.监控</h1><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305192140412.png" alt="屏幕截图 2023-05-19 214013"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot入门 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java入门笔记</title>
      <link href="/2023/03/27/java/"/>
      <url>/2023/03/27/java/</url>
      
        <content type="html"><![CDATA[<h1 id="驴のJAVA——奇妙之旅"><a href="#驴のJAVA——奇妙之旅" class="headerlink" title="驴のJAVA——奇妙之旅"></a>驴のJAVA——奇妙之旅</h1><blockquote><p>部分笔记来自韩顺平教育</p></blockquote><h3 id="Markdown快捷键"><a href="#Markdown快捷键" class="headerlink" title="Markdown快捷键"></a>Markdown快捷键</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-16%20194630.png"></p><h3 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h3><p>1.删除行：Ctrl + D</p><p>2.复制行：Ctrl + Alt + 向下箭头</p><p>3.补全代码：Alt + &#x2F;</p><p>4.导入该行需要的类：Alt + Enter</p><p>5.生成构造器快捷键：Alt + insert</p><p>6.快速定位方法Ctrl + B</p><p>7.自动分配变量名：.var</p><h2 id="1-类与对象"><a href="#1-类与对象" class="headerlink" title="1.类与对象"></a>1.类与对象</h2><h3 id="1-对象的内存布局"><a href="#1-对象的内存布局" class="headerlink" title="1.对象的内存布局"></a>1.对象的内存布局</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-16%20200010-16686960745503.png" style="zoom:50%;" />)</p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><p>​cat1是一个引用类型，他指向一块内存地址，那块内存地址里有类的&#x3D;&#x3D;属性信息&#x3D;&#x3D;</p><p>但要注意的是，如果是字符串型的属性信息，会放在&#x3D;&#x3D;方法区&#x3D;&#x3D;中的&#x3D;&#x3D;常量池&#x3D;&#x3D;里，只在类的内存地址中保存一个字符串的地址（如图）。</p><p>​当Cat类被new时，同时会在方法区对类的信息进行一个加载，加载内容是&#x3D;&#x3D;属性信息&#x3D;&#x3D;和&#x3D;&#x3D;方法&#x3D;&#x3D;。</p><h3 id="2-类与对象的内存分配机制"><a href="#2-类与对象的内存分配机制" class="headerlink" title="2.类与对象的内存分配机制"></a>2.类与对象的内存分配机制</h3><p>先看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.age = <span class="number">10</span>;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> p1;</span><br><span class="line"><span class="comment">//p1.age = 20;</span></span><br><span class="line">System.out.println(<span class="string">&quot;p2.age = &quot;</span> + p2.age);</span><br></pre></td></tr></table></figure><p>当我们先new了一个对象p1，并给p1的属性赋了值，如果这时再将p1赋值给p2，并输出p2的属性，会出现什么：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p2.age = 10</span><br></pre></td></tr></table></figure><p>和p1的值一致，那如果我们在输出之前修改p1的属性，结果这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p2.age = 20</span><br></pre></td></tr></table></figure><p>这说明p1，p2指向了同一块内存地址，相当于p1,p2是一个人的两个名字，但都是指向该人。</p><h3 id="（补充）JAVA的内存结构"><a href="#（补充）JAVA的内存结构" class="headerlink" title="（补充）JAVA的内存结构"></a>（补充）JAVA的内存结构</h3><h5 id="Java内存结构分析："><a href="#Java内存结构分析：" class="headerlink" title="Java内存结构分析："></a>Java内存结构分析：</h5><ul><li>1.栈：存放基本数据类型（局部变量）</li><li>2.堆：存放对象</li><li>3.方法区：常量池（常量，比如字符串），类加载信息</li></ul><h5 id="Java创建对象流程的简单分析："><a href="#Java创建对象流程的简单分析：" class="headerlink" title="Java创建对象流程的简单分析："></a>Java创建对象流程的简单分析：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = new Person();</span><br></pre></td></tr></table></figure><ul><li>1.先加载类信息（属性，方法）&#x3D;&#x3D;一个类只加载一次&#x3D;&#x3D;</li><li>2.在堆中分配空间，并默认初始化</li><li>3.把空间的地址分配给p1,p1指向该地址</li><li>4.进行指定初始化</li></ul><h2 id="2-JAVA方法调用机制"><a href="#2-JAVA方法调用机制" class="headerlink" title="2.JAVA方法调用机制"></a>2.JAVA方法调用机制</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-16%20211200.png"  />)</p><h2 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h2><p>步骤：</p><p>1）属性私有化</p><p>2）公共的get set方法，get用于获取，set用于赋值并判断其合理性</p><p>封装与构造器：可以在构造器内调用get，set，同样可以判断其合理性，如图</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-18%20010355.png"></p><h2 id="4-多态"><a href="#4-多态" class="headerlink" title="4.多态"></a>4.多态</h2><h4 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h4><p>父类的引用指向子类的对象，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="comment">//Dog是Animal类的子类</span></span><br></pre></td></tr></table></figure><p>同时满足：**&#x3D;&#x3D;编译类型看左边，运行类型看右边&#x3D;&#x3D;**（可以调用父类所有成员（看权限），不能调用子类特有成员，因为调用是由编译类型决定的，调用方法时，先从子类开始找，如果有则运行子类的方法，特别是有方法重写的时候）</p><h4 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h4><p>如果用向上转型定义了一个对象，那就会出现无法调用子类特有对象的情况，如果要调用，则需要进行向下转型，我习惯于看做强制类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal;</span><br><span class="line"><span class="comment">//animal.pop();这样是错误的，因为pop方法是Dog类特有</span></span><br><span class="line">dog.pop();</span><br></pre></td></tr></table></figure><h4 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h4><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-19%20021737.png"></p><p>简单说，只要调用了某个类的方法，那就会动态绑定到该类（用该类的属性）</p><h4 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h4><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-19%20022812.png"></p><p>instanceof用于判断运行类型，然后就可以根据运行类型通过向下转型来调用特有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(persons[i] <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">    ((Student)person[i]).study();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><p>即如果方法内的参数类型为父类，调用时可以传入子类对象作为参数。</p><h2 id="5-类变量类方法"><a href="#5-类变量类方法" class="headerlink" title="5.类变量类方法"></a>5.类变量类方法</h2><p>类变量是指属于这个类的变量，被所有该类的对象所共有，所以是静态的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> n;</span><br></pre></td></tr></table></figure><p>类方法是指一个被所有该类的对象共有的方法，它只能访问静态参数，另外静态方法可以实现类名.方法名（）直接调用，不需要对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">A</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h2 id="6-代码块"><a href="#6-代码块" class="headerlink" title="6.代码块"></a>6.代码块</h2><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>代码块又称初始化块，属于类中的成员，类似与方法，将逻辑语句封装在方法体重，用{}包围，可以用做对象初始化</p><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><p><strong>[修饰符]{</strong>&#x2F;&#x2F;修饰符可写可不写，但要写只能写static</p><p><strong>代码</strong></p><p><strong>}；</strong></p><h4 id="使用细节："><a href="#使用细节：" class="headerlink" title="使用细节："></a>使用细节：</h4><p>1.静态代码块只执行一次，普通代码块一个对象一次</p><p>2.类何时被加载 <strong>&#x3D;&#x3D;重要&#x3D;&#x3D;</strong></p><p> 1）创建对象</p><p> 2）创建子类对象</p><p> 3）使用静态成员</p><p>3.<img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-20%20010025.png"></p><p>先调用静态，在调用普通</p><p>4.<img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-20%20010350.png"></p><h2 id="7-单例设计模式"><a href="#7-单例设计模式" class="headerlink" title="7.单例设计模式"></a>7.单例设计模式</h2><p>解释：这个模式的类只允许有一个对象，称为单例，要符合这个要求，必须要把构造器&#x3D;&#x3D;私有化&#x3D;&#x3D;，这样用户就不能自己new对象了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子(饿汉式)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GirlFriend</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GirlFriend</span> <span class="variable">gf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;xiaohong&quot;</span>);<span class="comment">//在类的内部实例化对象//这个对象一定是私有且静态的，不是静态的话我们的静态方法返回不了。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GirlFriend <span class="title function_">getGirlF</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉式和饿汉式的区别在于，饿汉式是不管你用没用，他都创建一个对象等你，懒汉式是你不调用不创建。代码上的区别就在于，懒汉式把对象的创建放在了Get函数里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span>&#123;<span class="comment">//懒汉式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Girl girl;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Girl</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> Girl <span class="title function_">getGirl</span><span class="params">(String name)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(girl == <span class="literal">null</span>)&#123;</span><br><span class="line">girl = <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;某某某&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> girl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-final关键字"><a href="#8-final关键字" class="headerlink" title="8.final关键字"></a>8.final关键字</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20195759.png"></p><h2 id="9-抽象类"><a href="#9-抽象类" class="headerlink" title="9.抽象类"></a>9.抽象类</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20201134.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20202300.png"></p><h2 id="10-内部类"><a href="#10-内部类" class="headerlink" title="10.内部类"></a>10.内部类</h2><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20204456.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20204441.png"></p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>目的：简化开发，当某个类继承某个类，或者说一个接口，你只会使用它们一次，如果专门为他们写一个新的类或者接口，太过繁琐，我们就可以用匿名内部类实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子：</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>()&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;<span class="comment">//分号别忘了</span></span><br><span class="line">a.say();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类不能实例化，但可以通过匿名内部类</span></span><br><span class="line"><span class="keyword">abstract</span> A&#123;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>()&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;你甚至可以：&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;.say();<span class="comment">//直接调用方法</span></span><br></pre></td></tr></table></figure><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">AA</span>&#123;<span class="comment">//成员内部类</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="comment">//输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部类调用成员内部类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line">A.a 对象名 = A.<span class="keyword">new</span> <span class="title class_">a</span>();</span><br></pre></td></tr></table></figure><p>法二：在外部类里提供返回内部类对象的方法，接受类型仍然是A.a</p><h2 id="11-枚举类"><a href="#11-枚举类" class="headerlink" title="11.枚举类"></a>11.枚举类</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-24%20144955.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    XM(<span class="string">&quot;小明&quot;</span>，<span class="string">&quot;18&quot;</span>),XH(<span class="string">&quot;小红&quot;</span>，<span class="number">18</span>)；<span class="comment">//一定放在第一排，多个用逗号间隔</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//构造器，get，set省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举类常用方法"><a href="#枚举类常用方法" class="headerlink" title="枚举类常用方法"></a>枚举类常用方法</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-24%20152339.png"></p><h3 id="增强-x3D-x3D-for循环-x3D-x3D"><a href="#增强-x3D-x3D-for循环-x3D-x3D" class="headerlink" title="增强&#x3D;&#x3D;for循环&#x3D;&#x3D;"></a>增强&#x3D;&#x3D;for循环&#x3D;&#x3D;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i : A)&#123;</span><br><span class="line">    <span class="comment">//输出i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意！只能遍历不能赋值，因为i是个临时变量，不改变原来的值。</p><h2 id="12-集合"><a href="#12-集合" class="headerlink" title="12.集合"></a>12.集合</h2><h3 id="集合体系图"><a href="#集合体系图" class="headerlink" title="集合体系图"></a><em>集合体系图</em></h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-25%20113243.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-25%20113621.png"></p><h3 id="List常用方法"><a href="#List常用方法" class="headerlink" title="List常用方法"></a>List常用方法</h3><p>首先实现List接口的类，里面的元素是有序的，可重复的</p><h3 id="遍历collection类的方法"><a href="#遍历collection类的方法" class="headerlink" title="遍历collection类的方法"></a>遍历collection类的方法</h3><p>法一：迭代器（**&#x3D;&#x3D;快捷键：itit + 回车&#x3D;&#x3D;**）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设有集合，名字为col</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> col.iterator();<span class="comment">//获取该集合的迭代器</span></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;<span class="comment">//括号里的用来判断下一个地址有无元素</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();<span class="comment">//Object接受</span></span><br><span class="line">    <span class="comment">//输出next</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：增强for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Object obj:col)&#123;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList常用方法"><a href="#ArrayList常用方法" class="headerlink" title="ArrayList常用方法"></a>ArrayList常用方法</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-25%20112951.png"></p><h3 id="set接口：无序，不能有重复的，可以存放null"><a href="#set接口：无序，不能有重复的，可以存放null" class="headerlink" title="set接口：无序，不能有重复的，可以存放null"></a>set接口：无序，不能有重复的，可以存放null</h3><h2 id="13-应用过程如何选择集合类"><a href="#13-应用过程如何选择集合类" class="headerlink" title="13.应用过程如何选择集合类"></a>13.应用过程如何选择集合类</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-26%20222402.png"></p><h3 id="collection类的一些工具"><a href="#collection类的一些工具" class="headerlink" title="collection类的一些工具"></a>collection类的一些工具</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-26%20222606.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-26%20222752.png"></p><h2 id="14-使用JUnit快捷测试代码"><a href="#14-使用JUnit快捷测试代码" class="headerlink" title="14.使用JUnit快捷测试代码"></a>14.使用JUnit快捷测试代码</h2><p>JUnit可以用来快速测试类方法，不用搞对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//在需要测试的方法前加这个，然后Alt + enter 导入包之类的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-java作图"><a href="#15-java作图" class="headerlink" title="15.java作图"></a>15.java作图</h2><h3 id="java坐标图"><a href="#java坐标图" class="headerlink" title="java坐标图"></a>java坐标图</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-28%20164246.png"></p><h3 id="画板具体创建过程"><a href="#画板具体创建过程" class="headerlink" title="画板具体创建过程"></a>画板具体创建过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myPaint</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;<span class="comment">//继承了一个窗口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">myP</span> <span class="variable">mp</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//画板类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">myPaint</span>();<span class="comment">//画板对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">myPaint</span><span class="params">()</span>&#123;</span><br><span class="line">        mp = <span class="keyword">new</span> <span class="title class_">myP</span>();<span class="comment">//在构造器里对画板初始化</span></span><br><span class="line">        <span class="built_in">this</span>.add(mp);<span class="comment">//将画板加入窗口</span></span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">300</span>,<span class="number">300</span>);<span class="comment">//设置窗口大小</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);<span class="comment">//窗口可视化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myP</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span>&#123;<span class="comment">//相当于一个画板类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.paint(g);<span class="comment">//g相当于一个画笔，提供了很多方法，可以作图</span></span><br><span class="line">        g.drawOval(<span class="number">20</span>,<span class="number">20</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-线程"><a href="#16-线程" class="headerlink" title="16.线程"></a>16.线程</h2><h3 id="实现线程的方法"><a href="#实现线程的方法" class="headerlink" title="实现线程的方法"></a>实现线程的方法</h3><p>1.继承Thread 重写run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AoLG</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AoLG</span>();</span><br><span class="line">        a.start();<span class="comment">//不是run</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AoLG</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;加油，奥利给！&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//快捷try-catch：ctrl + alt + t</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.实现Runable接口 重写run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main&#123;</span><br><span class="line">    <span class="type">AOlg</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AOlg</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(a);<span class="comment">//这个调用很重要</span></span><br><span class="line">    t.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AOlg</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程插队"><a href="#线程插队" class="headerlink" title="线程插队"></a>线程插队</h3><blockquote><p>线程名 . join();</p></blockquote><p>注：插队本质是让调用插队函数的线程休眠，例如在main线程中调用子线程插队，则会休眠main让子线程先执行完。</p><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><blockquote><p>线程名 . setDaemon(true);</p><p>本线程结束，调用的子线程（守护进程）也结束</p></blockquote><h3 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h3><blockquote><p>同一时间内只能有一个线程对内存进行操作</p></blockquote><p>实现方法：</p><blockquote><p>synchronized关键字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Java网络部分"><a href="#Java网络部分" class="headerlink" title="Java网络部分"></a>Java网络部分</h2><h3 id="1-IP地址"><a href="#1-IP地址" class="headerlink" title="1.IP地址"></a>1.IP地址</h3><blockquote><p>1.IPV4一共有32位，四个字节，每个字节8位，每个都能显示0~255之间的数</p><p>2.IP地址：唯一标识主机</p></blockquote><h3 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20001611.png"></p><h3 id="2-Socket介绍"><a href="#2-Socket介绍" class="headerlink" title="2.Socket介绍"></a>2.Socket介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20225717.png"></p><p>简单讲就是一个桥梁，可以在两个网络之间进行IO流传递</p><h2 id="3-TCP编程"><a href="#3-TCP编程" class="headerlink" title="3.TCP编程"></a>3.<strong>TCP编程</strong></h2><h3 id="字节型"><a href="#字节型" class="headerlink" title="字节型"></a>字节型</h3><p>思路：</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230020.png"></p><p>&#x3D;&#x3D;服务器端&#x3D;&#x3D;代码：</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230606.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230656.png"></p><p>&#x3D;&#x3D;主机端&#x3D;&#x3D;代码：</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230812.png"></p><h3 id="结束标志"><a href="#结束标志" class="headerlink" title="结束标志"></a>结束标志</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20234110.png"></p><p>用于表示写入结束，不加会导致程序不知道是否写入结束，会一直卡在那里</p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>输出</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/QQ%E6%88%AA%E5%9B%BE20230105211644.jpg"></p><p>读入</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/QQ%E6%88%AA%E5%9B%BE20230105212901jpg"></p><h3 id="4-利用TCP实现文件上传"><a href="#4-利用TCP实现文件上传" class="headerlink" title="4.利用TCP实现文件上传"></a>4.利用TCP实现文件上传</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/QQ%E6%88%AA%E5%9B%BE20230105230612.jpg"></p><h3 id="5-实现多线程文件上传"><a href="#5-实现多线程文件上传" class="headerlink" title="5.实现多线程文件上传"></a>5.实现多线程文件上传</h3><blockquote><p>倘若要提高效率，可以调用线程，实现每访问一次就开一个线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runable</span>)&#123;</span><br><span class="line">    重写run方法</span><br><span class="line">&#125;).start;</span><br></pre></td></tr></table></figure><p>注意：1.服务端应该提前用死循环括起来，让他一直监听</p><p>2.文件名应该自定义一个生成模式，防止文件名重复</p><h2 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h2><h3 id="1-获取类的class方法"><a href="#1-获取类的class方法" class="headerlink" title="1.获取类的class方法"></a>1.获取类的class方法</h3><p>1.类名 + class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Student&gt; s = Student.class;</span><br></pre></td></tr></table></figure><p>2.调用对象的class方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Student</span>&gt; studentClass = student.getClass();</span><br></pre></td></tr></table></figure><p>3.使用class类静态方法Class.forName(某个类的全路径)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.Lfs_code.Student&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-通过反射获取class类的构造方法"><a href="#2-通过反射获取class类的构造方法" class="headerlink" title="2.通过反射获取class类的构造方法"></a>2.通过反射获取class类的构造方法</h3><p>1.获取单个构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;Student&gt; constructor = s.getConstructor();<span class="comment">//无参</span></span><br><span class="line">Constructor&lt;?&gt; constructor = aClass.getConstructor(<span class="type">int</span>.class,String.class);<span class="comment">//有参</span></span><br></pre></td></tr></table></figure><p><strong>注获取有参构造方法时，需要用到数据类型的“.class”形式</strong></p><p>2.另外如果需要访问私有构造方法需要使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="type">int</span>.class,String.class);<span class="comment">//私有公有都能访问</span></span><br><span class="line"><span class="comment">//调用是必须提前设置访问权</span></span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h3 id="3-访问成员变量"><a href="#3-访问成员变量" class="headerlink" title="3.访问成员变量"></a>3.访问成员变量</h3><p>1.获取全部成员变量，顺便遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Field[] declaredFields = aClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f:declaredFields</span><br><span class="line">             ) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>2.获取单个成员变量，并修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);<span class="comment">//如果该变量是私有的，就设置它的访问权</span></span><br><span class="line">        name.set(o,<span class="string">&quot;林峰&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-反射获取成员方法"><a href="#4-反射获取成员方法" class="headerlink" title="4.反射获取成员方法"></a>4.反射获取成员方法</h3><p>1.获取全部方法（和上面大差不差，基本不用）</p><p>2.获取单个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">study</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;study&quot;</span>);</span><br></pre></td></tr></table></figure><p>3.<strong>方法的调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">study.invoke(o);<span class="comment">//方法类型 + invoke + (调用方法的对象)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
