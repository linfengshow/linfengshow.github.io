<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的博客</title>
      <link href="/2023/05/08/helloworld/"/>
      <url>/2023/05/08/helloworld/</url>
      
        <content type="html"><![CDATA[<h1 id="没啥好讲的，其中奥秘都在博客里了"><a href="#没啥好讲的，其中奥秘都在博客里了" class="headerlink" title="没啥好讲的，其中奥秘都在博客里了"></a>没啥好讲的，其中奥秘都在博客里了</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>驴のSpringBoot学习笔记</title>
      <link href="/2023/03/30/SpringBoot/"/>
      <url>/2023/03/30/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="驴のSpringBoot学习笔记"><a href="#驴のSpringBoot学习笔记" class="headerlink" title="驴のSpringBoot学习笔记"></a>驴のSpringBoot学习笔记</h1><blockquote><p>部分资料来自于黑马程序员</p></blockquote><h2 id="1-SpringBoot入门"><a href="#1-SpringBoot入门" class="headerlink" title="1.SpringBoot入门"></a>1.SpringBoot入门</h2><h3 id="1-1在idea创建SpringBoot"><a href="#1-1在idea创建SpringBoot" class="headerlink" title="1.1在idea创建SpringBoot"></a>1.1在idea创建SpringBoot</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/image-20211116125259385.png"></p><blockquote><p>如图所示在项目中创建新的模块，模块选择Spring Init ,特别提醒注意自己的SDK版本号（我是jdk8），然后正常的起名字，type选择maven，java版本选择你的版本（我是8）然后next</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/image-20211116125615728.png"></p><p>这里勾选Web，上方的springboot默认就好</p><h3 id="1-2尝试创建一个开发控制器"><a href="#1-2尝试创建一个开发控制器" class="headerlink" title="1.2尝试创建一个开发控制器"></a>1.2尝试创建一个开发控制器</h3><p>创建java文件（SB是springBoot缩写）</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-03-30%20175742.png"></p><p>尝试写一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SB</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3运行"><a href="#1-3运行" class="headerlink" title="1.3运行"></a>1.3运行</h3><h4 id="可能出现的错误："><a href="#可能出现的错误：" class="headerlink" title="可能出现的错误："></a>可能出现的错误：</h4><p>无效的发行版：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021100900.png"></p><p>[^此图来自csdn：<a href="https://blog.csdn.net/booker009/article/details/129648180]">https://blog.csdn.net/booker009/article/details/129648180]</a>: </p><p>意味着你idea中的java版本设置与springboot不一致，需要做两步：</p><p>1.Project Structure Modules&#x2F;Project选择你的项目（以及父级项目，如果有的话）-&gt;选择8（你的jdk版本），如图</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021101792.png"></p><p>2.Setting： 2.查找java compiler-&gt;Target bytecode version</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-03-30%20180532.png"></p><p>再次运行就好了</p><p>另外如果报错说你的8080接口被占用，可以在application.properties中重新配置TomCat端口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入以下代码</span></span><br><span class="line">server.port:你想要的端口号</span><br></pre></td></tr></table></figure><p>成功：</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-03-30%20181438.png"></p><p>然后在浏览器的地址栏里输入：</p><blockquote><p>localhost&#x2F;books</p></blockquote><p>即可访问刚刚编写的控制器</p><h2 id="2-入门案例"><a href="#2-入门案例" class="headerlink" title="2.入门案例"></a>2.入门案例</h2><blockquote><p>注意，此案例是建立在已经学习过javaweb等相关知识的案例</p></blockquote><h3 id="1-创建新模组并初步创建项目相关目录"><a href="#1-创建新模组并初步创建项目相关目录" class="headerlink" title="1.创建新模组并初步创建项目相关目录"></a>1.创建新模组并初步创建项目相关目录</h3><p>如下</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021104075.png" alt="屏幕截图 2023-04-02 110419"></p><blockquote><p>其中：</p><p>config：用于放置一些项目中自己配制的MP配置</p><p>dao：Mapper文件（javaweb知识）</p><p>domain： 实体类</p><p>resources&amp;test：均为自动生成，test中我自建了一个test类用来初步测试代码功能</p></blockquote><h3 id="2-pom-xml手动配置"><a href="#2-pom-xml手动配置" class="headerlink" title="2.pom.xml手动配置"></a>2.pom.xml手动配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--由于mybatis-plus（国人开发，功能强大！）， druid ，lombook在springboot中并没有默认配置，所以需要手动导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jar包功能用到时会讲</p><h3 id="3-application-yml配置"><a href="#3-application-yml配置" class="headerlink" title="3.application.yml配置"></a>3.application.yml配置</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021227711.png" alt="屏幕截图 2023-04-02 122706"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据库链接基本配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///db2</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment">#主要配置链接数据库名还有自增属性</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span>   <span class="comment">#因为MP是根据你的实体类名寻找数据库表，不设置的话名称不一致会找不到</span></span><br><span class="line">      <span class="comment">#例如：数据库表名：tb_stu 实体类：stu 这样就会不识别，可以在这里写 db-config: tb_</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment">#此处设置id为自增，不然会和MP冲突</span></span><br><span class="line"><span class="comment">#开启MP日志</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h3 id="4-domain目录"><a href="#4-domain目录" class="headerlink" title="4.domain目录"></a>4.domain目录</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021110482.png" alt="屏幕截图 2023-04-02 110930"></p><blockquote><p>本案例调用的是本地的账号密码数据库</p><p>实体类用来作为数据库内容的封装，其中的属性名要和数据库的列名一致，不一致可以通过注解单独绑定名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column(name = &quot;release_status&quot;)</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>@Data:来自lombok包，可以自动给导入的类中添加getter，setter等方法，简化开发</p></blockquote><blockquote><p>@TableName:用于指定链接哪个数据库,如果实体类名和数据库表名一致可以不写（存疑）</p></blockquote><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span><span class="comment">//来自lombok  自动为实体类添加getter,setter,toString等方法</span></span><br><span class="line"><span class="meta">@TableName(&quot;users&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-dao目录"><a href="#5-dao目录" class="headerlink" title="5.dao目录"></a>5.dao目录</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021126263.png" alt="屏幕截图 2023-04-02 112646"></p><blockquote><p>该目录中的mapper接口用于实现代码与数据库之间的交互，底层是sql语句的掉调用</p></blockquote><blockquote><p>@Repository: Repository它用于将数据访问层 (DAO 层 ) 的类标识为 Spring Bean,使之能够被扫描</p></blockquote><blockquote><p>@Mapper：用来标识这是Mapper类</p></blockquote><blockquote><p>extends BaseMapper<Users>：BaseMapper来自MP，里面定义了很多现成的方法，可以不用自己写sql语句了（国产就是牛逼）</p><p>&lt;&gt;中放实体类，这样从数据库读到的数据会默认封装成实体类</p></blockquote><h3 id="6-Application自带的启动器"><a href="#6-Application自带的启动器" class="headerlink" title="6.Application自带的启动器"></a>6.Application自带的启动器</h3><blockquote><p>注解：@SpringBootApplication</p></blockquote><h3 id="7-test目录"><a href="#7-test目录" class="headerlink" title="7.test目录"></a>7.test目录</h3><p>系统自带的我先不讲，说一说自己配的（其实都一样，只不过是照着葫芦画瓢）</p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304021211877.png" alt="屏幕截图 2023-04-02 121048" style="zoom:67%;" /><blockquote><p>@SpringBootTest：用来表示这是springboot测试类，这样才能被扫描到</p></blockquote><blockquote><p>@Autowired：自动导入，如果这地方报错，就说明前面Mapper没加注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br></pre></td></tr></table></figure><blockquote><p>这个userMapper对象可以调用很多数据库操作方法</p></blockquote><blockquote><p>讲一下test的规则，只要加上@Test就说明这是测试方法，测试方法只是单纯测试方法中的代码逻辑和输出是否报错，是否符合我们所期待的输出，所以测试方法是不需要返回值和参数的</p></blockquote><p>额外说一下分页操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getPage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接这样写是不对的,因为MP中的拦截器没有配置</span></span><br><span class="line">        userMapper.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>拦截器在config中配置</p><h3 id="8-config配置"><a href="#8-config配置" class="headerlink" title="8.config配置"></a>8.config配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//用来放MP的某些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//注释成配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//配置Bean才能被扫描到</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//两件事：1.把拦截器配置出来 2.return出去</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();<span class="comment">//拦截器的壳</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们的分页操作就可以用了</p><h3 id="9-关于条件查询操作"><a href="#9-关于条件查询操作" class="headerlink" title="9.关于条件查询操作"></a>9.关于条件查询操作</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304031654519.png"></p><blockquote><p>MP下的条件查询需要配置条件构造器，然后把构造器放在查询语句中，在后台sql语句上会自动加上构造器中的条件</p></blockquote><p>一些构造器条件：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304031656245.png"></p><p><strong>需要特别注意的是</strong>：如果查询条件的值设置为null，则null会被识别为字符串，要避免这种情况发生，需要要在设置查询条件时就加入判断例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lqw1.like(tiaojian != <span class="literal">null</span>,Users::getUsername,tiaojian);</span><br></pre></td></tr></table></figure><p>若为true则拼接条件，false则不拼接</p><h3 id="10-一般开发流程"><a href="#10-一般开发流程" class="headerlink" title="10.一般开发流程"></a>10.一般开发流程</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304031830849.png" alt="屏幕截图 2023-04-03 183026"></p><ol><li>首先编写实体类，方便后面封装</li><li>写实现类（mapper），在javaweb中该类要映射.xml文档来编写sql语句操作数据库，SpringBoot简化了这一过程，可以直接继承现有的类</li><li>写服务端接口，也就是上图的UserService，里面定义了很多业务方法</li><li>写impl接口实现类，实现定义的服务端接口，并实现其中的方法，javaweb中需要获得mapper来调用方法，SpringBoot中同样也需要</li><li>表现层（前端）</li></ol><h3 id="11-MP快速开发"><a href="#11-MP快速开发" class="headerlink" title="11.MP快速开发"></a>11.MP快速开发</h3><blockquote><p>上文中提到的3,4步在MP中得到了简化开发</p></blockquote><p>首先是服务端接口，现在不需要自己手动写一些基础操作的方法（增删改查）</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304031905363.png" alt="屏幕截图 2023-04-03 190530"></p><p>直接继承官方提供的接口类，里面有很多基础的方法，传入泛型为实体类</p><p>其次是接口实现类</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304031906252.png"></p><p>也是继承官方提供的ServiceImpl类，传入的两个泛型，一个是实现类Mapper，另一个是实体类，虽然简化开发了，但是仍然需要mapper（只是把我们一般开发的过程给封装成类，在后台执行，具体流程其实不变）</p><p><strong>注意不要忘了继承接口</strong></p><p>另外MP只是提供了某些基础方法，如果需要自定义或重写，还是得按老流程，现在接口中定义，然后在实现类中实现</p><h3 id="12-完成Controller"><a href="#12-完成Controller" class="headerlink" title="12.完成Controller"></a>12.完成Controller</h3><p>在完成上面的一系列服务端代码并测试完之后，就可以写controller了</p><p>例如：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041711846.png" alt="屏幕截图 2023-04-04 171055"></p><blockquote><p>@RequestMapping()：这里定义的是访问路径，如果要访问你的springboot，则需要在浏览器中输入”<a href="http://localhost/">http://localhost/</a>  + 你在RequestMapping()写的路径”</p></blockquote><p>下面的注解都是spring定义好的，例如GetMapping就是以get方式发送请求，PostMapping是Post请求</p><p>在这里引用一篇知乎文章，我认为讲得很全面，可以给之前没了解过的同学补补课：<a href="https://zhuanlan.zhihu.com/p/137507309">https://zhuanlan.zhihu.com/p/137507309</a></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041717729.png" alt="屏幕截图 2023-04-03 211123"></p><h3 id="13-启动我们的Spring"><a href="#13-启动我们的Spring" class="headerlink" title="13.启动我们的Spring"></a>13.启动我们的Spring</h3><p>springboot项目在创建时自带启动器，就是根目录下的XXXApplication，右键启动它</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-03-30%20181438.png"></p><p>启动成功</p><h3 id="14-利用API接口调试工具来检测我们的代码"><a href="#14-利用API接口调试工具来检测我们的代码" class="headerlink" title="14.利用API接口调试工具来检测我们的代码"></a>14.利用API接口调试工具来检测我们的代码</h3><p>很多老师推荐postman，但这玩意儿收费，我在网上找到了个叫Apifox的网站，可以实现在线调试，我用了一下，感jio还不错（建议使用edge浏览器，他自带插件）<img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041724161.png" alt="屏幕截图 2023-04-04 172359"></p><p>调试窗口，还是比较方便的，具体操作可以到apifox主页，里面有教程。</p><h3 id="15-前后端数据一致性处理（小优化）"><a href="#15-前后端数据一致性处理（小优化）" class="headerlink" title="15.前后端数据一致性处理（小优化）"></a>15.前后端数据一致性处理（小优化）</h3><blockquote><p>我们在完成了上面的所有步骤，并能在调试工具中看到返回值时，就说明我们的开发已经完成一大部分了，但这里有一个小问题，我们后端的返回值类型不一致，例如getAll返回的是list列表，getById返回的是单个实体类，增删改查返回的是boolean，这些返回类型会对前端开发造成一定麻烦，所以我们需要统一返回类型</p></blockquote><p>list：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041731578.png" alt="屏幕截图 2023-04-04 173019"></p><p>boolean：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041731850.png" alt="屏幕截图 2023-04-04 173046"></p><p>实体类：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041731850.png" alt="屏幕截图 2023-04-04 173059"></p><blockquote><p>返回类型很多</p></blockquote><p>统一返回类型：</p><p>新建返回类型的封装类：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041733872.png" alt="屏幕截图 2023-04-04 173344"></p><blockquote><p>flag：后端代码是否正常执行（为了区分是找不到返回null还是出错返回null）</p><p>data：数据内容</p></blockquote><p>把之前写好的controller中的方法，返回值都改成R</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304041740430.png" alt="屏幕截图 2023-04-04 174024"></p><p>这样返回的就是统一的R类型了</p><h2 id="！（补充）常用注解-一般我在学习过程中遇到不理解的都会在这里更新-："><a href="#！（补充）常用注解-一般我在学习过程中遇到不理解的都会在这里更新-：" class="headerlink" title="！（补充）常用注解(一般我在学习过程中遇到不理解的都会在这里更新)："></a>！（补充）常用注解(一般我在学习过程中遇到不理解的都会在这里更新)：</h2><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><blockquote><p>这是一个组合注解</p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>@SpringBootConfiguration,这个注解可以标注配置文件，在其中可以声明Bean对象</p><p>@EnableAutoConfiguration 自动配置</p><p>@ComponentScan 组件扫描，通过它能找到注解@Component</p></blockquote><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><blockquote><p>注解控制类，可以在里面写业务方法</p></blockquote><h3 id="Value-“-”"><a href="#Value-“-”" class="headerlink" title="@Value(“${}”)"></a>@Value(“${}”)</h3><blockquote><p>可以获取配置文件里的值</p></blockquote><blockquote><p>另外如果我们想将配置文件里的数据拿出来单独封装成一个类，我们需要用到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;&quot;)</span></span><br></pre></td></tr></table></figure></blockquote><p>这个注解可以从配置文件里取值给类中的属性赋值，prefix这玩意儿后面可以给定一个名称前缀，比如我配置文件中有属性：user.username，user.password…,我想要取值，给我封装类里的属性username，password赋值，我就需要写prefix &#x3D; “user”,这样就可以实现，注意属性名称要一致</p><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><blockquote><p>一般写在服务方法上，将方法返回的东西转换为json字符串供前端接受</p></blockquote><h3 id="Mapper"><a href="#Mapper" class="headerlink" title="@Mapper"></a>@Mapper</h3><blockquote><p>放在dao接口上面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Mapper</span>: 告诉Mybatis这是dao接口，创建此接口的代理对象  位置：类的上面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>另外如果将来dao太多，一个一个加@Mapper太累，可以选择在Application上加@MapperScan</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.lf.dao&quot;)</span></span><br><span class="line"><span class="comment">//这样就可以把dao包下的所有的dao扫描进去</span></span><br></pre></td></tr></table></figure><h3 id="Rest风格"><a href="#Rest风格" class="headerlink" title="Rest风格"></a>Rest风格</h3><h4 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping()"></a>@GetMapping()</h4><blockquote><p>获取前端参数，首先需要在GetMapping加占位符，比如@GetMapping(&#x2F;user&#x2F;{id})</p><p>然后就是获取路径中的数据</p><p>假如有如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Interger id)</span></span><br></pre></td></tr></table></figure><p>这样访问路径里的参数就赋值给了方法参数id</p></blockquote><h2 id="3-配置文件4级分类"><a href="#3-配置文件4级分类" class="headerlink" title="3.配置文件4级分类"></a>3.配置文件4级分类</h2><blockquote><p>我们开发过程中用的配置文件都是我们程序员方便开发测试的，等开发结束项目经理会有自己的配置，甲方也有别的要求，还有涉及到保密的行业（例如：银行），是不会告诉你配置的，所以boot就提供了配置覆盖的操作，一共有四个等级，高等级的配置可以覆盖低等级的</p></blockquote><p>如图：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304102236486.png" alt="屏幕截图 2023-04-10 222707"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304102236181.png" alt="屏幕截图 2023-04-10 222808"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304102236256.png" alt="屏幕截图 2023-04-10 222527"></p><h2 id="4-多环境开发"><a href="#4-多环境开发" class="headerlink" title="4.多环境开发"></a>4.多环境开发</h2><p>yaml版</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112025532.png" alt="屏幕截图 2023-04-11 202140"></p><p>也可以将多个环境写成文件</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112026772.png" alt="屏幕截图 2023-04-11 202346"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112026765.png" alt="屏幕截图 2023-04-11 202333"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112030977.png" alt="屏幕截图 2023-04-11 203047"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112032784.png" alt="屏幕截图 2023-04-11 203149"></p><p>maven配置boot环境：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112038457.png" alt="屏幕截图 2023-04-11 203846"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112039895.png" alt="屏幕截图 2023-04-11 203914"></p><p>会自动读取maven配置</p><h2 id="5-日志"><a href="#5-日志" class="headerlink" title="5.日志"></a>5.日志</h2><h3 id="1-日志对象创建"><a href="#1-日志对象创建" class="headerlink" title="1.日志对象创建"></a>1.日志对象创建</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112040169.png" alt="屏幕截图 2023-04-11 201956"></p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112040281.png" alt="屏幕截图 2023-04-11 202045"></p><h3 id="3-lombok简化日志开发"><a href="#3-lombok简化日志开发" class="headerlink" title="3.lombok简化日志开发"></a>3.lombok简化日志开发</h3><p>当我们导入了lombok包后，就不用麻烦在每一个类中都加一个log的声明了。只需要在类上加注释@Slf4j,然后就可以正常使用注释了</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112219768.png" alt="屏幕截图 2023-04-11 221942"></p><h3 id="4-日志输出格式控制"><a href="#4-日志输出格式控制" class="headerlink" title="4.日志输出格式控制"></a>4.日志输出格式控制</h3><p>一条日志：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112223057.png" alt="屏幕截图 2023-04-11 222307"></p><p>解读</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112225446.png" alt="屏幕截图 2023-04-11 222457"></p><blockquote><p>时间：这个不用多讲</p><p>级别：这个日志的级别，也没什么好说的</p><p>PID：进程ID，表示当前操作所处的进程，当多服务同时记录时，方便调试</p><p>所属类：发出日志的类名，长的类名boot会自动简化</p><p>日志信息：自定义</p></blockquote><h3 id="5-日志输出为文件（很常用）"><a href="#5-日志输出为文件（很常用）" class="headerlink" title="5.日志输出为文件（很常用）"></a>5.日志输出为文件（很常用）</h3><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304112259741.png" alt="屏幕截图 2023-04-11 225916"></p><h2 id="6-第三方Bean属性绑定"><a href="#6-第三方Bean属性绑定" class="headerlink" title="6.第三方Bean属性绑定"></a>6.第三方Bean属性绑定</h2><h3 id="1-注解"><a href="#1-注解" class="headerlink" title="1.注解"></a>1.注解</h3><blockquote><p>@ConfigurationProperties</p><p>@EnableConfigurationProperties</p></blockquote><p>@EnableConfigurationProperties注解可以将使用@ConfigurationProperties注解的类加入Spring容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(ServerConfig.class)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;第三方bean名&quot;)</span></span><br></pre></td></tr></table></figure><p>需要注意的是@EnableConfigurationProperties有两个功能，一是开启引用类的第三方bean数据绑定，二是将引用类加入Spring容器（和@Component作用相同），所以两者不能共存，切记！</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><blockquote><p>yml文件里int的解析类型支持二进制，八进制，十六进制</p><p>现有一情景：一位同学在yml中配置数据库连接信息时，将password设置为：0127，然后连接数据库时一直报错密码错误（正确密码就是0127），原因是什么</p></blockquote><p>因为yml中对int解析支持八进制，而八进制是以0开头，所以yml中将0127识别为八进制，最终读取的密码为87（0127八进制转十进制），故出错，解决方法其实只要将yml配置文件里的int属性变成字符串，即password: “0127”，即可解决。</p><h2 id="7-测试类测试web（前端）"><a href="#7-测试类测试web（前端）" class="headerlink" title="7.测试类测试web（前端）"></a>7.测试类测试web（前端）</h2><p>1.虚拟一个web环境</p><blockquote><p>测试类注解@SpringBootTest()</p><p>如果直接启动测试类，这样只是启动了一个普通的java类，而不是web类，这样无法做到测试表现层（前端）</p></blockquote><blockquote><p>解决：@SpringBootTest(webEnviroment &#x3D; SpringBootTest.webEnvironment.RANDOM_PORT)</p></blockquote><p>2.开启虚拟MVC调用</p><blockquote><p>@AutoconfigureMockMvc注解，用来开启虚拟MVC</p><p>然后我们需要一个虚拟Mvc对象：</p><p>@Autowired MockMvc mvc;</p><p>然后我们需要创建一个虚拟请求buider：</p><p>MockHttpServletRequestBuilder builder &#x3D; MockRequestBuilders.get&#x2F;put&#x2F;post&#x2F;delete等（”&#x2F;访问路径”）</p><p>用mvc对象调用perform方法，放入我们的builder</p><p>mvc.perform(buider)即可</p></blockquote><h2 id="8-从容器中手动获取对象"><a href="#8-从容器中手动获取对象" class="headerlink" title="8.从容器中手动获取对象"></a>8.从容器中手动获取对象</h2><p>假如现在我们有一个服务类：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304261738177.png" alt="屏幕截图 2023-04-26 173816"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们怎样才能在类中通过手动方法获得该服务类的一个对象，从而调用我们的服务方法</p><p>即利用我们SpringBoot主方法里的run方法，它会返回一个容器对象，之后可以用getBean获得我们需要的对象了</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304261739227.png" alt="屏幕截图 2023-04-26 173947"></p><h2 id="Web："><a href="#Web：" class="headerlink" title="Web："></a>Web：</h2><h2 id="1-拦截器"><a href="#1-拦截器" class="headerlink" title="1.拦截器"></a>1.拦截器</h2><blockquote><p>拦截器是SpringMvc中的一种对象，他可以拦截对后端的请求，可以自定义拦截器</p></blockquote><h3 id="1-自定义拦截器："><a href="#1-自定义拦截器：" class="headerlink" title="1.自定义拦截器："></a>1.自定义拦截器：</h3><blockquote><p>1.创建类实现SpringMVC框架的HandlerInterceptor接口</p></blockquote><p>你可以在拦截器里写验证或者是对数据筛选过滤，此处只做测试，所以就输出了一句话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 这里配置了一个自定义拦截器类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInter</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                             HttpServletResponse response,</span></span><br><span class="line"><span class="params">                             Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [request, response, handler]</span></span><br><span class="line"><span class="comment">         * handler:被拦截的控制器对象</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> boolean</span></span><br><span class="line"><span class="comment">         * true:放行</span></span><br><span class="line"><span class="comment">         * false：截断</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行了拦截器&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.创建配置类，将我们自定义的拦截器注册到容器里</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 这里用来配置拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">//添加拦截器对象，注入容器中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Params</span>: [registry]</span></span><br><span class="line"><span class="comment">         * InterceptorRegistry registry: 这玩意是个注册器，把你自定义的拦截器塞里面就</span></span><br><span class="line"><span class="comment">         * 可以注册了（相当于之前在xml注册，spring简化咯）</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//创建拦截器对象</span></span><br><span class="line">        <span class="type">LoginInter</span> <span class="variable">loginInter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginInter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这种路径一般都指定一个字符串数组，比较方便</span></span><br><span class="line">        <span class="comment">//拦截</span></span><br><span class="line">        String[] path = &#123;<span class="string">&quot;/user/**&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//不拦截</span></span><br><span class="line">        String[] excludepath = &#123;<span class="string">&quot;/user/Login&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//addPathPatterns() 配置拦截路径</span></span><br><span class="line">        <span class="comment">//excludePathPatterns() 配置放行路径</span></span><br><span class="line">        registry.addInterceptor(loginInter)</span><br><span class="line">                .addPathPatterns(path)</span><br><span class="line">                .excludePathPatterns(excludepath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看结果：</p><p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202304261901992.png" alt="屏幕截图 2023-04-26 190115"></p><p>先访问了user&#x2F;Login</p><p>因为没有拦截这个url，所以直接访问了我们的controller</p><p>然后访问&#x2F;user&#x2F;a</p><p>可以看到，先进入了我们的拦截器，触发了拦截器的输出，只不过拦截器放行了，所以依旧可以正常访问controller</p><h2 id="2-使用Servlet"><a href="#2-使用Servlet" class="headerlink" title="2.使用Servlet"></a>2.使用Servlet</h2><blockquote><p>1.创建Servlet类。继承HttpServlet</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Servlet类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line"></span><br><span class="line">        out.println(<span class="string">&quot;Servlet执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.注册Servlet，放入SpringBoot框架里</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myconfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public ServletRegistrationBean(T servlet, String... urlMappings)</span></span><br><span class="line">    <span class="comment">//第一个参数是 Servlet对象 ，第二个是url地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法，注册Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">servletRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ServletRegistrationBean</span> <span class="variable">bean</span></span><br><span class="line">                <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(<span class="keyword">new</span> <span class="title class_">MyServlet</span>(),<span class="string">&quot;/myservlet&quot;</span>);</span><br><span class="line">        <span class="comment">//        也可以这样设置</span></span><br><span class="line"><span class="comment">//        bean.setServlet();</span></span><br><span class="line"><span class="comment">//        bean.setUrlMappings();</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意一定要加@Bean</p><h2 id="3-Filter过滤器"><a href="#3-Filter过滤器" class="headerlink" title="3.Filter过滤器"></a>3.Filter过滤器</h2><p>Filter是Servlet规范的过滤器，一般用来处理字符编码</p><blockquote><p>1.创建自定义过滤器类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 自定义过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myfilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行过滤器&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.注册Filter对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册Filter拦截器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"></span><br><span class="line">    bean.setFilter(<span class="keyword">new</span> <span class="title class_">Myfilter</span>());</span><br><span class="line">    bean.addUrlPatterns(<span class="string">&quot;/user/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里顺便提一个Filter的最常用应用方式：字符集过滤器</strong>（框架自带）</p><p>作用：解决post请求乱码问题</p><blockquote><p>由于是框架自带的，所以只需要自己注册，将系统自带的过滤器放到注册Bean中</p></blockquote><blockquote><p>1.在容器中注册过滤器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是用自带的过滤器对象</span></span><br><span class="line">    <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定使用的编码方式</span></span><br><span class="line">    filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定req，resp都使用设定的编码</span></span><br><span class="line">    filter.setForceEncoding(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    bean.setFilter(filter);</span><br><span class="line">    bean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.设置过滤器使用编码等</p></blockquote><p>因为这是专用的字符过滤器，所以可以直接设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定使用的编码方式</span></span><br><span class="line">filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定req，resp都使用设定的编码</span></span><br><span class="line">filter.setForceEncoding(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><blockquote><p>3.在配置文件中设置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">  <span class="comment">#    将boot默认配置的过滤器关闭</span></span><br><span class="line">    <span class="attr">encoding:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>其实上面的方法略有脱裤放p之意😆</p><p>既然系统有自带的过滤器，我们可以直接修改默认过滤器的编码，以此来实现我们自己想要的效果</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">encoding:</span></span><br><span class="line">      <span class="attr">charset:</span> <span class="string">utf-8</span></span><br><span class="line"><span class="comment">#      把res，req都配置成我们的编码</span></span><br><span class="line">      <span class="attr">force:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="9-ORM操作数据库（Mysql）"><a href="#9-ORM操作数据库（Mysql）" class="headerlink" title="9.ORM操作数据库（Mysql）"></a>9.ORM操作数据库（Mysql）</h2><p>大体步骤：</p><ol><li>mybatis起步依赖：完成mybatis对象自动配置</li><li>创建实体类（对应数据库属性）</li><li>创建Dao接口，在接口中写方法名</li><li>写Dao接口对应的mapper文件，在mapper中写sql语句操作数据库</li><li>配置pom文件，将mapper.xml包含到类路径中</li><li>创建Service接口和实现类，调用dao方法</li><li>创建Controller，访问service</li><li>写配置类文件，在文件里配置数据库连接信息</li></ol><p>具体实现：</p><ol><li><p>起步依赖：</p><blockquote><p>SpringBoot里整合了mybatis,只需要在创建项目时选择就可以</p></blockquote></li></ol><p>​<img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305072154180.png"/></p><p>2.实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 林峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Mapper</span>: 告诉Mybatis这是dao接口，创建此接口的代理对象  位置：类的上面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得加@Mapper，@Mapper在上面专门讲注解的章节里有</p><p>4.mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lf.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lf.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from users</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意dao和mapper的分离，符合规范</strong></p><img src="https://lf-pictures.oss-cn-beijing.aliyuncs.com/img1/202305072159329.png"/><p>这样需要配置两处地方：</p><p>一是：配置文件中</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="comment">#Mapper文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>二是：在pom文件中设置,把mapper放入资源中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--resource插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.Service接口和实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个没什么好说的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类，@Service用来标识服务类</p><p>7.Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mycontroller</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">AllUser</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userService.getAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        <span class="keyword">return</span> users.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///db2?useSSL=false&amp;useServerPrepStmts=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">*****</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="comment">#Mapper文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment">#日志</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>如果想在控制台看到sql语句，就需要配置日志</p><h2 id="10-事务开启"><a href="#10-事务开启" class="headerlink" title="10.事务开启"></a>10.事务开启</h2><blockquote><p>什么是事务：简单说事务就是把多条语句绑在一起，要执行成功就一起成功，如果其中有一条失败（出错）就会回滚</p></blockquote><p>Springboot中使用事务：</p><p>1）在业务方法上面加@Transactional,加上后就有事务功能了</p><p>2）明确在主启动类上面加@EnableTransactionManager</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java入门笔记</title>
      <link href="/2023/03/27/java/"/>
      <url>/2023/03/27/java/</url>
      
        <content type="html"><![CDATA[<h1 id="驴のJAVA——奇妙之旅"><a href="#驴のJAVA——奇妙之旅" class="headerlink" title="驴のJAVA——奇妙之旅"></a>驴のJAVA——奇妙之旅</h1><blockquote><p>部分笔记来自韩顺平教育</p></blockquote><h3 id="Markdown快捷键"><a href="#Markdown快捷键" class="headerlink" title="Markdown快捷键"></a>Markdown快捷键</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-16%20194630.png"></p><h3 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h3><p>1.删除行：Ctrl + D</p><p>2.复制行：Ctrl + Alt + 向下箭头</p><p>3.补全代码：Alt + &#x2F;</p><p>4.导入该行需要的类：Alt + Enter</p><p>5.生成构造器快捷键：Alt + insert</p><p>6.快速定位方法Ctrl + B</p><p>7.自动分配变量名：.var</p><h2 id="1-类与对象"><a href="#1-类与对象" class="headerlink" title="1.类与对象"></a>1.类与对象</h2><h3 id="1-对象的内存布局"><a href="#1-对象的内存布局" class="headerlink" title="1.对象的内存布局"></a>1.对象的内存布局</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-16%20200010-16686960745503.png" style="zoom:50%;" />)</p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><p>​cat1是一个引用类型，他指向一块内存地址，那块内存地址里有类的&#x3D;&#x3D;属性信息&#x3D;&#x3D;</p><p>但要注意的是，如果是字符串型的属性信息，会放在&#x3D;&#x3D;方法区&#x3D;&#x3D;中的&#x3D;&#x3D;常量池&#x3D;&#x3D;里，只在类的内存地址中保存一个字符串的地址（如图）。</p><p>​当Cat类被new时，同时会在方法区对类的信息进行一个加载，加载内容是&#x3D;&#x3D;属性信息&#x3D;&#x3D;和&#x3D;&#x3D;方法&#x3D;&#x3D;。</p><h3 id="2-类与对象的内存分配机制"><a href="#2-类与对象的内存分配机制" class="headerlink" title="2.类与对象的内存分配机制"></a>2.类与对象的内存分配机制</h3><p>先看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.age = <span class="number">10</span>;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> p1;</span><br><span class="line"><span class="comment">//p1.age = 20;</span></span><br><span class="line">System.out.println(<span class="string">&quot;p2.age = &quot;</span> + p2.age);</span><br></pre></td></tr></table></figure><p>当我们先new了一个对象p1，并给p1的属性赋了值，如果这时再将p1赋值给p2，并输出p2的属性，会出现什么：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p2.age = 10</span><br></pre></td></tr></table></figure><p>和p1的值一致，那如果我们在输出之前修改p1的属性，结果这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p2.age = 20</span><br></pre></td></tr></table></figure><p>这说明p1，p2指向了同一块内存地址，相当于p1,p2是一个人的两个名字，但都是指向该人。</p><h3 id="（补充）JAVA的内存结构"><a href="#（补充）JAVA的内存结构" class="headerlink" title="（补充）JAVA的内存结构"></a>（补充）JAVA的内存结构</h3><h5 id="Java内存结构分析："><a href="#Java内存结构分析：" class="headerlink" title="Java内存结构分析："></a>Java内存结构分析：</h5><ul><li>1.栈：存放基本数据类型（局部变量）</li><li>2.堆：存放对象</li><li>3.方法区：常量池（常量，比如字符串），类加载信息</li></ul><h5 id="Java创建对象流程的简单分析："><a href="#Java创建对象流程的简单分析：" class="headerlink" title="Java创建对象流程的简单分析："></a>Java创建对象流程的简单分析：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = new Person();</span><br></pre></td></tr></table></figure><ul><li>1.先加载类信息（属性，方法）&#x3D;&#x3D;一个类只加载一次&#x3D;&#x3D;</li><li>2.在堆中分配空间，并默认初始化</li><li>3.把空间的地址分配给p1,p1指向该地址</li><li>4.进行指定初始化</li></ul><h2 id="2-JAVA方法调用机制"><a href="#2-JAVA方法调用机制" class="headerlink" title="2.JAVA方法调用机制"></a>2.JAVA方法调用机制</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-16%20211200.png"  />)</p><h2 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h2><p>步骤：</p><p>1）属性私有化</p><p>2）公共的get set方法，get用于获取，set用于赋值并判断其合理性</p><p>封装与构造器：可以在构造器内调用get，set，同样可以判断其合理性，如图</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-18%20010355.png"></p><h2 id="4-多态"><a href="#4-多态" class="headerlink" title="4.多态"></a>4.多态</h2><h4 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h4><p>父类的引用指向子类的对象，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="comment">//Dog是Animal类的子类</span></span><br></pre></td></tr></table></figure><p>同时满足：**&#x3D;&#x3D;编译类型看左边，运行类型看右边&#x3D;&#x3D;**（可以调用父类所有成员（看权限），不能调用子类特有成员，因为调用是由编译类型决定的，调用方法时，先从子类开始找，如果有则运行子类的方法，特别是有方法重写的时候）</p><h4 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h4><p>如果用向上转型定义了一个对象，那就会出现无法调用子类特有对象的情况，如果要调用，则需要进行向下转型，我习惯于看做强制类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal;</span><br><span class="line"><span class="comment">//animal.pop();这样是错误的，因为pop方法是Dog类特有</span></span><br><span class="line">dog.pop();</span><br></pre></td></tr></table></figure><h4 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h4><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-19%20021737.png"></p><p>简单说，只要调用了某个类的方法，那就会动态绑定到该类（用该类的属性）</p><h4 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h4><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-19%20022812.png"></p><p>instanceof用于判断运行类型，然后就可以根据运行类型通过向下转型来调用特有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(persons[i] <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">    ((Student)person[i]).study();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><p>即如果方法内的参数类型为父类，调用时可以传入子类对象作为参数。</p><h2 id="5-类变量类方法"><a href="#5-类变量类方法" class="headerlink" title="5.类变量类方法"></a>5.类变量类方法</h2><p>类变量是指属于这个类的变量，被所有该类的对象所共有，所以是静态的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> n;</span><br></pre></td></tr></table></figure><p>类方法是指一个被所有该类的对象共有的方法，它只能访问静态参数，另外静态方法可以实现类名.方法名（）直接调用，不需要对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">A</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h2 id="6-代码块"><a href="#6-代码块" class="headerlink" title="6.代码块"></a>6.代码块</h2><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>代码块又称初始化块，属于类中的成员，类似与方法，将逻辑语句封装在方法体重，用{}包围，可以用做对象初始化</p><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><p><strong>[修饰符]{</strong>&#x2F;&#x2F;修饰符可写可不写，但要写只能写static</p><p><strong>代码</strong></p><p><strong>}；</strong></p><h4 id="使用细节："><a href="#使用细节：" class="headerlink" title="使用细节："></a>使用细节：</h4><p>1.静态代码块只执行一次，普通代码块一个对象一次</p><p>2.类何时被加载 <strong>&#x3D;&#x3D;重要&#x3D;&#x3D;</strong></p><p> 1）创建对象</p><p> 2）创建子类对象</p><p> 3）使用静态成员</p><p>3.<img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-20%20010025.png"></p><p>先调用静态，在调用普通</p><p>4.<img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-20%20010350.png"></p><h2 id="7-单例设计模式"><a href="#7-单例设计模式" class="headerlink" title="7.单例设计模式"></a>7.单例设计模式</h2><p>解释：这个模式的类只允许有一个对象，称为单例，要符合这个要求，必须要把构造器&#x3D;&#x3D;私有化&#x3D;&#x3D;，这样用户就不能自己new对象了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子(饿汉式)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GirlFriend</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GirlFriend</span> <span class="variable">gf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;xiaohong&quot;</span>);<span class="comment">//在类的内部实例化对象//这个对象一定是私有且静态的，不是静态的话我们的静态方法返回不了。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GirlFriend <span class="title function_">getGirlF</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉式和饿汉式的区别在于，饿汉式是不管你用没用，他都创建一个对象等你，懒汉式是你不调用不创建。代码上的区别就在于，懒汉式把对象的创建放在了Get函数里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span>&#123;<span class="comment">//懒汉式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Girl girl;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Girl</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> Girl <span class="title function_">getGirl</span><span class="params">(String name)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(girl == <span class="literal">null</span>)&#123;</span><br><span class="line">girl = <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;某某某&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> girl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-final关键字"><a href="#8-final关键字" class="headerlink" title="8.final关键字"></a>8.final关键字</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20195759.png"></p><h2 id="9-抽象类"><a href="#9-抽象类" class="headerlink" title="9.抽象类"></a>9.抽象类</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20201134.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20202300.png"></p><h2 id="10-内部类"><a href="#10-内部类" class="headerlink" title="10.内部类"></a>10.内部类</h2><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20204456.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20204441.png"></p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>目的：简化开发，当某个类继承某个类，或者说一个接口，你只会使用它们一次，如果专门为他们写一个新的类或者接口，太过繁琐，我们就可以用匿名内部类实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子：</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>()&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;<span class="comment">//分号别忘了</span></span><br><span class="line">a.say();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类不能实例化，但可以通过匿名内部类</span></span><br><span class="line"><span class="keyword">abstract</span> A&#123;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>()&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;你甚至可以：&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;.say();<span class="comment">//直接调用方法</span></span><br></pre></td></tr></table></figure><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">AA</span>&#123;<span class="comment">//成员内部类</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="comment">//输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部类调用成员内部类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line">A.a 对象名 = A.<span class="keyword">new</span> <span class="title class_">a</span>();</span><br></pre></td></tr></table></figure><p>法二：在外部类里提供返回内部类对象的方法，接受类型仍然是A.a</p><h2 id="11-枚举类"><a href="#11-枚举类" class="headerlink" title="11.枚举类"></a>11.枚举类</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-24%20144955.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    XM(<span class="string">&quot;小明&quot;</span>，<span class="string">&quot;18&quot;</span>),XH(<span class="string">&quot;小红&quot;</span>，<span class="number">18</span>)；<span class="comment">//一定放在第一排，多个用逗号间隔</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//构造器，get，set省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举类常用方法"><a href="#枚举类常用方法" class="headerlink" title="枚举类常用方法"></a>枚举类常用方法</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-24%20152339.png"></p><h3 id="增强-x3D-x3D-for循环-x3D-x3D"><a href="#增强-x3D-x3D-for循环-x3D-x3D" class="headerlink" title="增强&#x3D;&#x3D;for循环&#x3D;&#x3D;"></a>增强&#x3D;&#x3D;for循环&#x3D;&#x3D;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i : A)&#123;</span><br><span class="line">    <span class="comment">//输出i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意！只能遍历不能赋值，因为i是个临时变量，不改变原来的值。</p><h2 id="12-集合"><a href="#12-集合" class="headerlink" title="12.集合"></a>12.集合</h2><h3 id="集合体系图"><a href="#集合体系图" class="headerlink" title="集合体系图"></a><em>集合体系图</em></h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-25%20113243.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-25%20113621.png"></p><h3 id="List常用方法"><a href="#List常用方法" class="headerlink" title="List常用方法"></a>List常用方法</h3><p>首先实现List接口的类，里面的元素是有序的，可重复的</p><h3 id="遍历collection类的方法"><a href="#遍历collection类的方法" class="headerlink" title="遍历collection类的方法"></a>遍历collection类的方法</h3><p>法一：迭代器（**&#x3D;&#x3D;快捷键：itit + 回车&#x3D;&#x3D;**）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设有集合，名字为col</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> col.iterator();<span class="comment">//获取该集合的迭代器</span></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;<span class="comment">//括号里的用来判断下一个地址有无元素</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();<span class="comment">//Object接受</span></span><br><span class="line">    <span class="comment">//输出next</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：增强for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Object obj:col)&#123;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList常用方法"><a href="#ArrayList常用方法" class="headerlink" title="ArrayList常用方法"></a>ArrayList常用方法</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-25%20112951.png"></p><h3 id="set接口：无序，不能有重复的，可以存放null"><a href="#set接口：无序，不能有重复的，可以存放null" class="headerlink" title="set接口：无序，不能有重复的，可以存放null"></a>set接口：无序，不能有重复的，可以存放null</h3><h2 id="13-应用过程如何选择集合类"><a href="#13-应用过程如何选择集合类" class="headerlink" title="13.应用过程如何选择集合类"></a>13.应用过程如何选择集合类</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-26%20222402.png"></p><h3 id="collection类的一些工具"><a href="#collection类的一些工具" class="headerlink" title="collection类的一些工具"></a>collection类的一些工具</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-26%20222606.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-26%20222752.png"></p><h2 id="14-使用JUnit快捷测试代码"><a href="#14-使用JUnit快捷测试代码" class="headerlink" title="14.使用JUnit快捷测试代码"></a>14.使用JUnit快捷测试代码</h2><p>JUnit可以用来快速测试类方法，不用搞对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//在需要测试的方法前加这个，然后Alt + enter 导入包之类的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-java作图"><a href="#15-java作图" class="headerlink" title="15.java作图"></a>15.java作图</h2><h3 id="java坐标图"><a href="#java坐标图" class="headerlink" title="java坐标图"></a>java坐标图</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-28%20164246.png"></p><h3 id="画板具体创建过程"><a href="#画板具体创建过程" class="headerlink" title="画板具体创建过程"></a>画板具体创建过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myPaint</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;<span class="comment">//继承了一个窗口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">myP</span> <span class="variable">mp</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//画板类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">myPaint</span>();<span class="comment">//画板对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">myPaint</span><span class="params">()</span>&#123;</span><br><span class="line">        mp = <span class="keyword">new</span> <span class="title class_">myP</span>();<span class="comment">//在构造器里对画板初始化</span></span><br><span class="line">        <span class="built_in">this</span>.add(mp);<span class="comment">//将画板加入窗口</span></span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">300</span>,<span class="number">300</span>);<span class="comment">//设置窗口大小</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);<span class="comment">//窗口可视化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myP</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span>&#123;<span class="comment">//相当于一个画板类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.paint(g);<span class="comment">//g相当于一个画笔，提供了很多方法，可以作图</span></span><br><span class="line">        g.drawOval(<span class="number">20</span>,<span class="number">20</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-线程"><a href="#16-线程" class="headerlink" title="16.线程"></a>16.线程</h2><h3 id="实现线程的方法"><a href="#实现线程的方法" class="headerlink" title="实现线程的方法"></a>实现线程的方法</h3><p>1.继承Thread 重写run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AoLG</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AoLG</span>();</span><br><span class="line">        a.start();<span class="comment">//不是run</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AoLG</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;加油，奥利给！&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//快捷try-catch：ctrl + alt + t</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.实现Runable接口 重写run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main&#123;</span><br><span class="line">    <span class="type">AOlg</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AOlg</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(a);<span class="comment">//这个调用很重要</span></span><br><span class="line">    t.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AOlg</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程插队"><a href="#线程插队" class="headerlink" title="线程插队"></a>线程插队</h3><blockquote><p>线程名 . join();</p></blockquote><p>注：插队本质是让调用插队函数的线程休眠，例如在main线程中调用子线程插队，则会休眠main让子线程先执行完。</p><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><blockquote><p>线程名 . setDaemon(true);</p><p>本线程结束，调用的子线程（守护进程）也结束</p></blockquote><h3 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h3><blockquote><p>同一时间内只能有一个线程对内存进行操作</p></blockquote><p>实现方法：</p><blockquote><p>synchronized关键字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Java网络部分"><a href="#Java网络部分" class="headerlink" title="Java网络部分"></a>Java网络部分</h2><h3 id="1-IP地址"><a href="#1-IP地址" class="headerlink" title="1.IP地址"></a>1.IP地址</h3><blockquote><p>1.IPV4一共有32位，四个字节，每个字节8位，每个都能显示0~255之间的数</p><p>2.IP地址：唯一标识主机</p></blockquote><h3 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20001611.png"></p><h3 id="2-Socket介绍"><a href="#2-Socket介绍" class="headerlink" title="2.Socket介绍"></a>2.Socket介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20225717.png"></p><p>简单讲就是一个桥梁，可以在两个网络之间进行IO流传递</p><h2 id="3-TCP编程"><a href="#3-TCP编程" class="headerlink" title="3.TCP编程"></a>3.<strong>TCP编程</strong></h2><h3 id="字节型"><a href="#字节型" class="headerlink" title="字节型"></a>字节型</h3><p>思路：</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230020.png"></p><p>&#x3D;&#x3D;服务器端&#x3D;&#x3D;代码：</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230606.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230656.png"></p><p>&#x3D;&#x3D;主机端&#x3D;&#x3D;代码：</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230812.png"></p><h3 id="结束标志"><a href="#结束标志" class="headerlink" title="结束标志"></a>结束标志</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20234110.png"></p><p>用于表示写入结束，不加会导致程序不知道是否写入结束，会一直卡在那里</p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>输出</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/QQ%E6%88%AA%E5%9B%BE20230105211644.jpg"></p><p>读入</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/QQ%E6%88%AA%E5%9B%BE20230105212901jpg"></p><h3 id="4-利用TCP实现文件上传"><a href="#4-利用TCP实现文件上传" class="headerlink" title="4.利用TCP实现文件上传"></a>4.利用TCP实现文件上传</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/QQ%E6%88%AA%E5%9B%BE20230105230612.jpg"></p><h3 id="5-实现多线程文件上传"><a href="#5-实现多线程文件上传" class="headerlink" title="5.实现多线程文件上传"></a>5.实现多线程文件上传</h3><blockquote><p>倘若要提高效率，可以调用线程，实现每访问一次就开一个线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runable</span>)&#123;</span><br><span class="line">    重写run方法</span><br><span class="line">&#125;).start;</span><br></pre></td></tr></table></figure><p>注意：1.服务端应该提前用死循环括起来，让他一直监听</p><p>2.文件名应该自定义一个生成模式，防止文件名重复</p><h2 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h2><h3 id="1-获取类的class方法"><a href="#1-获取类的class方法" class="headerlink" title="1.获取类的class方法"></a>1.获取类的class方法</h3><p>1.类名 + class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Student&gt; s = Student.class;</span><br></pre></td></tr></table></figure><p>2.调用对象的class方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Student</span>&gt; studentClass = student.getClass();</span><br></pre></td></tr></table></figure><p>3.使用class类静态方法Class.forName(某个类的全路径)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.Lfs_code.Student&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-通过反射获取class类的构造方法"><a href="#2-通过反射获取class类的构造方法" class="headerlink" title="2.通过反射获取class类的构造方法"></a>2.通过反射获取class类的构造方法</h3><p>1.获取单个构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;Student&gt; constructor = s.getConstructor();<span class="comment">//无参</span></span><br><span class="line">Constructor&lt;?&gt; constructor = aClass.getConstructor(<span class="type">int</span>.class,String.class);<span class="comment">//有参</span></span><br></pre></td></tr></table></figure><p><strong>注获取有参构造方法时，需要用到数据类型的“.class”形式</strong></p><p>2.另外如果需要访问私有构造方法需要使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="type">int</span>.class,String.class);<span class="comment">//私有公有都能访问</span></span><br><span class="line"><span class="comment">//调用是必须提前设置访问权</span></span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h3 id="3-访问成员变量"><a href="#3-访问成员变量" class="headerlink" title="3.访问成员变量"></a>3.访问成员变量</h3><p>1.获取全部成员变量，顺便遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Field[] declaredFields = aClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f:declaredFields</span><br><span class="line">             ) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>2.获取单个成员变量，并修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);<span class="comment">//如果该变量是私有的，就设置它的访问权</span></span><br><span class="line">        name.set(o,<span class="string">&quot;林峰&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-反射获取成员方法"><a href="#4-反射获取成员方法" class="headerlink" title="4.反射获取成员方法"></a>4.反射获取成员方法</h3><p>1.获取全部方法（和上面大差不差，基本不用）</p><p>2.获取单个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">study</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;study&quot;</span>);</span><br></pre></td></tr></table></figure><p>3.<strong>方法的调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">study.invoke(o);<span class="comment">//方法类型 + invoke + (调用方法的对象)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
