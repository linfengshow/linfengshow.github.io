<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java笔记</title>
      <link href="/2023/03/27/java/"/>
      <url>/2023/03/27/java/</url>
      
        <content type="html"><![CDATA[<h1 id="驴のJAVA——奇妙之旅"><a href="#驴のJAVA——奇妙之旅" class="headerlink" title="驴のJAVA——奇妙之旅"></a>驴のJAVA——奇妙之旅</h1><blockquote><p>部分笔记来自韩顺平教育</p></blockquote><h3 id="Markdown快捷键"><a href="#Markdown快捷键" class="headerlink" title="Markdown快捷键"></a>Markdown快捷键</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-16%20194630.png"></p><h3 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h3><p>1.删除行：Ctrl + D</p><p>2.复制行：Ctrl + Alt + 向下箭头</p><p>3.补全代码：Alt + &#x2F;</p><p>4.导入该行需要的类：Alt + Enter</p><p>5.生成构造器快捷键：Alt + insert</p><p>6.快速定位方法Ctrl + B</p><p>7.自动分配变量名：.var</p><h2 id="1-类与对象"><a href="#1-类与对象" class="headerlink" title="1.类与对象"></a>1.类与对象</h2><h3 id="1-对象的内存布局"><a href="#1-对象的内存布局" class="headerlink" title="1.对象的内存布局"></a>1.对象的内存布局</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-16%20200010-16686960745503.png" style="zoom:50%;" />)</p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><p>​cat1是一个引用类型，他指向一块内存地址，那块内存地址里有类的&#x3D;&#x3D;属性信息&#x3D;&#x3D;</p><p>但要注意的是，如果是字符串型的属性信息，会放在&#x3D;&#x3D;方法区&#x3D;&#x3D;中的&#x3D;&#x3D;常量池&#x3D;&#x3D;里，只在类的内存地址中保存一个字符串的地址（如图）。</p><p>​当Cat类被new时，同时会在方法区对类的信息进行一个加载，加载内容是&#x3D;&#x3D;属性信息&#x3D;&#x3D;和&#x3D;&#x3D;方法&#x3D;&#x3D;。</p><h3 id="2-类与对象的内存分配机制"><a href="#2-类与对象的内存分配机制" class="headerlink" title="2.类与对象的内存分配机制"></a>2.类与对象的内存分配机制</h3><p>先看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.age = <span class="number">10</span>;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> p1;</span><br><span class="line"><span class="comment">//p1.age = 20;</span></span><br><span class="line">System.out.println(<span class="string">&quot;p2.age = &quot;</span> + p2.age);</span><br></pre></td></tr></table></figure><p>当我们先new了一个对象p1，并给p1的属性赋了值，如果这时再将p1赋值给p2，并输出p2的属性，会出现什么：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p2.age = 10</span><br></pre></td></tr></table></figure><p>和p1的值一致，那如果我们在输出之前修改p1的属性，结果这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p2.age = 20</span><br></pre></td></tr></table></figure><p>这说明p1，p2指向了同一块内存地址，相当于p1,p2是一个人的两个名字，但都是指向该人。</p><h3 id="（补充）JAVA的内存结构"><a href="#（补充）JAVA的内存结构" class="headerlink" title="（补充）JAVA的内存结构"></a>（补充）JAVA的内存结构</h3><h5 id="Java内存结构分析："><a href="#Java内存结构分析：" class="headerlink" title="Java内存结构分析："></a>Java内存结构分析：</h5><ul><li>1.栈：存放基本数据类型（局部变量）</li><li>2.堆：存放对象</li><li>3.方法区：常量池（常量，比如字符串），类加载信息</li></ul><h5 id="Java创建对象流程的简单分析："><a href="#Java创建对象流程的简单分析：" class="headerlink" title="Java创建对象流程的简单分析："></a>Java创建对象流程的简单分析：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = new Person();</span><br></pre></td></tr></table></figure><ul><li>1.先加载类信息（属性，方法）&#x3D;&#x3D;一个类只加载一次&#x3D;&#x3D;</li><li>2.在堆中分配空间，并默认初始化</li><li>3.把空间的地址分配给p1,p1指向该地址</li><li>4.进行指定初始化</li></ul><h2 id="2-JAVA方法调用机制"><a href="#2-JAVA方法调用机制" class="headerlink" title="2.JAVA方法调用机制"></a>2.JAVA方法调用机制</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-16%20211200.png"  />)</p><h2 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h2><p>步骤：</p><p>1）属性私有化</p><p>2）公共的get set方法，get用于获取，set用于赋值并判断其合理性</p><p>封装与构造器：可以在构造器内调用get，set，同样可以判断其合理性，如图</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-18%20010355.png"></p><h2 id="4-多态"><a href="#4-多态" class="headerlink" title="4.多态"></a>4.多态</h2><h4 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h4><p>父类的引用指向子类的对象，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="comment">//Dog是Animal类的子类</span></span><br></pre></td></tr></table></figure><p>同时满足：**&#x3D;&#x3D;编译类型看左边，运行类型看右边&#x3D;&#x3D;**（可以调用父类所有成员（看权限），不能调用子类特有成员，因为调用是由编译类型决定的，调用方法时，先从子类开始找，如果有则运行子类的方法，特别是有方法重写的时候）</p><h4 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h4><p>如果用向上转型定义了一个对象，那就会出现无法调用子类特有对象的情况，如果要调用，则需要进行向下转型，我习惯于看做强制类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal;</span><br><span class="line"><span class="comment">//animal.pop();这样是错误的，因为pop方法是Dog类特有</span></span><br><span class="line">dog.pop();</span><br></pre></td></tr></table></figure><h4 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h4><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-19%20021737.png"></p><p>简单说，只要调用了某个类的方法，那就会动态绑定到该类（用该类的属性）</p><h4 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h4><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-19%20022812.png"></p><p>instanceof用于判断运行类型，然后就可以根据运行类型通过向下转型来调用特有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(persons[i] <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">    ((Student)person[i]).study();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><p>即如果方法内的参数类型为父类，调用时可以传入子类对象作为参数。</p><h2 id="5-类变量类方法"><a href="#5-类变量类方法" class="headerlink" title="5.类变量类方法"></a>5.类变量类方法</h2><p>类变量是指属于这个类的变量，被所有该类的对象所共有，所以是静态的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> n;</span><br></pre></td></tr></table></figure><p>类方法是指一个被所有该类的对象共有的方法，它只能访问静态参数，另外静态方法可以实现类名.方法名（）直接调用，不需要对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">A</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h2 id="6-代码块"><a href="#6-代码块" class="headerlink" title="6.代码块"></a>6.代码块</h2><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>代码块又称初始化块，属于类中的成员，类似与方法，将逻辑语句封装在方法体重，用{}包围，可以用做对象初始化</p><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><p><strong>[修饰符]{</strong>&#x2F;&#x2F;修饰符可写可不写，但要写只能写static</p><p><strong>代码</strong></p><p><strong>}；</strong></p><h4 id="使用细节："><a href="#使用细节：" class="headerlink" title="使用细节："></a>使用细节：</h4><p>1.静态代码块只执行一次，普通代码块一个对象一次</p><p>2.类何时被加载 <strong>&#x3D;&#x3D;重要&#x3D;&#x3D;</strong></p><p> 1）创建对象</p><p> 2）创建子类对象</p><p> 3）使用静态成员</p><p>3.<img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-20%20010025.png"></p><p>先调用静态，在调用普通</p><p>4.<img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-20%20010350.png"></p><h2 id="7-单例设计模式"><a href="#7-单例设计模式" class="headerlink" title="7.单例设计模式"></a>7.单例设计模式</h2><p>解释：这个模式的类只允许有一个对象，称为单例，要符合这个要求，必须要把构造器&#x3D;&#x3D;私有化&#x3D;&#x3D;，这样用户就不能自己new对象了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子(饿汉式)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GirlFriend</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GirlFriend</span> <span class="variable">gf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;lx&quot;</span>);<span class="comment">//在类的内部实例化对象//这个对象一定是私有且静态的，不是静态的话我们的静态方法返回不了。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GirlFriend <span class="title function_">getGirlF</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉式和饿汉式的区别在于，饿汉式是不管你用没用，他都创建一个对象等你，懒汉式是你不调用不创建。代码上的区别就在于，懒汉式把对象的创建放在了Get函数里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span>&#123;<span class="comment">//懒汉式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Girl girl;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Girl</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> Girl <span class="title function_">getGirl</span><span class="params">(String name)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(girl == <span class="literal">null</span>)&#123;</span><br><span class="line">girl = <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;某某某&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> girl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-final关键字"><a href="#8-final关键字" class="headerlink" title="8.final关键字"></a>8.final关键字</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20195759.png"></p><h2 id="9-抽象类"><a href="#9-抽象类" class="headerlink" title="9.抽象类"></a>9.抽象类</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20201134.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20202300.png"></p><h2 id="10-内部类"><a href="#10-内部类" class="headerlink" title="10.内部类"></a>10.内部类</h2><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20204456.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20204441.png"></p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>目的：简化开发，当某个类继承某个类，或者说一个接口，你只会使用它们一次，如果专门为他们写一个新的类或者接口，太过繁琐，我们就可以用匿名内部类实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子：</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>()&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;<span class="comment">//分号别忘了</span></span><br><span class="line">a.say();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类不能实例化，但可以通过匿名内部类</span></span><br><span class="line"><span class="keyword">abstract</span> A&#123;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>()&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;你甚至可以：&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;.say();<span class="comment">//直接调用方法</span></span><br></pre></td></tr></table></figure><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">AA</span>&#123;<span class="comment">//成员内部类</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="comment">//输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部类调用成员内部类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line">A.a 对象名 = A.<span class="keyword">new</span> <span class="title class_">a</span>();</span><br></pre></td></tr></table></figure><p>法二：在外部类里提供返回内部类对象的方法，接受类型仍然是A.a</p><h2 id="11-枚举类"><a href="#11-枚举类" class="headerlink" title="11.枚举类"></a>11.枚举类</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-24%20144955.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    XM(<span class="string">&quot;小明&quot;</span>，<span class="string">&quot;18&quot;</span>),XH(<span class="string">&quot;小红&quot;</span>，<span class="number">18</span>)；<span class="comment">//一定放在第一排，多个用逗号间隔</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//构造器，get，set省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举类常用方法"><a href="#枚举类常用方法" class="headerlink" title="枚举类常用方法"></a>枚举类常用方法</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-24%20152339.png"></p><h3 id="增强-x3D-x3D-for循环-x3D-x3D"><a href="#增强-x3D-x3D-for循环-x3D-x3D" class="headerlink" title="增强&#x3D;&#x3D;for循环&#x3D;&#x3D;"></a>增强&#x3D;&#x3D;for循环&#x3D;&#x3D;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i : A)&#123;</span><br><span class="line">    <span class="comment">//输出i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意！只能遍历不能赋值，因为i是个临时变量，不改变原来的值。</p><h2 id="12-集合"><a href="#12-集合" class="headerlink" title="12.集合"></a>12.集合</h2><h3 id="集合体系图"><a href="#集合体系图" class="headerlink" title="集合体系图"></a><em>集合体系图</em></h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-25%20113243.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-25%20113621.png"></p><h3 id="List常用方法"><a href="#List常用方法" class="headerlink" title="List常用方法"></a>List常用方法</h3><p>首先实现List接口的类，里面的元素是有序的，可重复的</p><h3 id="遍历collection类的方法"><a href="#遍历collection类的方法" class="headerlink" title="遍历collection类的方法"></a>遍历collection类的方法</h3><p>法一：迭代器（**&#x3D;&#x3D;快捷键：itit + 回车&#x3D;&#x3D;**）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设有集合，名字为col</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> col.iterator();<span class="comment">//获取该集合的迭代器</span></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;<span class="comment">//括号里的用来判断下一个地址有无元素</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();<span class="comment">//Object接受</span></span><br><span class="line">    <span class="comment">//输出next</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：增强for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Object obj:col)&#123;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList常用方法"><a href="#ArrayList常用方法" class="headerlink" title="ArrayList常用方法"></a>ArrayList常用方法</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-25%20112951.png"></p><h3 id="set接口：无序，不能有重复的，可以存放null"><a href="#set接口：无序，不能有重复的，可以存放null" class="headerlink" title="set接口：无序，不能有重复的，可以存放null"></a>set接口：无序，不能有重复的，可以存放null</h3><h2 id="13-应用过程如何选择集合类"><a href="#13-应用过程如何选择集合类" class="headerlink" title="13.应用过程如何选择集合类"></a>13.应用过程如何选择集合类</h2><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-26%20222402.png"></p><h3 id="collection类的一些工具"><a href="#collection类的一些工具" class="headerlink" title="collection类的一些工具"></a>collection类的一些工具</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-26%20222606.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-26%20222752.png"></p><h2 id="14-使用JUnit快捷测试代码"><a href="#14-使用JUnit快捷测试代码" class="headerlink" title="14.使用JUnit快捷测试代码"></a>14.使用JUnit快捷测试代码</h2><p>JUnit可以用来快速测试类方法，不用搞对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//在需要测试的方法前加这个，然后Alt + enter 导入包之类的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-java作图"><a href="#15-java作图" class="headerlink" title="15.java作图"></a>15.java作图</h2><h3 id="java坐标图"><a href="#java坐标图" class="headerlink" title="java坐标图"></a>java坐标图</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-28%20164246.png"></p><h3 id="画板具体创建过程"><a href="#画板具体创建过程" class="headerlink" title="画板具体创建过程"></a>画板具体创建过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myPaint</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;<span class="comment">//继承了一个窗口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">myP</span> <span class="variable">mp</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//画板类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">myPaint</span>();<span class="comment">//画板对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">myPaint</span><span class="params">()</span>&#123;</span><br><span class="line">        mp = <span class="keyword">new</span> <span class="title class_">myP</span>();<span class="comment">//在构造器里对画板初始化</span></span><br><span class="line">        <span class="built_in">this</span>.add(mp);<span class="comment">//将画板加入窗口</span></span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">300</span>,<span class="number">300</span>);<span class="comment">//设置窗口大小</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);<span class="comment">//窗口可视化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myP</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span>&#123;<span class="comment">//相当于一个画板类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.paint(g);<span class="comment">//g相当于一个画笔，提供了很多方法，可以作图</span></span><br><span class="line">        g.drawOval(<span class="number">20</span>,<span class="number">20</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-线程"><a href="#16-线程" class="headerlink" title="16.线程"></a>16.线程</h2><h3 id="实现线程的方法"><a href="#实现线程的方法" class="headerlink" title="实现线程的方法"></a>实现线程的方法</h3><p>1.继承Thread 重写run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AoLG</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AoLG</span>();</span><br><span class="line">        a.start();<span class="comment">//不是run</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AoLG</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;加油，奥利给！&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//快捷try-catch：ctrl + alt + t</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.实现Runable接口 重写run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main&#123;</span><br><span class="line">    <span class="type">AOlg</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AOlg</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(a);<span class="comment">//这个调用很重要</span></span><br><span class="line">    t.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AOlg</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程插队"><a href="#线程插队" class="headerlink" title="线程插队"></a>线程插队</h3><blockquote><p>线程名 . join();</p></blockquote><p>注：插队本质是让调用插队函数的线程休眠，例如在main线程中调用子线程插队，则会休眠main让子线程先执行完。</p><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><blockquote><p>线程名 . setDaemon(true);</p><p>本线程结束，调用的子线程（守护进程）也结束</p></blockquote><h3 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h3><blockquote><p>同一时间内只能有一个线程对内存进行操作</p></blockquote><p>实现方法：</p><blockquote><p>synchronized关键字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Java网络部分"><a href="#Java网络部分" class="headerlink" title="Java网络部分"></a>Java网络部分</h2><h3 id="1-IP地址"><a href="#1-IP地址" class="headerlink" title="1.IP地址"></a>1.IP地址</h3><blockquote><p>1.IPV4一共有32位，四个字节，每个字节8位，每个都能显示0~255之间的数</p><p>2.IP地址：唯一标识主机</p></blockquote><h3 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20001611.png"></p><h3 id="2-Socket介绍"><a href="#2-Socket介绍" class="headerlink" title="2.Socket介绍"></a>2.Socket介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20225717.png"></p><p>简单讲就是一个桥梁，可以在两个网络之间进行IO流传递</p><h2 id="3-TCP编程"><a href="#3-TCP编程" class="headerlink" title="3.TCP编程"></a>3.<strong>TCP编程</strong></h2><h3 id="字节型"><a href="#字节型" class="headerlink" title="字节型"></a>字节型</h3><p>思路：</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230020.png"></p><p>&#x3D;&#x3D;服务器端&#x3D;&#x3D;代码：</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230606.png"></p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230656.png"></p><p>&#x3D;&#x3D;主机端&#x3D;&#x3D;代码：</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20230812.png"></p><h3 id="结束标志"><a href="#结束标志" class="headerlink" title="结束标志"></a>结束标志</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-01-04%20234110.png"></p><p>用于表示写入结束，不加会导致程序不知道是否写入结束，会一直卡在那里</p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>输出</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/QQ%E6%88%AA%E5%9B%BE20230105211644.jpg"></p><p>读入</p><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/QQ%E6%88%AA%E5%9B%BE20230105212901jpg"></p><h3 id="4-利用TCP实现文件上传"><a href="#4-利用TCP实现文件上传" class="headerlink" title="4.利用TCP实现文件上传"></a>4.利用TCP实现文件上传</h3><p><img src="https://cdn.jsdelivr.net/gh/linfengshow/pictures@main/QQ%E6%88%AA%E5%9B%BE20230105230612.jpg"></p><h3 id="5-实现多线程文件上传"><a href="#5-实现多线程文件上传" class="headerlink" title="5.实现多线程文件上传"></a>5.实现多线程文件上传</h3><blockquote><p>倘若要提高效率，可以调用线程，实现每访问一次就开一个线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runable</span>)&#123;</span><br><span class="line">    重写run方法</span><br><span class="line">&#125;).start;</span><br></pre></td></tr></table></figure><p>注意：1.服务端应该提前用死循环括起来，让他一直监听</p><p>2.文件名应该自定义一个生成模式，防止文件名重复</p><h2 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h2><h3 id="1-获取类的class方法"><a href="#1-获取类的class方法" class="headerlink" title="1.获取类的class方法"></a>1.获取类的class方法</h3><p>1.类名 + class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Student&gt; s = Student.class;</span><br></pre></td></tr></table></figure><p>2.调用对象的class方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Student</span>&gt; studentClass = student.getClass();</span><br></pre></td></tr></table></figure><p>3.使用class类静态方法Class.forName(某个类的全路径)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.Lfs_code.Student&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-通过反射获取class类的构造方法"><a href="#2-通过反射获取class类的构造方法" class="headerlink" title="2.通过反射获取class类的构造方法"></a>2.通过反射获取class类的构造方法</h3><p>1.获取单个构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;Student&gt; constructor = s.getConstructor();<span class="comment">//无参</span></span><br><span class="line">Constructor&lt;?&gt; constructor = aClass.getConstructor(<span class="type">int</span>.class,String.class);<span class="comment">//有参</span></span><br></pre></td></tr></table></figure><p><strong>注获取有参构造方法时，需要用到数据类型的“.class”形式</strong></p><p>2.另外如果需要访问私有构造方法需要使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="type">int</span>.class,String.class);<span class="comment">//私有公有都能访问</span></span><br><span class="line"><span class="comment">//调用是必须提前设置访问权</span></span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h3 id="3-访问成员变量"><a href="#3-访问成员变量" class="headerlink" title="3.访问成员变量"></a>3.访问成员变量</h3><p>1.获取全部成员变量，顺便遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Field[] declaredFields = aClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f:declaredFields</span><br><span class="line">             ) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>2.获取单个成员变量，并修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);<span class="comment">//如果该变量是私有的，就设置它的访问权</span></span><br><span class="line">        name.set(o,<span class="string">&quot;林峰&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-反射获取成员方法"><a href="#4-反射获取成员方法" class="headerlink" title="4.反射获取成员方法"></a>4.反射获取成员方法</h3><p>1.获取全部方法（和上面大差不差，基本不用）</p><p>2.获取单个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">study</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;study&quot;</span>);</span><br></pre></td></tr></table></figure><p>3.<strong>方法的调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">study.invoke(o);<span class="comment">//方法类型 + invoke + (调用方法的对象)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/27/helloworld/"/>
      <url>/2023/03/27/helloworld/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
